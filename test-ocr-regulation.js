// Test OCR vs pdf-parse pour les r√®glements communaux
require('dotenv').config();
require('ts-node').register({ transpileOnly: true });

async function testOCRRegulation() {
  console.log('üîç Test OCR vs pdf-parse pour r√®glements communaux...');
  
  try {
    const fs = require('fs/promises');
    const path = require('path');
    
    // Fichier de test
    const regulationPath = path.join(process.cwd(), 'reglements/VS_V√©troz_R√®glement des constructions.pdf');
    
    console.log('\nüìÑ Fichier test√©:', regulationPath);
    
    // 1. Extraction avec pdf-parse
    console.log('\n1. Extraction pdf-parse...');
    const { extractTextFromPdf } = require('./src/lib/rdppfExtractor');
    const pdfText = await extractTextFromPdf(regulationPath);
    console.log(`‚úÖ pdf-parse: ${pdfText.length} caract√®res`);
    
    // 2. Test needsOCR
    console.log('\n2. Test qualit√© du texte...');
    const { needsOCR } = require('./src/lib/ocrService');
    const needsOcrCheck = needsOCR(pdfText);
    console.log(`üîç Besoin d'OCR: ${needsOcrCheck}`);
    
    // 3. Extraction avec OCR
    console.log('\n3. Extraction OCR...');
    const { extractTextFromBuffer, cleanOCRText } = require('./src/lib/ocrService');
    const pdfBuffer = await fs.readFile(regulationPath);
    
    console.log(`‚è≥ Lancement OCR sur ${pdfBuffer.length} bytes...`);
    const ocrResult = await extractTextFromBuffer(pdfBuffer, 'fra');
    
    console.log(`‚úÖ OCR termin√©: ${ocrResult.text.length} caract√®res`);
    console.log(`üéØ Confiance: ${ocrResult.confidence.toFixed(2)}%`);
    console.log(`‚è±Ô∏è Temps: ${ocrResult.processingTime}ms`);
    
    // 4. Comparaison
    console.log('\n4. Comparaison des r√©sultats:');
    console.log(`- pdf-parse: ${pdfText.length} caract√®res`);
    console.log(`- OCR: ${ocrResult.text.length} caract√®res`);
    console.log(`- Rapport: ${(ocrResult.text.length / pdfText.length * 100).toFixed(1)}%`);
    
    // 5. Aper√ßu du contenu
    console.log('\n5. Aper√ßu pdf-parse (300 premiers caract√®res):');
    console.log(pdfText.substring(0, 300) + '...');
    
    console.log('\n6. Aper√ßu OCR (300 premiers caract√®res):');
    console.log(ocrResult.text.substring(0, 300) + '...');
    
    // 6. D√©cision finale
    console.log('\n7. D√©cision finale:');
    if (needsOcrCheck) {
      console.log('üîç Texte pdf-parse de faible qualit√© ‚Üí OCR recommand√©');
    } else {
      console.log('‚úÖ Texte pdf-parse de bonne qualit√© ‚Üí OCR pas n√©cessaire');
    }
    
    if (ocrResult.confidence > 70 && ocrResult.text.length > pdfText.length) {
      console.log('‚úÖ OCR am√©liore le texte ‚Üí Utiliser OCR');
    } else {
      console.log('‚ö†Ô∏è OCR pas meilleur ‚Üí Garder pdf-parse');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    console.error('Stack:', error.stack);
  }
}

testOCRRegulation(); 