// Activer ts-node pour importer les modules TypeScript (transpile-only)
require('dotenv').config();
require('ts-node').register({ transpileOnly: true });

// Validation des variables d'environnement
const { validateEnvironment } = require('./config/env-validation');
validateEnvironment();

const express = require('express');
const session = require('express-session');
const passport = require('passport');
const cors = require('cors');
const helmet = require('helmet');
const csrf = require('csrf');
const rateLimit = require('express-rate-limit');
const multer = require('multer');
const path = require('path');
const sqlite3 = require('sqlite3').verbose();
const { Sequelize } = require('sequelize');
const expressLayouts = require('express-ejs-layouts');

// Syst√®me de logging centralis√©
const { logger, httpLogger, createContextLogger, logApiError } = require('./utils/logger');
const serverLogger = createContextLogger('SERVER');

// Gestionnaire de cache
const { cacheMiddleware } = require('./utils/cache-manager');

// Gestion d'erreurs centralis√©e
const { globalErrorHandler, notFoundHandler, asyncHandler, ValidationError, NotFoundError } = require('./utils/error-handler');

// Import des middlewares et routes
const authRoutes = require('./routes-node/auth');
const documentRoutes = require('./routes-node/documents');
const analysisRoutes = require('./routes-node/analysis');
const paymentRoutes = require('./routes-node/payment');

// Import des nouvelles routes refactoris√©es
const aiAnalysisRoutes = require('./routes/ai-analysis');

// Configuration de l'application
const app = express();
const PORT = process.env.PORT || 3001;

// Configuration Passport
require('./config/passport');

// === S√âCURIT√â : Configuration des headers de s√©curit√© avec Helmet ===
// D√©sactiver en mode d√©veloppement pour √©viter les probl√®mes HTTPS
if (process.env.NODE_ENV === 'production') {
  app.use(helmet({
    // Content Security Policy (CSP)
    contentSecurityPolicy: {
      directives: {
        defaultSrc: ["'self'"],
        scriptSrc: [
          "'self'", 
          "'unsafe-inline'", // N√©cessaire pour les scripts inline existants
          "https://cdnjs.cloudflare.com", 
          "https://unpkg.com",
          "https://api3.geo.admin.ch",
          "https://maps.googleapis.com"
        ],
        scriptSrcAttr: ["'unsafe-inline'"], // Permet les handlers onclick inline
        styleSrc: [
          "'self'", 
          "'unsafe-inline'", // N√©cessaire pour les styles inline
          "https://cdnjs.cloudflare.com",
          "https://fonts.googleapis.com"
        ],
        imgSrc: [
          "'self'", 
          "data:", 
          "https:", 
          "blob:"
        ],
        connectSrc: [
          "'self'", 
          "http://localhost:3001",
          "http://127.0.0.1:3001",
          "https://api3.geo.admin.ch",
          "https://rdppfvs.geopol.ch",
          "https://nominatim.openstreetmap.org",
          "https://maps.googleapis.com",
          "https://api.openai.com"
        ],
        fontSrc: [
          "'self'", 
          "https://fonts.gstatic.com",
          "data:"
        ],
        objectSrc: ["'none'"],
        mediaSrc: ["'self'"],
        frameSrc: [
          "'self'",
          "https://maps.google.com",
          "https://www.google.com"
        ]
      }
    },
    // Protection contre les attaques de clickjacking
    frameguard: { action: 'deny' },
    // Protection contre le sniffing MIME
    noSniff: true,
    // Protection XSS
    xssFilter: true,
    // R√©f√©rent Policy
    referrerPolicy: { policy: "same-origin" },
    // HSTS (HTTPS Strict Transport Security) - uniquement en production
    hsts: process.env.NODE_ENV === 'production' ? {
      maxAge: 31536000, // 1 an
      includeSubDomains: true,
      preload: true
    } : false
  }));
} else {
  // Mode d√©veloppement - s√©curit√© minimale pour √©viter les probl√®mes HTTPS
  console.log('üîß Mode d√©veloppement - Helmet d√©sactiv√© pour √©viter les probl√®mes HTTPS');
}

// Configuration de la base de donn√©es
const sequelize = new Sequelize({
  dialect: 'sqlite',
  storage: './urban_analysis.db',
  logging: false,
  // Optimisation pour le d√©veloppement
  pool: {
    max: 2,
    min: 0,
    acquire: 3000,
    idle: 1000
  },
  define: {
    timestamps: true,
    paranoid: false
  }
});

// Middlewares
app.use(cors({
  origin: ['http://localhost:3001', 'http://127.0.0.1:3001', 'https://localhost:3001'],
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
}));

// === S√âCURIT√â : Configuration du Rate Limiting ===
// Rate limiting g√©n√©ral pour toutes les requ√™tes
const generalLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 1000, // Limite √† 1000 requ√™tes par IP
  message: {
    error: 'Trop de requ√™tes, veuillez r√©essayer plus tard',
    retryAfter: 900 // 15 minutes
  },
  standardHeaders: true,
  legacyHeaders: false,
  // Exclure les assets statiques du rate limiting
  skip: (req) => {
    return req.path.startsWith('/css/') || 
           req.path.startsWith('/js/') || 
           req.path.startsWith('/images/') ||
           req.path.endsWith('.css') ||
           req.path.endsWith('.js') ||
           req.path.endsWith('.png') ||
           req.path.endsWith('.jpg') ||
           req.path.endsWith('.ico');
  }
});

// Rate limiting strict pour l'authentification
const authLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 5, // Seulement 5 tentatives de connexion
  message: {
    error: 'Trop de tentatives de connexion, veuillez r√©essayer dans 15 minutes',
    retryAfter: 900
  },
  standardHeaders: true,
  legacyHeaders: false
});

// Rate limiting pour les uploads
const uploadLimiter = rateLimit({
  windowMs: 60 * 60 * 1000, // 1 heure
  max: 10, // Maximum 10 uploads par heure
  message: {
    error: 'Trop d\'uploads, veuillez r√©essayer dans une heure',
    retryAfter: 3600
  },
  standardHeaders: true,
  legacyHeaders: false
});

// Rate limiting pour les analyses IA
const aiAnalysisLimiter = rateLimit({
  windowMs: 60 * 60 * 1000, // 1 heure
  max: 50, // Maximum 50 analyses IA par heure
  message: {
    error: 'Limite d\'analyses IA atteinte, veuillez r√©essayer dans une heure',
    retryAfter: 3600
  },
  standardHeaders: true,
  legacyHeaders: false
});

// Appliquer le rate limiting g√©n√©ral
app.use(generalLimiter);

app.use(express.json({ limit: '10mb' })); // Limiter la taille des JSON
app.use(express.urlencoded({ extended: true, limit: '10mb' }));
app.use(express.static('public'));

// Ajout du middleware de cache et de logging
app.use(httpLogger);
app.use(cacheMiddleware);

// Configuration des sessions avec secret s√©curis√©
app.use(session({
  secret: process.env.SESSION_SECRET || require('crypto').randomBytes(64).toString('hex'),
  resave: false,
  saveUninitialized: false,
  name: 'ddot.sid', // Nom de session personnalis√© pour √©viter l'empreinte
  cookie: {
    secure: process.env.NODE_ENV === 'production',
    httpOnly: true,
    maxAge: 24 * 60 * 60 * 1000, // 24 heures
    sameSite: 'strict' // Protection CSRF suppl√©mentaire
  }
}));

// === S√âCURIT√â : Protection CSRF ===
const csrfProtection = csrf();

// Middleware CSRF pour les routes sensibles (POST, PUT, DELETE)
const csrfMiddleware = (req, res, next) => {
  // Exclure les webhooks Stripe qui ont leur propre validation
  if (req.path.startsWith('/api/payment/webhook')) {
    return next();
  }
  
  // Exclure la route publique des r√®glements communaux
  if (req.path === '/api/documents/communal-regulations' && req.method === 'GET') {
    return next();
  }
  
  // Exclure les API publiques (lecture seule)
  if (req.method === 'GET' || req.path.startsWith('/api/analysis/search')) {
    return next();
  }
  
  // Appliquer la protection CSRF pour les autres routes
  const token = req.headers['x-csrf-token'] || req.body._csrf || req.query._csrf;
  
  if (!token) {
    return res.status(403).json({ error: 'Token CSRF manquant' });
  }
  
  try {
    if (!csrfProtection.verify(req.session.csrfSecret || '', token)) {
      return res.status(403).json({ error: 'Token CSRF invalide' });
    }
    next();
  } catch (err) {
    return res.status(403).json({ error: 'Erreur validation CSRF' });
  }
};

// Route pour obtenir un token CSRF
app.get('/api/csrf-token', (req, res) => {
  if (!req.session.csrfSecret) {
    req.session.csrfSecret = csrfProtection.secretSync();
  }
  const token = csrfProtection.create(req.session.csrfSecret);
  res.json({ csrfToken: token });
});

// Initialisation de Passport
app.use(passport.initialize());
app.use(passport.session());

// Configuration du moteur de template EJS
app.set('view engine', 'ejs');
app.set('views', path.join(__dirname, 'views'));
app.use(expressLayouts);
app.set('layout', 'layout');

// === S√âCURIT√â : Configuration s√©curis√©e de l'upload de fichiers ===
const fs = require('fs');
const crypto = require('crypto');

// Cr√©er le dossier uploads s'il n'existe pas
if (!fs.existsSync('uploads')) {
  fs.mkdirSync('uploads', { recursive: true });
}

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, 'uploads/');
  },
  filename: (req, file, cb) => {
    // Nom de fichier s√©curis√© avec hash pour √©viter les conflits
    const timestamp = Date.now();
    const randomBytes = crypto.randomBytes(8).toString('hex');
    const extension = path.extname(file.originalname).toLowerCase();
    const safeName = `${timestamp}_${randomBytes}${extension}`;
    cb(null, safeName);
  }
});

// Liste des types MIME autoris√©s avec leurs extensions
const allowedMimeTypes = {
  'application/pdf': ['.pdf'],
  'image/jpeg': ['.jpg', '.jpeg'],
  'image/png': ['.png'],
  'image/webp': ['.webp']
};

const upload = multer({
  storage: storage,
  limits: {
    fileSize: 25 * 1024 * 1024, // 25MB max (r√©duit pour la s√©curit√©)
    files: 1, // Un seul fichier √† la fois
    parts: 10, // Limite le nombre de parties dans une requ√™te multipart
    headerPairs: 20 // Limite les headers
  },
  fileFilter: (req, file, cb) => {
    try {
      // V√©rification stricte du type MIME et de l'extension
      const mimeType = file.mimetype.toLowerCase();
      const extension = path.extname(file.originalname).toLowerCase();
      
      if (!allowedMimeTypes[mimeType]) {
        return cb(new Error('Type de fichier non autoris√©'), false);
      }
      
      if (!allowedMimeTypes[mimeType].includes(extension)) {
        return cb(new Error('Extension de fichier non correspondante'), false);
      }
      
      // V√©rification du nom de fichier pour √©viter les caract√®res dangereux
      const unsafeChars = /[<>:"/\\|?*\x00-\x1f]/;
      if (unsafeChars.test(file.originalname)) {
        return cb(new Error('Nom de fichier contient des caract√®res non autoris√©s'), false);
      }
      
      // V√©rification de la longueur du nom
      if (file.originalname.length > 255) {
        return cb(new Error('Nom de fichier trop long'), false);
      }
      
      cb(null, true);
    } catch (error) {
      cb(new Error('Erreur lors de la validation du fichier'), false);
    }
  }
});

// Middleware pour scanner les fichiers upload√©s (d√©tection basique de malware)
const scanUploadedFile = async (req, res, next) => {
  if (!req.file) {
    return next();
  }
  
  try {
    const filePath = req.file.path;
    const stats = fs.statSync(filePath);
    
    // V√©rifications basiques de s√©curit√©
    if (stats.size === 0) {
      fs.unlinkSync(filePath);
      return res.status(400).json({ error: 'Fichier vide d√©tect√©' });
    }
    
    // Lecture des premiers bytes pour v√©rifier la signature du fichier
    const buffer = fs.readFileSync(filePath, { start: 0, end: 10 });
    const signature = buffer.toString('hex').toUpperCase();
    
    // Signatures de fichiers autoris√©s
    const validSignatures = {
      'PDF': ['255044462D'], // %PDF-
      'JPEG': ['FFD8FF'],
      'PNG': ['89504E470D0A1A0A'],
      'WEBP': ['52494646'] // RIFF
    };
    
    let isValidSignature = false;
    for (const [type, signatures] of Object.entries(validSignatures)) {
      for (const sig of signatures) {
        if (signature.startsWith(sig)) {
          isValidSignature = true;
          break;
        }
      }
    }
    
    if (!isValidSignature) {
      fs.unlinkSync(filePath);
      return res.status(400).json({ error: 'Signature de fichier invalide' });
    }
    
    next();
  } catch (error) {
    console.error('Erreur scan fichier:', error);
    if (req.file && req.file.path) {
      try {
        fs.unlinkSync(req.file.path);
      } catch (unlinkError) {
        console.error('Erreur suppression fichier:', unlinkError);
      }
    }
    res.status(500).json({ error: 'Erreur lors de la validation du fichier' });
  }
};

// Route pour le favicon pour √©viter les erreurs 404
app.get('/favicon.ico', (req, res) => {
  res.status(204).end(); // No Content
});

// Routes principales
app.get('/', (req, res) => {
  res.render('index', { user: req.user });
});

app.get('/login', (req, res) => {
  if (req.isAuthenticated()) {
    return res.redirect('/dashboard');
  }
  res.render('login', { user: null });
});

app.get('/register', (req, res) => {
  if (req.isAuthenticated()) {
    return res.redirect('/dashboard');
  }
  res.render('register', { user: null });
});

app.get('/logout', (req, res) => {
  req.logout((err) => {
    if (err) {
      console.error('Erreur lors de la d√©connexion:', err);
    }
    res.redirect('/');
  });
});

app.get('/dashboard', ensureAuthenticated, (req, res) => {
  res.render('dashboard', { user: req.user });
});

// Route publique pour r√®glements communaux (AVANT la route prot√©g√©e)
app.get('/api/documents/communal-regulations', async (req, res) => {
  try {
    const commune = req.query.commune;
    
    if (!commune) {
      return res.status(400).json({ error: 'Param√®tre commune requis' });
    }

    res.json({
      success: true,
      message: `R√®glement communal pour ${commune}`,
      commune: commune,
      document_url: `/documents/reglements/${commune.toLowerCase()}.pdf`,
      available: false,
      note: "Fonctionnalit√© en cours de d√©veloppement"
    });
  } catch (error) {
    console.error('Erreur t√©l√©chargement r√®glement:', error);
    res.status(500).json({ error: 'Erreur lors du t√©l√©chargement du r√®glement' });
  }
});

// Routes API avec protection CSRF et rate limiting
app.use('/api/auth', authLimiter, csrfMiddleware, authRoutes);
app.use('/api/documents', ensureAuthenticated, csrfMiddleware, documentRoutes);
app.use('/api/analysis', aiAnalysisLimiter, analysisRoutes); // Analyse avec rate limiting

// Nouvelle route d'analyse IA refactoris√©e
app.post('/api/ia-constraints', aiAnalysisLimiter, aiAnalysisRoutes.analyzeParcel);
app.post('/api/quick-analysis', aiAnalysisLimiter, aiAnalysisRoutes.quickAnalyze);
app.get('/api/ai-stats', aiAnalysisRoutes.getStats);
app.use('/api/payment', csrfMiddleware, paymentRoutes);

// === ROUTES D'ANALYSE IA REFACTORIS√âES ===
// L'ancienne route complexe a √©t√© remplac√©e par des modules s√©par√©s
// pour une meilleure maintenabilit√© et performance

// === NETTOYAGE EFFECTU√â ===
// L'ancienne route complexe d'analyse IA (500+ lignes) a √©t√© remplac√©e
// par le syst√®me modulaire dans /routes/ai-analysis.js
    
    const communalData = comprehensiveData.communalRegulations.map(r => 
      `${r.title}: ${r.content.substring(0, 500)}...`).join('\n\n') || 'R√®glement non disponible';

    const parcelInfo = comprehensiveData.searchResult ? 
      `EGRID: ${comprehensiveData.searchResult.egrid}, Surface: ${comprehensiveData.searchResult.surface || 'Non sp√©cifi√©e'}` : 
      'Informations parcelle limit√©es';

    const expertPrompt = `MISSION D'EXPERTISE URBANISME PROFESSIONNEL

PARCELLE √Ä ANALYSER: ${finalAddress}
${parcelInfo}

DONN√âES RDPPF OFFICIELLES:
${rdppfData}

R√àGLEMENT COMMUNAL:
${communalData}

DONN√âES ZONES ET CONTRAINTES:
${JSON.stringify(comprehensiveData.zones, null, 2)}

EN TANT QU'URBANISTE EXPERT CERTIFI√â, analysez cette parcelle selon le standard professionnel suisse.

LIVRABLE REQUIS - FORMAT JSON STRUCTUR√â:
{
  "commune": "nom_commune",
  "parcelles": [
    {
      "numero": "num√©ro_parcelle",
      "surface_totale_m2": nombre,
      "zones": {
        "CODE_ZONE": {
          "denomination": "description",
          "surface_m2": nombre,
          "indice_IBUS": nombre_decimal,
          "surface_utilisable_m2": nombre,
          "distance_min_m": nombre,
          "distance_normale": "formule ou valeur",
          "hauteur_max_m": nombre,
          "niveaux": "description",
          "gabarits_longueur_m": nombre_ou_null,
          "gabarits_largeur_m": nombre_ou_null,
          "toiture_pans": "description_ou_null",
          "toiture_pentes": "description_ou_null"
        }
      }
    }
  ],
  "places_de_parc": {
    "habitation_ratio": nombre_decimal,
    "remarques": "texte_ou_null"
  },
  "places_de_jeux": {
    "surface_par_logement_m2": nombre,
    "surface_max_terrain_unique_m2": nombre,
    "condition": "description"
  },
  "reglement_communal_resume": {
    "alignement_facades": "description",
    "affectation_[ZONE]": "description pour chaque zone"
  },
  "contraintes_supplementaires": [
    {
      "type": "categorie",
      "description": "contrainte d√©taill√©e",
      "impact": "faible|moyen|√©lev√©"
    }
  ]
}

CONSIGNES CRITIQUES:
1. Analysez TOUTES les contraintes (RDPPF + r√®glement + zones)
2. Calculez pr√©cis√©ment les indices IBUS et surfaces utilisables
3. Identifiez TOUTES les distances, hauteurs, gabarits
4. Extrayez les r√®gles de stationnement et espaces verts
5. Qualit√© niveau urbaniste certifi√© REG A/B
6. R√©ponse UNIQUEMENT en JSON valide, aucun texte avant/apr√®s`;

    // Configuration du mod√®le
    const completionConfig = {
      model: selectedModel,
      messages: [
        {
          role: 'system',
          content: 'Vous √™tes un urbaniste expert certifi√© REG A/B en Suisse, sp√©cialis√© en droit de la construction valaisan. Vos analyses respectent les normes SIA et la l√©gislation f√©d√©rale/cantonale. Vous produisez des expertises de niveau professionnel.'
        },
        {
          role: 'user',
          content: expertPrompt
        }
      ]
    };

    // Configuration sp√©cifique au mod√®le
    if (selectedModel.startsWith('o3') || selectedModel.startsWith('o1')) {
      completionConfig.reasoning_effort = 'high';
    } else {
      completionConfig.temperature = 0.05;
      completionConfig.max_tokens = 3000;
    }

    const completion = await openai.chat.completions.create(completionConfig);
    let expertAnalysis = completion.choices[0].message.content;

    // Nettoyer et parser le JSON
    try {
      // Extraire le JSON si entour√© de texte
      const jsonMatch = expertAnalysis.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        expertAnalysis = jsonMatch[0];
      }
      
      const parsedAnalysis = JSON.parse(expertAnalysis);
      
      // Extraire les contraintes pour le frontend
      const constraints = [];
      
      // Ajouter les contraintes des zones
      if (parsedAnalysis.parcelles && parsedAnalysis.parcelles[0] && parsedAnalysis.parcelles[0].zones) {
        Object.entries(parsedAnalysis.parcelles[0].zones).forEach(([zoneCode, zoneData]) => {
          constraints.push({
            title: `Zone ${zoneCode}: ${zoneData.denomination}`,
            description: `IBUS: ${zoneData.indice_IBUS}, Hauteur max: ${zoneData.hauteur_max_m}m, Distance min: ${zoneData.distance_min_m}m`,
            severity: "medium",
            source: "R√®glement communal",
            icon: "üèóÔ∏è"
          });
          
          if (zoneData.surface_utilisable_m2) {
            constraints.push({
              title: `Surface utilisable en zone ${zoneCode}`,
              description: `${zoneData.surface_utilisable_m2}m¬≤ sur ${zoneData.surface_m2}m¬≤ total`,
              severity: "medium", 
              source: "Calcul IBUS",
              icon: "üìê"
            });
          }
        });
      }
      
      // Ajouter les contraintes suppl√©mentaires
      if (parsedAnalysis.contraintes_supplementaires) {
        parsedAnalysis.contraintes_supplementaires.forEach(contrainte => {
          constraints.push({
            title: contrainte.type.charAt(0).toUpperCase() + contrainte.type.slice(1),
            description: contrainte.description,
            severity: contrainte.impact,
            source: "RDPPF/R√®glement",
            icon: "‚ö†Ô∏è"
          });
        });
      }
      
      // Ajouter places de parc si d√©finies
      if (parsedAnalysis.places_de_parc && parsedAnalysis.places_de_parc.habitation_ratio > 0) {
        constraints.push({
          title: "Places de parc",
          description: `Ratio: ${parsedAnalysis.places_de_parc.habitation_ratio} place(s) par logement`,
          severity: "medium",
          source: "R√®glement stationnement", 
          icon: "üöó"
        });
      }
      
      // Ajouter places de jeux si d√©finies
      if (parsedAnalysis.places_de_jeux && parsedAnalysis.places_de_jeux.surface_par_logement_m2 > 0) {
        constraints.push({
          title: "Aires de jeux",
          description: `${parsedAnalysis.places_de_jeux.surface_par_logement_m2}m¬≤ par logement, ${parsedAnalysis.places_de_jeux.condition}`,
          severity: "medium",
          source: "R√®glement espaces verts",
          icon: "üå±"
        });
      }

      const result = {
        success: true,
        data: {
          analysis: parsedAnalysis,
          parcel: {
            address: finalAddress,
            commune: parsedAnalysis.commune,
            model_used: selectedModel
          },
          constraints: constraints, // Format compatible frontend
          metadata: {
            model_used: selectedModel,
            parcelle_address: finalAddress,
            completeness: comprehensiveData.completeness,
            rdppf_constraints: comprehensiveData.rdppfConstraints.length,
            processing_time_ms: comprehensiveData.processingTime
          },
          raw_data: {
            rdppf: comprehensiveData.rdppfConstraints,
            zones: comprehensiveData.zones,
            communal_regulations: comprehensiveData.communalRegulations
          }
        },
        analysisType: analysisType,
        timestamp: new Date().toISOString()
      };
      
      console.log('‚úÖ Analyse d\'urbaniste expert termin√©e avec succ√®s');
      return res.json(result);
      
    } catch (parseError) {
      console.error('‚ùå Erreur parsing JSON:', parseError);
      
      // Fallback: extraire contraintes du texte
      const textConstraints = extractConstraintsFromText(expertAnalysis);
      
      const result = {
        success: true,
        data: {
          analysis: expertAnalysis,
          parcel: {
            address: finalAddress,
            commune: extractCommuneFromText(expertAnalysis),
            model_used: selectedModel
          },
          constraints: textConstraints, // Format compatible frontend
          metadata: {
            model_used: selectedModel,
            completeness: comprehensiveData.completeness,
            note: "Analyse textuelle (JSON parsing failed)"
          }
        }
      };
      return res.json(result);
    }
    
  } catch (error) {
    console.error('‚ùå Erreur analyse IA:', error);
    res.status(500).json({ error: 'Erreur lors de l\'analyse: ' + error.message });
  }
});

// Fonction de fallback pour analyse simplifi√©e si orchestrateur non disponible  
async function performSimplifiedAnalysis(address, req, res) {
  try {
    const OpenAI = require('openai');
    const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
    
    let selectedModel = 'gpt-4';
    try {
      await openai.models.retrieve('o1');
      selectedModel = 'o1';
    } catch (error) {
      // Fallback to gpt-4
    }
    
    const completion = await openai.chat.completions.create({
      model: selectedModel,
      messages: [
        {
          role: 'system',
          content: 'Vous √™tes un expert en urbanisme suisse. Analysez cette parcelle et fournissez un JSON structur√© avec les contraintes principales.'
        },
        {
          role: 'user', 
          content: `Analysez la parcelle "${address}" en format JSON avec commune, zones, contraintes IBUS, hauteurs, distances.`
        }
      ],
      ...(selectedModel === 'o1' ? { reasoning_effort: 'medium' } : { temperature: 0.1, max_tokens: 1500 })
    });
    
    return res.json({
      success: true,
      data: {
        analysis: completion.choices[0].message.content,
        metadata: { model_used: selectedModel, mode: 'simplified' }
      }
    });
    
  } catch (error) {
    return res.status(500).json({ error: 'Erreur analyse simplifi√©e: ' + error.message });
  }
}

// Fonction helper pour parser l'analyse IA en contraintes structur√©es
function parseAIAnalysisToConstraints(aiText) {
  const constraints = [];
  
  // Contraintes communes d'urbanisme suisse
  const constraintPatterns = [
    {
      theme: "Construction",
      patterns: [
        /IUS|indice.*utilisation.*sol.*(\d+[.,]\d+)/i,
        /IOS.*(\d+[.,]\d+)/i,
        /coefficient.*occupation.*(\d+[.,]\d+)/i
      ],
      icon: "üèóÔ∏è"
    },
    {
      theme: "Hauteur", 
      patterns: [
        /hauteur.*max.*(\d+[.,]?\d*)\s*(m|m√®tre)/i,
        /(\d+[.,]?\d*)\s*(m|m√®tre).*hauteur/i
      ],
      icon: "üìè"
    },
    {
      theme: "Distances",
      patterns: [
        /distance.*limite.*(\d+[.,]?\d*)\s*(m|m√®tre)/i,
        /recul.*(\d+[.,]?\d*)\s*(m|m√®tre)/i
      ],
      icon: "üìê"
    },
    {
      theme: "Espaces verts",
      patterns: [
        /espace.*vert.*(\d+)%/i,
        /v√©g√©tal.*(\d+)%/i
      ],
      icon: "üå±"
    },
    {
      theme: "Protection",
      patterns: [
        /protection.*patrimoine/i,
        /zone.*prot√©g√©e/i,
        /servitude/i
      ],
      icon: "üõ°Ô∏è"
    }
  ];

  constraintPatterns.forEach(category => {
    category.patterns.forEach(pattern => {
      const match = aiText.match(pattern);
      if (match) {
        constraints.push({
          theme: category.theme,
          title: match[0],
          description: extractContextAroundMatch(aiText, match.index, 100),
          severity: "medium",
          source: "Analyse IA urbanisme",
          icon: category.icon
        });
      }
    });
  });

  // Si aucune contrainte sp√©cifique trouv√©e, extraire des sections g√©n√©rales
  if (constraints.length === 0) {
    const sections = aiText.split(/\n\s*\n/);
    sections.forEach((section, index) => {
      if (section.length > 50 && index < 8) {
        constraints.push({
          theme: `Contrainte ${index + 1}`,
          title: section.split('\n')[0].substring(0, 100),
          description: section.substring(0, 200),
          severity: "medium",
          source: "Analyse IA urbanisme",
          icon: "üìã"
        });
      }
    });
  }

  return constraints.slice(0, 12); // Limiter √† 12 contraintes max
}

function extractContextAroundMatch(text, index, contextLength) {
  const start = Math.max(0, index - contextLength);
  const end = Math.min(text.length, index + contextLength);
  return text.substring(start, end).trim();
}

// Fonction pour extraire contraintes du texte si JSON parsing √©choue
function extractConstraintsFromText(text) {
  const constraints = [];
  
  // Patterns pour extraire les contraintes du texte
  const patterns = [
    {
      regex: /IBUS.*?(\d+[.,]\d+)/gi,
      title: "Indice d'utilisation du sol (IBUS)",
      icon: "üèóÔ∏è"
    },
    {
      regex: /hauteur.*?max.*?(\d+)\s*m/gi,
      title: "Hauteur maximale",
      icon: "üìè"
    },
    {
      regex: /distance.*?min.*?(\d+)\s*m/gi,
      title: "Distance minimale",
      icon: "üìê"
    },
    {
      regex: /surface.*?utilisable.*?(\d+)\s*m/gi,
      title: "Surface utilisable",
      icon: "üìê"
    }
  ];
  
  patterns.forEach(pattern => {
    let match;
    while ((match = pattern.regex.exec(text)) !== null) {
      constraints.push({
        title: pattern.title,
        description: match[0],
        severity: "medium",
        source: "Analyse textuelle",
        icon: pattern.icon
      });
    }
  });
  
  // Si aucune contrainte trouv√©e, cr√©er des contraintes g√©n√©riques
  if (constraints.length === 0) {
    const sections = text.split(/\n\s*\n/).slice(0, 5);
    sections.forEach((section, index) => {
      if (section.length > 30) {
        constraints.push({
          title: `Contrainte ${index + 1}`,
          description: section.substring(0, 150) + (section.length > 150 ? '...' : ''),
          severity: "medium",
          source: "Analyse IA",
          icon: "üìã"
        });
      }
    });
  }
  
  return constraints;
}

// Fonction pour extraire le nom de commune du texte
function extractCommuneFromText(text) {
  const communeMatch = text.match(/commune[^:\n]*?([A-Z][a-z]+)/i);
  return communeMatch ? communeMatch[1] : 'Non d√©termin√©e';
}

// Route pour t√©l√©charger les r√®glements communaux locaux
app.get('/api/regulation/:commune', (req, res) => {
  console.log('üì• T√©l√©chargement r√®glement demand√©:', req.protocol, req.get('host'), req.originalUrl);
  const commune = req.params.commune;
  const fs = require('fs');
  
  // Fonction pour normaliser les noms (enlever accents, standardiser)
  const normalize = (str) => {
    return str
      .normalize('NFD')
      .replace(/[\u0300-\u036f]/g, '') // Enlever les accents
      .toLowerCase()
      .trim();
  };
  
  // Essayer diff√©rentes variantes du nom du fichier
  const baseDir = path.join(__dirname, 'reglements');
  
  try {
    // Lister tous les fichiers du dossier reglements
    const files = fs.readdirSync(baseDir);
    
    // Chercher un fichier qui correspond √† la commune
    const matchingFile = files.find(file => {
      if (!file.endsWith('.pdf')) return false;
      
      // Normaliser le nom du fichier pour la comparaison
      const normalizedFile = normalize(file);
      const normalizedCommune = normalize(commune);
      
      // V√©rifier si le nom de commune est contenu dans le nom du fichier
      return normalizedFile.includes(normalizedCommune);
    });
    
    if (matchingFile) {
      const filePath = path.join(baseDir, matchingFile);
      
      // Servir le fichier PDF
      res.setHeader('Content-Type', 'application/pdf');
      res.setHeader('Content-Disposition', `attachment; filename="${matchingFile}"`);
      res.sendFile(filePath);
    } else {
      // Si aucun fichier n'est trouv√©, essayer avec le format standard
      const standardFilename = `VS_${commune}_R√®glement des constructions.pdf`;
      const standardPath = path.join(baseDir, standardFilename);
      
      if (fs.existsSync(standardPath)) {
        res.setHeader('Content-Type', 'application/pdf');
        res.setHeader('Content-Disposition', `attachment; filename="${standardFilename}"`);
        res.sendFile(standardPath);
      } else {
        res.status(404).json({ 
          error: `R√®glement non disponible pour la commune ${commune}`,
          message: 'Le fichier PDF du r√®glement communal n\'a pas √©t√© trouv√©.'
        });
      }
    }
  } catch (error) {
    console.error('Erreur lors de la recherche du r√®glement:', error);
    res.status(500).json({ 
      error: 'Erreur serveur',
      message: 'Une erreur est survenue lors de la recherche du r√®glement.'
    });
  }
});

// Route d'upload s√©curis√©e avec rate limiting
app.post('/api/upload', uploadLimiter, ensureAuthenticated, upload.single('file'), scanUploadedFile, async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: 'Aucun fichier fourni' });
    }

    const { commune, document_type } = req.body;
    
    // Cr√©er l'entr√©e en base de donn√©es
    const { Document } = require('./models-node');
    const document = await Document.create({
      filename: req.file.filename,
      originalFilename: req.file.originalname,
      userId: req.user.id,
      commune: commune || '',
      documentType: document_type || 'reglement'
    });

    // Extraction PDF supprim√©e - non n√©cessaire pour cette application
    // const { extractDocument } = require('./services-node/pdfService');
    // extractDocument(document.id, req.file.path);

    res.json({
      message: 'Document upload√© avec succ√®s',
      documentId: document.id
    });
  } catch (error) {
    console.error('Erreur upload:', error);
    res.status(500).json({ error: 'Erreur lors de l\'upload' });
  }
});

// Middleware d'authentification
function ensureAuthenticated(req, res, next) {
  if (req.isAuthenticated()) {
    return next();
  }
  if (req.path.startsWith('/api/')) {
    return res.status(401).json({ error: 'Non authentifi√©' });
  }
  res.redirect('/login');
}

// Gestion des erreurs 404
app.use((req, res) => {
  if (req.path.startsWith('/api/')) {
    res.status(404).json({ error: 'Endpoint non trouv√©' });
  } else {
    res.status(404).render('404');
  }
});

// === S√âCURIT√â : Gestion s√©curis√©e des erreurs ===
app.use((err, req, res, next) => {
  // Logger l'erreur compl√®te c√¥t√© serveur (sans l'exposer au client)
  console.error('Erreur serveur:', {
    message: err.message,
    stack: process.env.NODE_ENV === 'development' ? err.stack : undefined,
    url: req.url,
    method: req.method,
    ip: req.ip,
    userAgent: req.get('User-Agent'),
    timestamp: new Date().toISOString()
  });

  // Gestion sp√©cifique des erreurs Multer
  if (err instanceof multer.MulterError) {
    if (err.code === 'LIMIT_FILE_SIZE') {
      return res.status(400).json({ 
        error: 'Fichier trop volumineux',
        message: 'La taille du fichier ne peut pas d√©passer 25MB'
      });
    }
    if (err.code === 'LIMIT_FILE_COUNT') {
      return res.status(400).json({ 
        error: 'Trop de fichiers',
        message: 'Un seul fichier autoris√© √† la fois'
      });
    }
    return res.status(400).json({ 
      error: 'Erreur de t√©l√©chargement',
      message: 'Probl√®me lors du t√©l√©chargement du fichier'
    });
  }

  // Gestion des erreurs de validation
  if (err.name === 'ValidationError') {
    return res.status(400).json({ 
      error: 'Donn√©es invalides',
      message: 'Les donn√©es fournies ne respectent pas le format requis'
    });
  }

  // Gestion des erreurs de base de donn√©es
  if (err.name === 'SequelizeError' || err.name === 'SequelizeValidationError') {
    return res.status(500).json({ 
      error: 'Erreur de base de donn√©es',
      message: 'Une erreur est survenue lors de l\'acc√®s aux donn√©es'
    });
  }

  // Gestion des erreurs d'authentification
  if (err.name === 'UnauthorizedError') {
    return res.status(401).json({ 
      error: 'Non autoris√©',
      message: 'Acc√®s refus√©'
    });
  }

  // Erreur g√©n√©rique sans exposer les d√©tails internes
  const statusCode = err.status || err.statusCode || 500;
  
  if (req.path.startsWith('/api/')) {
    res.status(statusCode).json({ 
      error: statusCode === 500 ? 'Erreur serveur interne' : 'Erreur de traitement',
      message: process.env.NODE_ENV === 'development' ? err.message : 'Une erreur inattendue s\'est produite'
    });
  } else {
    res.status(statusCode).render('500', { 
      error: 'Une erreur s\'est produite',
      user: req.user || null 
    });
  }
});

// Initialisation de la base de donn√©es et d√©marrage du serveur
async function startServer() {
  try {
    // Importer les mod√®les pour la synchronisation
    const { sequelize: db } = require('./models-node');
    
    // Tester la connexion Supabase si configur√©e
    try {
      const { testSupabaseConnection } = require('./config/supabase');
      await testSupabaseConnection();
    } catch (error) {
      console.log('‚ÑπÔ∏è Supabase non configur√©, utilisation de SQLite');
    }
    
    // Synchroniser les mod√®les avec la base de donn√©es
    await db.sync();
    const dialect = db.getDialect();
    console.log(`‚úÖ Base de donn√©es synchronis√©e (${dialect.toUpperCase()})`);
    
    if (dialect === 'postgres') {
      console.log('üêò PostgreSQL/Supabase activ√© avec Row Level Security');
    } else {
      console.log('üìÅ SQLite activ√© (mode d√©veloppement)');
    }

    // Index vectoriel supprim√© - li√© √† l'extraction PDF
    // const { loadVectorIndex } = require('./services-node/vectorService');
    // await loadVectorIndex();

    // OCR initialis√© √† la demande (pas d'initialisation au d√©marrage)

    // D√©marrer le serveur
    app.listen(PORT, '0.0.0.0', () => {
      serverLogger.info(`Serveur Urban IA d√©marr√© sur port ${PORT}`, {
        port: PORT,
        environment: process.env.NODE_ENV,
        database: process.env.SUPABASE_DB_PASSWORD ? 'PostgreSQL' : 'SQLite'
      });
      console.log(`‚úÖ Serveur Urban IA d√©marr√© sur http://localhost:${PORT}`);
      console.log(`üåê Interface web accessible √† cette adresse`);
      console.log(`üì± Vous pouvez maintenant ouvrir votre navigateur`);
    });
  } catch (error) {
    serverLogger.error('Erreur au d√©marrage du serveur:', error);
    process.exit(1);
  }
}

// === GESTION D'ERREURS FINALES ===

// Middleware pour les routes non trouv√©es (doit √™tre avant le gestionnaire d'erreurs)
app.use(notFoundHandler);

// Gestionnaire d'erreurs global (doit √™tre en dernier)
app.use(globalErrorHandler);

// Export pour les tests
module.exports = app;

// D√©marrer le serveur si ce n'est pas un import
if (require.main === module) {
  startServer();
} 