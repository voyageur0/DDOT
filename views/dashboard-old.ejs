<%
const extraCss = `
<style>
    .upload-area {
        border: 2px dashed #ccc;
        border-radius: 10px;
        padding: 30px;
        text-align: center;
        transition: all 0.3s ease;
    }
    
    .upload-area:hover {
        border-color: var(--secondary-color);
        background-color: #f8f9fa;
    }
    
    .upload-area.dragover {
        border-color: var(--secondary-color);
        background-color: #e3f2fd;
    }
    
    .document-card {
        cursor: pointer;
        transition: all 0.3s ease;
    }
    
    .document-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 5px 15px rgba(0,0,0,.15);
    }
    
    .analysis-item {
        border-left: 3px solid var(--secondary-color);
        padding-left: 15px;
        margin-bottom: 15px;
    }
</style>
`;
%>

<div class="container my-4">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">
                Tableau de bord
                <% if (user.isPremium) { %>
                    <span class="premium-badge">PREMIUM</span>
                <% } %>
            </h1>
        </div>
    </div>
    
    <!-- Section Communes Valais -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="alert alert-info">
                <div class="row align-items-center">
                    <div class="col-md-8">
                        <h5 class="alert-heading mb-2">
                            <i class="bi bi-mountain"></i> Règlements du Valais Romand disponibles
                        </h5>
                        <p class="mb-0">
                            <strong>23 communes</strong> avec analyse complète : 
                            Arbaz, Ardon, Ayent, Chamoson, Charrat, Conthey, Martigny, Mase, Mollens, 
                            Nax, Nendaz, Riddes, Saillon, Saint-Léonard, Salgesch, Savièse, Saxon, 
                            Sierre, Sion, Vernamiège, Vérrossaz, Vétroz
                        </p>
                    </div>
                    <div class="col-md-4">
                        <button class="btn btn-outline-primary btn-sm" onclick="searchValaisDocuments()">
                            <i class="bi bi-search"></i> Rechercher dans les règlements
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Section Upload -->
    <div class="row mb-5">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <h3 class="card-title mb-4">
                        <i class="bi bi-cloud-upload"></i> Analyser un nouveau document
                    </h3>
                    
                    <form id="uploadForm" enctype="multipart/form-data">
                        <div class="upload-area" id="uploadArea">
                            <i class="bi bi-file-earmark-pdf" style="font-size: 48px; color: #ccc;"></i>
                            <h5 class="mt-3">Glissez-déposez votre PDF ici</h5>
                            <p class="text-muted">ou</p>
                            <input type="file" id="fileInput" name="file" accept=".pdf" style="display: none;">
                            <button type="button" class="btn btn-primary" onclick="document.getElementById('fileInput').click()">
                                Choisir un fichier
                            </button>
                            <p class="text-muted mt-2">PDF jusqu'à 50MB</p>
                        </div>
                        
                        <div class="row mt-3" id="fileDetails" style="display: none;">
                            <div class="col-md-6">
                                <label class="form-label">Commune</label>
                                <input type="text" name="commune" class="form-control" placeholder="Ex: Genève">
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Type de document</label>
                                <select name="document_type" class="form-select">
                                    <option value="reglement">Règlement d'urbanisme</option>
                                    <option value="cadastre">Extrait de cadastre</option>
                                    <option value="autre">Autre</option>
                                </select>
                            </div>
                            <div class="col-12 mt-3">
                                <button type="submit" class="btn btn-success">
                                    <i class="bi bi-upload"></i> Analyser le document
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Section Documents -->
    <div class="row mb-5">
        <div class="col-12">
            <h3 class="mb-4">
                <i class="bi bi-folder"></i> Mes documents
            </h3>
            
            <div class="row" id="documentsContainer">
                <div class="col-12">
                    <div class="text-center">
                        <div class="spinner-border"></div>
                        <p>Chargement des documents...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Section Analyses récentes -->
    <div class="row" id="analysesSection" style="display: none;">
        <div class="col-12">
            <h3 class="mb-4">
                <i class="bi bi-clock-history"></i> Analyses récentes
            </h3>
            
            <div class="card">
                <div class="card-body" id="analysesContainer">
                    <!-- Les analyses seront chargées ici -->
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal d'analyse -->
<div class="modal fade" id="analysisModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Analyse du document</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="analysisContent">
                    <!-- Le contenu sera injecté dynamiquement -->
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
<script>
// Variables globales
const isPremium = <%= user.isPremium ? 'true' : 'false' %>;

// Chargement initial
document.addEventListener('DOMContentLoaded', () => {
    loadDocuments();
    if (isPremium) {
        loadAnalyses();
    }
});

// Gestion du drag & drop
const uploadArea = document.getElementById('uploadArea');
const fileInput = document.getElementById('fileInput');
const uploadForm = document.getElementById('uploadForm');
const fileDetails = document.getElementById('fileDetails');

['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
    uploadArea.addEventListener(eventName, preventDefaults, false);
});

function preventDefaults(e) {
    e.preventDefault();
    e.stopPropagation();
}

['dragenter', 'dragover'].forEach(eventName => {
    uploadArea.addEventListener(eventName, () => {
        uploadArea.classList.add('dragover');
    });
});

['dragleave', 'drop'].forEach(eventName => {
    uploadArea.addEventListener(eventName, () => {
        uploadArea.classList.remove('dragover');
    });
});

uploadArea.addEventListener('drop', handleDrop);

function handleDrop(e) {
    const files = e.dataTransfer.files;
    handleFiles(files);
}

fileInput.addEventListener('change', (e) => {
    handleFiles(e.target.files);
});

function handleFiles(files) {
    if (files.length > 0) {
        const file = files[0];
        if (file.type === 'application/pdf') {
            fileInput.files = files;
            fileDetails.style.display = 'block';
            uploadArea.innerHTML = `
                <i class="bi bi-file-earmark-check text-success" style="font-size: 48px;"></i>
                <h5 class="mt-3">${file.name}</h5>
                <p class="text-muted">${(file.size / 1024 / 1024).toFixed(2)} MB</p>
            `;
        } else {
            alert('Veuillez sélectionner un fichier PDF');
        }
    }
}

// Soumission du formulaire
uploadForm.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const formData = new FormData(uploadForm);
    const submitBtn = uploadForm.querySelector('button[type="submit"]');
    
    submitBtn.disabled = true;
    submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Analyse en cours...';
    
    try {
        const response = await fetch('/api/upload', {
            method: 'POST',
            body: formData
        });
        
        const data = await response.json();
        
        if (response.ok) {
            alert('Document analysé avec succès !');
            window.location.reload();
        } else {
            alert(data.error || 'Erreur lors de l\'analyse');
        }
    } catch (error) {
        console.error('Erreur:', error);
        alert('Erreur lors de la connexion au serveur');
    } finally {
        submitBtn.disabled = false;
        submitBtn.innerHTML = '<i class="bi bi-upload"></i> Analyser le document';
    }
});

// Chargement des documents
async function loadDocuments() {
    try {
        const response = await fetch('/api/documents');
        const documents = await response.json();
        
        const container = document.getElementById('documentsContainer');
        
        if (documents.length === 0) {
            container.innerHTML = `
                <div class="col-12">
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle"></i> Aucun document uploadé pour le moment.
                    </div>
                </div>
            `;
        } else {
            container.innerHTML = documents.map(doc => `
                <div class="col-md-6 col-lg-4 mb-3">
                    <div class="card document-card" onclick="viewDocument(${doc.id})">
                        <div class="card-body">
                            <h5 class="card-title">
                                <i class="bi bi-file-earmark-pdf text-danger"></i>
                                ${doc.originalFilename || doc.filename}
                            </h5>
                            <p class="card-text">
                                <small class="text-muted">
                                    ${doc.commune ? `Commune: ${doc.commune}<br>` : ''}
                                    Uploadé le ${new Date(doc.createdAt).toLocaleDateString('fr-FR')}
                                </small>
                            </p>
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="badge bg-secondary">${doc.documentType}</span>
                                <button class="btn btn-sm btn-primary" onclick="event.stopPropagation(); analyzeDocument(${doc.id})">
                                    <i class="bi bi-search"></i> Analyser
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');
        }
    } catch (error) {
        console.error('Erreur chargement documents:', error);
    }
}

// Chargement des analyses
async function loadAnalyses() {
    try {
        const response = await fetch('/api/analysis/history');
        const analyses = await response.json();
        
        if (analyses.length > 0) {
            document.getElementById('analysesSection').style.display = 'block';
            const container = document.getElementById('analysesContainer');
            
            container.innerHTML = analyses.map(analysis => `
                <div class="analysis-item">
                    <div class="d-flex justify-content-between">
                        <h6>
                            ${analysis.analysisType === 'summary' ? '<i class="bi bi-file-text"></i> Résumé' : 
                              analysis.analysisType === 'feasibility_table' ? '<i class="bi bi-table"></i> Tableau de faisabilité' :
                              '<i class="bi bi-chat-dots"></i> Question personnalisée'}
                        </h6>
                        <small class="text-muted">${new Date(analysis.createdAt).toLocaleString('fr-FR')}</small>
                    </div>
                    <p class="mb-0 text-truncate">${analysis.result.substring(0, 100)}...</p>
                </div>
            `).join('');
        }
    } catch (error) {
        console.error('Erreur chargement analyses:', error);
    }
}

// Fonctions d'analyse
function viewDocument(docId) {
    // Pour l'instant, on analyse directement
    analyzeDocument(docId);
}

async function analyzeDocument(docId) {
    const modal = new bootstrap.Modal(document.getElementById('analysisModal'));
    const content = document.getElementById('analysisContent');
    
    content.innerHTML = '<div class="text-center"><div class="spinner-border"></div><p>Chargement des données...</p></div>';
    modal.show();
    
    try {
        const response = await fetch(`/api/documents/${docId}`);
        const data = await response.json();
        
        if (response.ok) {
            displayAnalysisOptions(data, content);
        } else {
            content.innerHTML = '<div class="alert alert-danger">Erreur lors du chargement</div>';
        }
    } catch (error) {
        console.error('Erreur:', error);
        content.innerHTML = '<div class="alert alert-danger">Erreur de connexion</div>';
    }
}

function displayAnalysisOptions(docData, container) {
    let html = `
        <h5>${docData.originalFilename || docData.filename}</h5>
        <div class="mb-4">
            <h6>Données extraites (Gratuit)</h6>
            <pre class="bg-light p-3">${JSON.stringify(docData.extractedData, null, 2)}</pre>
        </div>
    `;
    
    if (isPremium) {
        html += `
            <div class="row">
                <div class="col-md-4 mb-3">
                    <button class="btn btn-primary w-100" onclick="generateSummary(${docData.id})">
                        <i class="bi bi-file-text"></i> Générer un résumé
                    </button>
                </div>
                <div class="col-md-4 mb-3">
                    <button class="btn btn-primary w-100" onclick="generateFeasibilityTable(${docData.id})">
                        <i class="bi bi-table"></i> Tableau de faisabilité
                    </button>
                </div>
                <div class="col-md-4 mb-3">
                    <button class="btn btn-primary w-100" onclick="askQuestion(${docData.id})">
                        <i class="bi bi-chat-dots"></i> Poser une question
                    </button>
                </div>
            </div>
            <div id="aiResults" class="mt-4"></div>
        `;
    } else {
        html += `
            <div class="alert alert-warning">
                <i class="bi bi-lock"></i> Les fonctionnalités IA sont réservées aux membres Premium
                <button class="btn btn-warning btn-sm float-end" onclick="subscribeToPremium()">
                    Passer Premium
                </button>
            </div>
        `;
    }
    
    container.innerHTML = html;
}

// Fonctions IA Premium
async function generateSummary(docId) {
    const resultsDiv = document.getElementById('aiResults');
    resultsDiv.innerHTML = '<div class="spinner-border"></div> Génération du résumé...';
    
    try {
        const response = await fetch('/api/analysis/summary', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({documentId: docId})
        });
        
        const data = await response.json();
        
        if (response.ok) {
            resultsDiv.innerHTML = `
                <div class="card">
                    <div class="card-header">
                        <i class="bi bi-file-text"></i> Résumé généré par l'IA
                    </div>
                    <div class="card-body">
                        <p>${data.summary}</p>
                        <small class="text-muted">Chunks traités: ${data.chunksProcessed}</small>
                    </div>
                </div>
            `;
        } else {
            resultsDiv.innerHTML = `<div class="alert alert-danger">${data.error}</div>`;
        }
    } catch (error) {
        resultsDiv.innerHTML = '<div class="alert alert-danger">Erreur de connexion</div>';
    }
}

async function generateFeasibilityTable(docId) {
    const resultsDiv = document.getElementById('aiResults');
    resultsDiv.innerHTML = '<div class="spinner-border"></div> Génération du tableau...';
    
    try {
        const response = await fetch('/api/analysis/feasibility-table', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({documentId: docId})
        });
        
        const data = await response.json();
        
        if (response.ok) {
            resultsDiv.innerHTML = `
                <div class="card">
                    <div class="card-header">
                        <i class="bi bi-table"></i> Tableau de faisabilité
                    </div>
                    <div class="card-body">
                        ${marked.parse(data.table)}
                    </div>
                </div>
            `;
        } else {
            resultsDiv.innerHTML = `<div class="alert alert-danger">${data.error}</div>`;
        }
    } catch (error) {
        resultsDiv.innerHTML = '<div class="alert alert-danger">Erreur de connexion</div>';
    }
}

async function askQuestion(docId) {
    const question = prompt('Quelle est votre question sur ce document ?');
    if (!question) return;
    
    const resultsDiv = document.getElementById('aiResults');
    resultsDiv.innerHTML = '<div class="spinner-border"></div> L\'IA analyse votre question...';
    
    try {
        const response = await fetch('/api/analysis/ask-question', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({
                documentId: docId,
                question: question
            })
        });
        
        const data = await response.json();
        
        if (response.ok) {
            resultsDiv.innerHTML = `
                <div class="card">
                    <div class="card-header">
                        <i class="bi bi-chat-dots"></i> Question & Réponse
                    </div>
                    <div class="card-body">
                        <p><strong>Q:</strong> ${question}</p>
                        <p><strong>R:</strong> ${data.answer}</p>
                    </div>
                </div>
            `;
        } else {
            resultsDiv.innerHTML = `<div class="alert alert-danger">${data.error}</div>`;
        }
    } catch (error) {
        resultsDiv.innerHTML = '<div class="alert alert-danger">Erreur de connexion</div>';
    }
}

// Fonction pour rechercher dans les règlements du Valais
async function searchValaisDocuments() {
    const modal = new bootstrap.Modal(document.getElementById('analysisModal'));
    const content = document.getElementById('analysisContent');
    
    content.innerHTML = `
        <h5><i class="bi bi-mountain"></i> Recherche dans les règlements du Valais Romand</h5>
        <div class="mb-3">
            <input type="text" id="searchQuery" class="form-control" placeholder="Posez votre question sur les règlements d'urbanisme...">
        </div>
        <div class="mb-3">
            <button class="btn btn-primary" onclick="performValaisSearch()">
                <i class="bi bi-search"></i> Rechercher
            </button>
        </div>
        <div id="searchResults"></div>
    `;
    
    modal.show();
}

async function performValaisSearch() {
    const query = document.getElementById('searchQuery').value;
    const resultsDiv = document.getElementById('searchResults');
    
    if (!query.trim()) {
        resultsDiv.innerHTML = '<div class="alert alert-warning">Veuillez entrer une question</div>';
        return;
    }
    
    resultsDiv.innerHTML = '<div class="spinner-border"></div> Recherche en cours...';
    
    try {
        const response = await fetch('/api/analysis/search', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({
                query: query,
                commune: 'valais'
            })
        });
        
        const data = await response.json();
        
        if (response.ok) {
            resultsDiv.innerHTML = `
                <div class="card mt-3">
                    <div class="card-header">
                        <i class="bi bi-search"></i> Résultats de recherche
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <strong>Réponse:</strong>
                            <p>${data.answer}</p>
                        </div>
                        <div>
                            <strong>Sources:</strong>
                            <ul class="list-unstyled">
                                ${data.sources.map(source => `
                                    <li class="mb-2">
                                        <i class="bi bi-file-earmark-pdf"></i> 
                                        ${source.commune} - ${source.filename}
                                        <small class="text-muted d-block">${source.content.substring(0, 200)}...</small>
                                    </li>
                                `).join('')}
                            </ul>
                        </div>
                    </div>
                </div>
            `;
        } else {
            resultsDiv.innerHTML = `<div class="alert alert-danger">${data.error}</div>`;
        }
    } catch (error) {
        resultsDiv.innerHTML = '<div class="alert alert-danger">Erreur de connexion</div>';
    }
}
</script> 