// Test final simulant exactement l'API /api/ia-constraints
require('dotenv').config();
require('ts-node').register({ transpileOnly: true });

async function testFinal() {
  console.log('üîç Test final simulation API...');
  
  try {
    // 1. Analyse compl√®te comme dans l'API
    const { performComprehensiveAnalysis } = require('./src/lib/parcelAnalysisOrchestrator');
    const analysis = await performComprehensiveAnalysis('12558 vetroz 6025 ch773017495270');
    
    console.log('\nüìä R√©sultat analyse:');
    console.log('- RDPPF:', analysis.rdppfConstraints?.length || 0);
    console.log('- Communales:', analysis.communalConstraints?.length || 0);
    console.log('- Compl√©tude:', analysis.completeness + '%');
    
    // 2. Aper√ßu des contraintes
    if (analysis.rdppfConstraints?.length) {
      console.log('\nüìã √âchantillon RDPPF:');
      analysis.rdppfConstraints.slice(0, 3).forEach((c, i) => {
        console.log(`${i+1}. ${c.theme}: ${c.rule.substring(0, 100)}...`);
      });
    }
    
    if (analysis.communalConstraints?.length) {
      console.log('\nüèõÔ∏è √âchantillon communales:');
      analysis.communalConstraints.slice(0, 3).forEach((c, i) => {
        console.log(`${i+1}. ${c.theme}: ${c.rule.substring(0, 100)}...`);
      });
    }
    
    // 3. Prompt exacte comme dans l'API
    const enrichedPrompt = `${analysis.formattedForAI}

---

INSTRUCTION STRICTE : Utilise UNIQUEMENT les donn√©es ci-dessus pour remplir les 8 th√®mes obligatoires.
Si une donn√©e manque, √©cris "Non sp√©cifi√© dans les documents analys√©s" mais UTILISE TOUTES les contraintes extraites.

Exemples concrets trouv√©s dans les documents :
- STATIONNEMENT : Si tu vois "1 place par 65 m¬≤", utilise cette r√®gle exacte
- GABARITS : Si tu vois "hauteur max 12 m", utilise cette valeur exacte  
- ZONES : Si tu vois "zone d'habitation R2", utilise cette d√©signation exacte

STRUCTURE OBLIGATOIRE (8 th√®mes num√©rot√©s) :
1. **Identification** : Parcelle, commune, coordonn√©es
2. **Destination de zone** : Type exact depuis RDPPF/r√®glement
3. **Indice d'utilisation (IBUS)** : Valeur exacte si mentionn√©e
4. **Gabarits & reculs** : Hauteurs et distances exactes
5. **Toiture** : Contraintes exactes (pente, mat√©riaux)
6. **Stationnement** : R√®gles exactes (nombre places/m¬≤)
7. **Espaces de jeux/d√©tente** : Obligations exactes si mentionn√©es
8. **Prescriptions architecturales** : Contraintes exactes de style/mat√©riaux`;
    
    console.log('\nüìù D√©but prompt (premiers 800 caract√®res):');
    console.log(enrichedPrompt.substring(0, 800) + '...');
    
    // 4. Appel OpenAI comme dans l'API
    const { callOpenAI } = require('./src/utils/openai');
    
    console.log('\nü§ñ Appel OpenAI...');
    const response = await callOpenAI({
      model: 'gpt-4o-mini',
      temperature: 0.3,
      messages: [
        { role: 'system', content: 'Tu es un expert en urbanisme suisse. R√©ponds en fran√ßais.' },
        { role: 'user', content: enrichedPrompt }
      ],
      max_tokens: 2000
    });
    
    const result = response.choices[0].message?.content || '';
    console.log('\nüìÑ R√©ponse OpenAI (premiers 800 caract√®res):');
    console.log(result.substring(0, 800) + '...');
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  }
}

testFinal(); 