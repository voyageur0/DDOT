const express = require('express');
const router = express.Router();
const axios = require('axios');
const { createContextLogger } = require('../utils/logger');
const apiKeyManager = require('../utils/api-key-manager');
const { performComprehensiveAnalysis } = require('../dist/lib/parcelAnalysisOrchestrator');
const { performO3Analysis } = require('../dist/lib/o3AnalysisEngine');

const logger = createContextLogger('IA_CONSTRAINTS');

// Fonction helper pour obtenir l'ic√¥ne selon la s√©v√©rit√©
function getIconForSeverity(severity) {
  const severityIcons = {
    'critical': 'üö®',
    'high': '‚ö†Ô∏è',
    'medium': 'üìã',
    'low': '‚ÑπÔ∏è'
  };
  return severityIcons[severity] || 'üìå';
}

// Service OpenAI simple
async function callOpenAI(prompt) {
  const apiKey = apiKeyManager.getKey('OPENAI_API_KEY');
  
  if (!apiKey || !apiKeyManager.validateOpenAI()) {
    throw new Error('Cl√© OpenAI manquante ou invalide');
  }

  try {
    const response = await axios.post('https://api.openai.com/v1/chat/completions', {
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: 'Tu es un expert en urbanisme suisse qui analyse les contraintes de construction pour une parcelle donn√©e. Tu r√©ponds TOUJOURS et UNIQUEMENT en JSON valide, sans aucun formatage markdown, sans backticks, sans texte avant ou apr√®s le JSON.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      max_tokens: 800,
      temperature: 0.2,
      response_format: { type: "json_object" }
    }, {
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      },
      timeout: 15000 // 15 secondes timeout
    });

    return response.data.choices[0].message.content;
  } catch (error) {
    if (error.response?.status === 401) {
      logger.error('Cl√© OpenAI invalide');
      throw new Error('Cl√© OpenAI invalide - veuillez v√©rifier votre configuration');
    }
    throw error;
  }
}

// Analyse des contraintes simplifi√©e (version de fallback)
async function analyzeConstraints(searchQuery) {
  try {
    // Essayer avec OpenAI d'abord
    const prompt = `Analyse rapidement les contraintes d'urbanisme pour "${searchQuery}" en Valais, Suisse.

IMPORTANT: R√©ponds UNIQUEMENT avec un JSON valide, sans texte avant ou apr√®s.

Fournis exactement 4 contraintes principales au format JSON suivant:
{
  "constraints": [
    {
      "title": "Zone d'affectation",
      "description": "D√©cris le type de zone probable (zone √† b√¢tir d'habitation faible densit√©, zone mixte, zone centre, etc.) et ses implications",
      "severity": "medium",
      "source": "R√®glement communal des constructions et des zones"
    },
    {
      "title": "Indice d'utilisation du sol (IBUS)",
      "description": "Indique l'IBUS probable (entre 0.3 et 1.0 selon la zone) et ce que cela signifie concr√®tement pour la construction",
      "severity": "high",
      "source": "R√®glement de construction communal"
    },
    {
      "title": "Hauteur maximale et gabarits",
      "description": "Pr√©cise la hauteur maximale autoris√©e (en m√®tres et nombre d'√©tages) selon la zone",
      "severity": "medium",
      "source": "Plan d'affectation des zones"
    },
    {
      "title": "Distances et reculs",
      "description": "Indique les distances minimales aux limites de parcelle et entre b√¢timents",
      "severity": "low",
      "source": "R√®glement communal"
    }
  ],
  "summary": "Analyse des contraintes d'urbanisme principales pour ${searchQuery}. Ces informations sont bas√©es sur les r√®glements types du canton du Valais."
}`;

    let result = await callOpenAI(prompt);
    
    // Nettoyer la r√©ponse des backticks markdown si pr√©sents
    result = result.replace(/^```json\s*\n?/, '').replace(/\n?```\s*$/, '').trim();
    
    try {
      const parsed = JSON.parse(result);
      // S'assurer que les contraintes sont bien format√©es
      if (parsed.constraints && Array.isArray(parsed.constraints)) {
        return {
          constraints: parsed.constraints.map(c => ({
            title: c.title || "Contrainte",
            description: c.description || "",
            severity: c.severity || "medium",
            source: c.source || "Analyse IA",
            icon: getIconForSeverity(c.severity || "medium")
          })),
          summary: parsed.summary || "Analyse des contraintes d'urbanisme"
        };
      }
      return parsed;
    } catch (parseError) {
      logger.warn('Parsing JSON √©chou√©, extraction manuelle', { error: parseError.message });
      
      // Extraire les contraintes manuellement du texte
      const constraints = [];
      
      // Essayer d'extraire les zones d'affectation
      if (result.includes("zone") || result.includes("Zone")) {
        constraints.push({
          title: "Zone d'affectation",
          description: "Analyse de la zone d'affectation selon le r√®glement communal",
          severity: "medium",
          source: "R√®glement communal",
          icon: "üèóÔ∏è"
        });
      }
      
      // Essayer d'extraire les indices d'utilisation
      if (result.includes("IBUS") || result.includes("indice")) {
        constraints.push({
          title: "Indice d'utilisation (IBUS)",
          description: "Coefficient d'utilisation du sol applicable √† la parcelle",
          severity: "high",
          source: "R√®glement de construction",
          icon: "üìä"
        });
      }
      
      // Ajouter une contrainte g√©n√©rale si aucune contrainte sp√©cifique n'est trouv√©e
      if (constraints.length === 0) {
        constraints.push({
          title: "Analyse g√©n√©rale",
          description: "Contraintes d'urbanisme standards applicables selon le r√®glement communal",
          severity: "medium",
          source: "Analyse IA",
          icon: "üìã"
        });
      }
      
      return {
        constraints,
        summary: "Analyse des contraintes bas√©e sur l'extraction de texte"
      };
    }
  } catch (error) {
    logger.warn('OpenAI indisponible, utilisation de l\'analyse de fallback', { error: error.message });
    
    // Fallback : analyse basique bas√©e sur le nom de commune
    return getFallbackAnalysis(searchQuery);
  }
}

// Analyse de fallback sans OpenAI
function getFallbackAnalysis(searchQuery) {
  const commune = extractCommune(searchQuery);
  
  return {
    constraints: [
      {
        title: "Zone d'affectation",
        description: `Analyse des contraintes pour ${commune}. Zone probablement d'habitat ou mixte selon le r√®glement communal.`,
        severity: "medium",
        source: "Analyse locale"
      },
      {
        title: "Indice d'utilisation",
        description: "IBUS typique entre 0.4 et 0.8 selon la zone d'affectation.",
        severity: "high",
        source: "R√®glement de construction"
      },
      {
        title: "Hauteur maximale",
        description: "Hauteur g√©n√©ralement limit√©e √† 2-3 √©tages selon la zone.",
        severity: "medium",
        source: "Prescriptions communales"
      },
      {
        title: "Reculs obligatoires",
        description: "Reculs minimum requis par rapport aux limites de parcelle.",
        severity: "low",
        source: "R√®glement communal"
      }
    ],
    summary: `Analyse des contraintes principales pour ${commune}. Consultez le r√®glement communal pour les d√©tails sp√©cifiques.`
  };
}

// Extraire le nom de commune de la recherche
function extractCommune(searchQuery) {
  const communes = ['Sion', 'Martigny', 'Monthey', 'Sierre', 'V√©troz', 'Conthey', 'Savi√®se', 'Fully', 'Riddes', 'Saxon', 'Leytron', 'Chamoson', 'Ardon', 'Nendaz', 'Ayent'];
  
  for (const commune of communes) {
    if (searchQuery.toLowerCase().includes(commune.toLowerCase())) {
      return commune;
    }
  }
  
  return searchQuery || 'Valais';
}

// Route principale pour l'analyse IA avanc√©e avec o3
router.post('/', async (req, res) => {
  const startTime = Date.now();
  
  try {
    const { searchQuery, analysisType = 'comprehensive' } = req.body;
    
    logger.info('Nouvelle demande d\'analyse IA o3', { 
      searchQuery, 
      analysisType,
      ip: req.ip 
    });

    if (!searchQuery) {
      return res.status(400).json({
        success: false,
        error: 'Le param√®tre searchQuery est requis'
      });
    }

    // V√©rifier la cl√© OpenAI
    if (!apiKeyManager.isConfigured('OPENAI_API_KEY')) {
      return res.status(503).json({
        success: false,
        error: 'Service d\'analyse IA temporairement indisponible',
        details: 'Cl√© API OpenAI non configur√©e'
      });
    }

    // √âtape 1: Analyse compl√®te de la parcelle
    logger.info('D√©but analyse compl√®te de parcelle...');
    const parcelData = await performComprehensiveAnalysis(searchQuery);
    
    // √âtape 2: Analyse o3 avanc√©e avec double niveau
    logger.info('D√©but analyse o3 avanc√©e...');
    const o3Result = await performO3Analysis(parcelData);

    const duration = Date.now() - startTime;
    
    logger.info('Analyse o3 termin√©e avec succ√®s', {
      searchQuery,
      duration: `${duration}ms`,
      constraintsCount: o3Result.constraints?.length || 0,
      confidence: o3Result.confidence
    });

    // Formater la r√©ponse pour le front-end existant
    res.json({
      success: true,
      data: {
        // Format compatible avec le front-end actuel
        constraints: o3Result.constraints.map(c => ({
          title: c.title,
          description: c.description,
          severity: c.severity,
          source: c.source,
          icon: getIconForCategory(c.category),
          details: {
            zone: c.zone,
            values: c.values,
            requirements: c.requirements,
            impact: c.impact,
            confidence: c.confidence,
            reasoning: c.reasoning
          }
        })),
        summary: o3Result.summary.executive, // R√©sum√© ex√©cutif pour affichage principal
        
        // Donn√©es enrichies o3
        analysis: {
          technical: o3Result.summary.technical,
          practical: o3Result.summary.practical,
          zoneInfo: o3Result.zoneAnalysis,
          calculations: o3Result.calculations,
          recommendations: o3Result.recommendations,
          risks: o3Result.risks,
          opportunities: o3Result.opportunities,
          nextSteps: o3Result.nextSteps
        },
        
        // Informations parcelle
        parcel: {
          address: parcelData.searchResult?.number || searchQuery,
          commune: parcelData.searchResult?.municipality || parcelData.parcelDetails?.municipality || "√Ä d√©terminer",
          egrid: parcelData.searchResult?.egrid || "Non disponible",
          surface: parcelData.parcelDetails?.surface || 0,
          zone: o3Result.zoneAnalysis.mainZone,
          model_used: "o3/gpt-4o"
        }
      },
      metadata: {
        analysisType: 'o3_advanced',
        duration,
        confidence: o3Result.confidence,
        processingMetrics: o3Result.processingMetrics,
        timestamp: new Date().toISOString()
      }
    });

  } catch (error) {
    const duration = Date.now() - startTime;
    
    logger.error('Erreur lors de l\'analyse IA o3', {
      error: error.message,
      duration: `${duration}ms`,
      stack: error.stack
    });

    // Fallback vers l'analyse simple en cas d'erreur
    try {
      logger.info('Tentative fallback vers analyse simple...');
      const fallbackResult = await analyzeConstraints(req.body.searchQuery);
      
      res.json({
        success: true,
        data: {
          constraints: fallbackResult.constraints || [],
          summary: fallbackResult.summary || '',
          parcel: {
            address: req.body.searchQuery,
            commune: "√Ä d√©terminer",
            model_used: "gpt-4o-mini (fallback)"
          }
        },
        metadata: {
          analysisType: 'fallback',
          duration: Date.now() - startTime,
          timestamp: new Date().toISOString(),
          warning: 'Analyse avanc√©e indisponible, r√©sultats simplifi√©s'
        }
      });
    } catch (fallbackError) {
      res.status(500).json({
        success: false,
        error: 'Erreur lors de l\'analyse des contraintes',
        details: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
  }
});

// Fonction helper pour les ic√¥nes
function getIconForCategory(category) {
  const iconMap = {
    'zone_affectation': 'üèóÔ∏è',
    'gabarits_hauteurs': 'üìè',
    'reculs_distances': '‚ÜîÔ∏è',
    'densit√©_ibus': 'üìä',
    'stationnement': 'üöó',
    'toiture_architecture': 'üè†',
    'espaces_verts': 'üå≥',
    'contraintes_environnementales': 'üåç',
    'prescriptions_architecturales': 'üé®',
    'proc√©dures_administratives': 'üìã'
  };
  return iconMap[category] || 'üìå';
}

// Route pour analyse rapide
router.post('/quick', async (req, res) => {
  req.body.analysisType = 'quick';
  return router.handle(req, res);
});

// Route de test
router.get('/health', (req, res) => {
  res.json({
    success: true,
    message: 'Service d\'analyse IA op√©rationnel',
    openaiConfigured: apiKeyManager.isConfigured('OPENAI_API_KEY'),
    apiKeyValid: apiKeyManager.validateOpenAI()
  });
});

module.exports = router;