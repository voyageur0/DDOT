// Test extraction OpenAI avec vrais PDFs
require('dotenv').config(); // Charger les variables d'environnement
require('ts-node').register({ transpileOnly: true });

async function testOpenAIExtraction() {
  console.log('üîç Test extraction OpenAI...');
  
  try {
    // 1. Charger le texte du r√®glement
    console.log('\n1. Lecture r√®glement V√©troz...');
    const fs = require('fs/promises');
    const path = require('path');
    const pdfParse = require('pdf-parse');
    
    const localPath = path.join(process.cwd(), 'reglements/VS_V√©troz_R√®glement des constructions.pdf');
    const dataBuffer = await fs.readFile(localPath);
    const data = await pdfParse(dataBuffer);
    
    console.log('‚úÖ R√®glement lu:', data.text.length, 'caract√®res');
    
    // 2. Test extraction contraintes via OpenAI
    console.log('\n2. Test extraction OpenAI...');
    const { extractConstraintsFromLargeText } = require('./src/lib/regulationExtractor');
    
    // Prendre un √©chantillon du texte pour test
    const sampleText = data.text.substring(0, 5000);
    console.log('üìù √âchantillon analys√©:', sampleText.length, 'caract√®res');
    console.log('üìù D√©but √©chantillon:');
    console.log(sampleText.substring(0, 300) + '...');
    
    const constraints = await extractConstraintsFromLargeText(sampleText);
    console.log('\n‚úÖ Contraintes extraites:', constraints.length);
    
    if (constraints.length > 0) {
      console.log('üìÑ √âchantillon contraintes:');
      constraints.slice(0, 5).forEach((c, i) => {
        console.log(`${i+1}. Th√®me: ${c.theme} | Zone: ${c.zone} | R√®gle: ${c.rule.substring(0, 100)}...`);
      });
    } else {
      console.log('‚ùå Aucune contrainte extraite - probl√®me OpenAI ou prompt');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  }
}

testOpenAIExtraction(); 