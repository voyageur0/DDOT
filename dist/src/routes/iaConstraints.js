"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const perf_hooks_1 = require("perf_hooks");
const axios_1 = __importDefault(require("axios"));
const router = (0, express_1.Router)();
// Cl√© OpenAI depuis variable d'environnement uniquement
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
if (!OPENAI_API_KEY) {
    console.error('‚ùå ERREUR CRITIQUE: OPENAI_API_KEY manquante dans les variables d\'environnement');
    console.error('üìù Cr√©ez un fichier .env avec OPENAI_API_KEY=sk-votre-cle-api');
}
// Test de la cl√© API au d√©marrage
async function testOpenAIConnection() {
    if (!OPENAI_API_KEY) {
        console.log('‚ö†Ô∏è OpenAI d√©sactiv√© - cl√© API manquante');
        return false;
    }
    try {
        const response = await axios_1.default.post('https://api.openai.com/v1/models', {}, {
            headers: {
                'Authorization': `Bearer ${OPENAI_API_KEY}`,
                'Content-Type': 'application/json'
            },
            timeout: 10000
        });
        console.log('‚úÖ OpenAI connect√© avec succ√®s');
        return true;
    }
    catch (error) {
        console.error('‚ùå Erreur de connexion OpenAI:', error.response?.status, error.response?.statusText);
        if (error.response?.status === 401) {
            console.error('üîë Cl√© API OpenAI invalide ou expir√©e');
        }
        return false;
    }
}
// Test au d√©marrage du module
testOpenAIConnection();
// Fonction d'appel √† OpenAI SIMPLIFI√âE - vraies connaissances uniquement
async function callOpenAISimple(userQuery, communeData, parcelData) {
    console.log('üöÄ ü§ñ Appel OpenAI avec vraies connaissances');
    try {
        console.log('üéØ Envoi requ√™te OpenAI...');
        const response = await axios_1.default.post('https://api.openai.com/v1/chat/completions', {
            model: 'gpt-4o-mini',
            messages: [
                {
                    role: 'system',
                    content: `Tu es un expert urbaniste sp√©cialis√© dans les r√®glements du canton du Valais, Suisse. 

MISSION: Fournir une analyse pr√©cise et factuelle d'une parcelle cadastrale valaisanne.

CONSIGNES STRICTES:
- Utilise UNIQUEMENT tes vraies connaissances des r√®glements valaisans
- Ne pas inventer de donn√©es chiffr√©es sp√©cifiques
- Baser l'analyse sur les vrais principes d'urbanisme du Valais
- Mentionner les vraies r√©f√©rences l√©gales (LAT, LCAT, r√®glements communaux)
- Identifier les vraies proc√©dures administratives
- Donner des ordres de grandeur r√©alistes pour le Valais

DONN√âES R√âELLES √Ä ANALYSER:
Commune: ${communeData.commune}
Coordonn√©es: ${communeData.coordinates} 
Adresse: ${communeData.address}
Parcelle: ${parcelData.parcelId}

FORMAT ATTENDU:
1. Identification de la commune et zone probable
2. R√®glements applicables (r√©f√©rences r√©elles)
3. Contraintes d'urbanisme typiques du Valais
4. Proc√©dures administratives r√©elles
5. Recommandations pratiques

IMPORTANT: Sois pr√©cis mais prudent - indique quand une v√©rification officielle est n√©cessaire.`
                },
                {
                    role: 'user',
                    content: userQuery
                }
            ],
            max_tokens: 3000,
            temperature: 0.1
        }, {
            headers: {
                'Authorization': `Bearer ${OPENAI_API_KEY}`,
                'Content-Type': 'application/json'
            },
            timeout: 30000
        });
        const expertAnalysis = response.data.choices[0].message.content;
        console.log(`‚úÖ Analyse OpenAI re√ßue: ${expertAnalysis.length} caract√®res`);
        return expertAnalysis;
    }
    catch (error) {
        console.error('üí• ERREUR OPENAI D√âTAILL√âE:', {
            status: error.response?.status,
            statusText: error.response?.statusText,
            message: error.message,
            data: error.response?.data,
            timeout: error.code === 'ECONNABORTED' ? 'Timeout d√©pass√©' : 'Non',
            api_key_present: !!OPENAI_API_KEY,
            api_key_format: OPENAI_API_KEY ? `${OPENAI_API_KEY.substring(0, 7)}...${OPENAI_API_KEY.substring(OPENAI_API_KEY.length - 4)}` : 'Absente'
        });
        // Message d'erreur d√©taill√© pour d√©buggage
        let errorMsg = `Erreur OpenAI`;
        if (!OPENAI_API_KEY) {
            errorMsg += ` - Cl√© API manquante dans les variables d'environnement`;
        }
        else if (error.response?.status === 401) {
            errorMsg += ` - Cl√© API invalide ou expir√©e (${OPENAI_API_KEY.substring(0, 7)}...${OPENAI_API_KEY.substring(OPENAI_API_KEY.length - 4)})`;
        }
        else if (error.response?.status === 429) {
            errorMsg += ` - Limite de taux d√©pass√©e (trop de requ√™tes)`;
        }
        else if (error.response?.status === 500) {
            errorMsg += ` - Erreur serveur OpenAI`;
        }
        else if (error.code === 'ECONNABORTED') {
            errorMsg += ` - Timeout (>30s)`;
        }
        else if (error.code === 'ENOTFOUND' || error.code === 'ECONNREFUSED') {
            errorMsg += ` - Probl√®me de connexion r√©seau`;
        }
        throw new Error(`${errorMsg}: ${error.response?.data?.error?.message || error.message}`);
    }
}
router.post('/ia-constraints', async (req, res, next) => {
    try {
        console.log('üìû Requ√™te IA re√ßue:', req.body);
        const { coordinates, address, commune, parcelId } = req.body;
        if (!coordinates) {
            return res.status(400).json({ error: 'Coordonn√©es manquantes' });
        }
        // üöÄ IA OpenAI PURE avec vraies connaissances - AUCUNE donn√©e fictive
        try {
            console.log(`ü§ñ Lancement analyse OpenAI PURE pour ${commune || 'la commune'}...`);
            const t0 = perf_hooks_1.performance.now();
            // Donn√©es r√©elles uniquement
            const communeData = {
                commune: commune || 'Commune √† identifier',
                coordinates: coordinates,
                address: address
            };
            const parcelData = {
                address: address || coordinates,
                parcelId: parcelId || 'Non sp√©cifi√©',
                coordinates: coordinates
            };
            // Appel IA OpenAI avec prompt simplifi√© pour vraies donn√©es
            const userQuery = `Analyse cette parcelle cadastrale au Valais, Suisse. Utilise tes vraies connaissances sur l'urbanisme valaisan, les r√®glements en vigueur et les donn√©es officielles. Fournis une analyse pr√©cise et factuelle bas√©e sur les r√®glements r√©els.
      
      Commune: ${commune || '√Ä identifier via coordonn√©es'}
      Adresse: ${address || '√Ä d√©terminer'}
      Coordonn√©es: ${coordinates}
      Parcelle: ${parcelId || '√Ä identifier'}
      
      IMPORTANT: Utilise uniquement tes vraies connaissances des r√®glements valaisans officiels, pas de donn√©es invent√©es.`;
            const openaiAnalysis = await callOpenAISimple(userQuery, communeData, parcelData);
            const elapsedMs = perf_hooks_1.performance.now() - t0;
            console.log(`‚úÖ ü§ñ Analyse OpenAI PURE termin√©e en ${Math.round(elapsedMs)}ms`);
            res.json({
                constraints: openaiAnalysis,
                elapsedMs: Math.round(elapsedMs),
                commune: commune || '√Ä identifier',
                source: 'OpenAI GPT-4o-mini avec vraies connaissances'
            });
        }
        catch (openaiError) {
            console.log('‚ùå Erreur OpenAI:', openaiError.message);
            // Pas de fallback avec donn√©es fictives - retourner l'erreur
            res.status(500).json({
                error: 'Service d\'analyse temporairement indisponible',
                message: 'OpenAI est requis pour l\'analyse. V√©rifiez votre cl√© API.',
                technical_error: openaiError.message
            });
        }
    }
    catch (err) {
        console.error('‚ùå Erreur dans l\'API IA:', err);
        next(err);
    }
});
module.exports = router;
