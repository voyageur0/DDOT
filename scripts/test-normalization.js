const { normalizeConstraint, normalizeConstraints } = require('../dist/i18n/constraintNormalizer');

async function testNormalization() {
  console.log('üß™ Test de normalisation des contraintes\n');
  
  // Contraintes de test bas√©es sur la r√©ponse actuelle
  const testConstraints = [
    {
      title: "Hauteur maximale des constructions",
      description: "La hauteur maximale des constructions dans la zone r√©sidentielle est limit√©e √† 12 m√®tres selon le r√®glement communal en vigueur",
      severity: "high",
      source: "R√®glement communal, article 15"
    },
    {
      title: "Indice de densit√© (IBUS)",
      description: "L'indice de densit√© pour la zone r√©sidentielle est fix√© √† 0.5.",
      severity: "high",
      source: "R√®glement communal, article 22"
    },
    {
      title: "Espaces verts",
      description: "Au moins 30% de la surface de la parcelle doit √™tre d√©di√©e √† des espaces verts non construits et perm√©ables pour favoriser l'infiltration des eaux",
      severity: "medium",
      source: "R√®glement communal, article 35"
    },
    {
      title: "Stationnement r√©sidentiel",
      description: "Un minimum de 1.5 places de stationnement par logement est requis.",
      severity: "medium",
      source: "R√®glement communal, article 25"
    },
    {
      title: "Restrictions sp√©ciales pour les toitures",
      description: "Les toitures doivent √™tre inclin√©es avec une pente comprise entre 30 et 45 degr√©s",
      severity: "medium",
      source: "R√®glement communal, article 40"
    }
  ];
  
  console.log('AVANT NORMALISATION:');
  console.log('===================\n');
  
  testConstraints.forEach((c, i) => {
    console.log(`${i+1}. ${c.title}`);
    console.log(`   ${c.description}`);
    console.log(`   Mots: ${c.description.split(' ').length}\n`);
  });
  
  // Normaliser
  const normalized = await normalizeConstraints(testConstraints);
  
  console.log('\nAPR√àS NORMALISATION:');
  console.log('===================\n');
  
  normalized.forEach((c, i) => {
    console.log(`${i+1}. ${c.title}`);
    console.log(`   ${c.description}`);
    console.log(`   Mots: ${c.description.split(' ').length}`);
    console.log(`   Cat√©gorie: ${c.category}`);
    console.log(`   S√©v√©rit√©: ${c.severity}\n`);
  });
  
  // Test sp√©cifique pour les labels connus
  console.log('\nüè∑Ô∏è  TEST DES LABELS SP√âCIFIQUES:');
  console.log('================================\n');
  
  const specificTests = [
    {
      title: "Zone de bruit DS III",
      description: "La parcelle se trouve dans une zone de bruit de degr√© de sensibilit√© III selon l'ordonnance sur la protection contre le bruit"
    },
    {
      title: "Pente du terrain",
      description: "Le terrain pr√©sente une pente de 35% n√©cessitant des travaux de terrassement importants"
    },
    {
      title: "Danger naturel",
      description: "Zone de danger moyen - avalanches, n√©cessitant une √©tude sp√©cifique"
    }
  ];
  
  for (const test of specificTests) {
    const normalized = await normalizeConstraint(test);
    console.log(`Original: "${test.title}"`);
    console.log(`Normalis√©: "${normalized.title}"`);
    console.log(`Description: "${normalized.description}"`);
    console.log(`Cat√©gorie d√©tect√©e: ${normalized.category}\n`);
  }
}

// Compiler d'abord TypeScript
const { exec } = require('child_process');
console.log('üì¶ Compilation TypeScript...');

exec('npx tsc src/i18n/constraintNormalizer.ts --outDir dist --esModuleInterop --skipLibCheck', (error) => {
  if (error) {
    console.error('Erreur compilation:', error);
    return;
  }
  
  // Ex√©cuter les tests
  testNormalization().catch(console.error);
});