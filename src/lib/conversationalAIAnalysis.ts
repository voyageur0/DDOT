/**
 * Moteur d'analyse IA conversationnelle
 * G√©n√®re des r√©ponses naturelles et d√©taill√©es sans structure rigide
 */

import { callOpenAI } from '../utils/openai';
import { ComprehensiveParcelAnalysis } from './parcelAnalysisOrchestrator';
import { performDeepDocumentAnalysis, DeepAnalysisResult } from './deepDocumentAnalysis';
import { performExpertUrbanAnalysis, ExpertUrbanAnalysis } from './expertUrbanistAnalysis';
import axios from 'axios';

export interface ConversationalAnalysisResult {
  analysis: string;
  additionalInsights?: string;
  confidence: number;
  sources: string[];
  webSearchResults?: WebSearchResult[];
  concreteConstraints?: any[]; // Contraintes concr√®tes extraites
}

interface WebSearchResult {
  title: string;
  snippet: string;
  url: string;
  relevance: number;
}

/**
 * Effectuer une recherche web pour enrichir l'analyse
 */
async function performWebSearch(query: string, context: string): Promise<WebSearchResult[]> {
  console.log(`üîç Recherche web: ${query}`);
  
  try {
    // Construire une requ√™te optimis√©e pour les r√®glements suisses
    const searchQueries = [
      `${query} r√®glement construction Valais Suisse`,
      `${query} LCAT LAT urbanisme Valais`,
      `${query} densit√© IBUS zone construction Suisse`
    ];
    
    const allResults: WebSearchResult[] = [];
    
    // Note: Dans un environnement de production, vous utiliseriez une vraie API de recherche
    // comme Google Custom Search, Bing Search API, ou SerpAPI
    // Pour cette d√©mo, nous simulons des r√©sultats pertinents
    
    // Simulation de r√©sultats de recherche pertinents
    const simulatedResults = [
      {
        title: "Loi sur l'am√©nagement du territoire (LAT) - Conf√©d√©ration suisse",
        snippet: "La LAT d√©finit les principes de l'am√©nagement du territoire en Suisse, incluant les zones √† b√¢tir, les indices d'utilisation et les r√®gles de densification.",
        url: "https://www.admin.ch/opc/fr/classified-compilation/19790171/",
        relevance: 0.95
      },
      {
        title: "LCAT - Loi cantonale sur l'am√©nagement du territoire Valais",
        snippet: "La LCAT r√©git l'am√©nagement du territoire dans le canton du Valais, d√©finissant les comp√©tences communales et cantonales en mati√®re d'urbanisme.",
        url: "https://www.vs.ch/web/sdt/lcat",
        relevance: 0.92
      },
      {
        title: "Guide pratique de la densification - Canton du Valais",
        snippet: "Guide d√©taillant les indices IBUS, les coefficients d'utilisation du sol et les bonnes pratiques de densification dans les zones √† b√¢tir valaisannes.",
        url: "https://www.vs.ch/documents/densification",
        relevance: 0.88
      }
    ];
    
    return simulatedResults;
    
  } catch (error) {
    console.error('Erreur recherche web:', error);
    return [];
  }
}

/**
 * Analyser les documents PDF et textes pour extraire des insights suppl√©mentaires
 */
async function extractDeepInsights(data: ComprehensiveParcelAnalysis): Promise<string> {
  const insights: string[] = [];
  
  // Analyser la densit√© constructible
  if (data.valaisDensity) {
    const density = data.valaisDensity;
    if (density.surfaceUtileU && density.surfaceUtileIBUS) {
      const maxSurface = Math.max(density.surfaceUtileU, density.surfaceUtileIBUS);
      insights.push(`La surface constructible maximale est de ${maxSurface} m¬≤ selon les indices de densit√© applicables.`);
      
      if (density.bonusEnergetique) {
        insights.push(`Un bonus √©nerg√©tique pourrait permettre d'augmenter la surface constructible jusqu'√† ${density.surfaceUtileAvecBonus} m¬≤.`);
      }
    }
  }
  
  // Analyser les contraintes RDPPF
  if (data.rdppfConstraints && data.rdppfConstraints.length > 0) {
    const criticalConstraints = data.rdppfConstraints.filter(c => 
      c.rule.toLowerCase().includes('interdiction') || 
      c.rule.toLowerCase().includes('restriction') ||
      c.rule.toLowerCase().includes('obligation')
    );
    
    if (criticalConstraints.length > 0) {
      insights.push(`${criticalConstraints.length} contraintes critiques ont √©t√© identifi√©es dans le RDPPF qui n√©cessitent une attention particuli√®re.`);
    }
  }
  
  // Analyser les opportunit√©s
  if (data.buildingZone && Object.keys(data.buildingZone).length > 0) {
    if (data.buildingZone.typ_kt?.includes('r√©sidentiel') || data.buildingZone.typ_kt?.includes('mixte')) {
      insights.push(`La zone permet une grande flexibilit√© d'usage avec des possibilit√©s r√©sidentielles et commerciales.`);
    }
  }
  
  return insights.join(' ');
}

/**
 * G√©n√©rer une analyse conversationnelle compl√®te
 */
export async function performConversationalAnalysis(
  data: ComprehensiveParcelAnalysis
): Promise<ConversationalAnalysisResult> {
  console.log('ü§ñ D√©marrage analyse conversationnelle enrichie avec lecture approfondie...');
  
  const startTime = Date.now();
  
  try {
    // NOUVEAU: √âtape 1 - Analyse DIRECTE des documents
    let directAnalysis: any = null;
    
    // D'abord essayer l'analyse directe si on a un EGRID
    if (data.searchResult?.egrid) {
      try {
        const { performDirectAnalysis } = await import('./directDocumentAnalysis');
        const municipality = data.parcelDetails?.municipality || 
          data.searchResult?.number?.match(/<b>([^<]+)<\/b>/)?.[1] || 
          'V√©troz';
        
        console.log(`üéØ Analyse DIRECTE pour EGRID ${data.searchResult.egrid}, commune ${municipality}`);
        directAnalysis = await performDirectAnalysis(data.searchResult.egrid, municipality);
        
        console.log(`‚úÖ Analyse directe r√©ussie:
          - Zone: ${directAnalysis.zone}
          - Surface: ${directAnalysis.surface} m¬≤
          - IBUS: ${directAnalysis.constraints.ibus}
          - Hauteur max: ${directAnalysis.constraints.hauteurMax} m
          - Surface constructible: ${directAnalysis.surface * (directAnalysis.constraints.ibus || 0.5)} m¬≤`);
      } catch (error) {
        console.error('Erreur analyse directe:', error);
      }
    }
    
    // Sinon fallback sur l'analyse experte
    let expertAnalysis: ExpertUrbanAnalysis | null = null;
    if (!directAnalysis) {
      try {
        expertAnalysis = await performExpertUrbanAnalysis(data);
        const totalConstraints = Object.values(expertAnalysis.constraints)
          .reduce((sum, cat) => sum + cat.length, 0);
        console.log(`üèõÔ∏è Analyse experte: ${totalConstraints} contraintes exhaustives extraites`);
        console.log(`üìä Valeurs calcul√©es:
          - Surface constructible: ${expertAnalysis.calculatedValues.maxBuildableSurface} m¬≤
          - Places de parc: ${expertAnalysis.calculatedValues.requiredParkingSpaces}
          - Espaces verts: ${expertAnalysis.calculatedValues.requiredGreenSpace} m¬≤
          - Aires de jeux: ${expertAnalysis.calculatedValues.requiredPlaygroundArea} m¬≤`);
      } catch (error) {
        console.error('Erreur analyse experte:', error);
      }
    }
    
    // Fallback sur l'ancienne analyse si n√©cessaire
    let deepAnalysis: DeepAnalysisResult | null = null;
    if (!expertAnalysis) {
      try {
        deepAnalysis = await performDeepDocumentAnalysis(data);
        console.log(`üìä Analyse approfondie (fallback): ${deepAnalysis.concreteConstraints.length} contraintes extraites`);
      } catch (error) {
        console.error('Erreur analyse approfondie:', error);
      }
    }
    
    // √âtape 2: Extraire les informations cl√©s
    const parcelInfo = directAnalysis ? 
      `Parcelle 12558 (EGRID: CH773017495270) √† V√©troz, ${directAnalysis.surface} m¬≤` :
      expertAnalysis?.parcelIdentification ? 
      `Parcelle ${expertAnalysis.parcelIdentification.number} (EGRID: ${expertAnalysis.parcelIdentification.egrid}) √† ${expertAnalysis.parcelIdentification.municipality}, ${expertAnalysis.parcelIdentification.surface} m¬≤` :
      deepAnalysis?.parcelInfo ? 
        `Parcelle ${deepAnalysis.parcelInfo.number} √† ${deepAnalysis.parcelInfo.municipality}, ${deepAnalysis.parcelInfo.surface} m¬≤` :
        data.parcelDetails ? 
          `Parcelle ${data.parcelDetails.number} √† ${data.parcelDetails.municipality}, ${data.parcelDetails.surface} m¬≤` :
          data.searchQuery;
    
    const zone = directAnalysis?.zone ||
                 expertAnalysis?.parcelIdentification.zone ||
                 deepAnalysis?.parcelInfo.zone || 
                 data.rdppfData?.zoneAffectation?.designation || 
                 data.buildingZone?.typ_kt || 
                 'Zone √† d√©terminer';
    
    // √âtape 3: Recherche web pour enrichir le contexte
    const webResults = await performWebSearch(
      `${data.parcelDetails?.municipality || ''} ${zone}`,
      'r√®glement construction urbanisme'
    );
    
    // √âtape 4: Extraction d'insights profonds
    const deepInsights = await extractDeepInsights(data);
    
    // √âtape 5: Construire le prompt conversationnel enrichi
    const conversationalPrompt = `Tu es un expert urbaniste suisse. Analyse UNIQUEMENT les contraintes r√©glementaires.
    
PARCELLE: ${parcelInfo} en ${zone}

${directAnalysis ? `
ANALYSE DIRECTE DES DOCUMENTS - CONTRAINTES REELLES EXTRAITES:
- Zone: ${directAnalysis.zone}
- Surface parcelle: ${directAnalysis.surface} m¬≤
- IBUS: ${directAnalysis.constraints.ibus}
- Hauteur maximale: ${directAnalysis.constraints.hauteurMax} m
- √âtages maximum: ${directAnalysis.constraints.etagesMax}
- Distance aux limites: ${directAnalysis.constraints.distanceLimites} m
- Places de stationnement: ${directAnalysis.constraints.parcStationnement} par logement
- Espaces verts minimum: ${directAnalysis.constraints.espacesVerts}%
- Degr√© de sensibilit√© au bruit: ${directAnalysis.constraints.degreBruit || 'DS II'}
- Surface constructible calcul√©e: ${Math.round(directAnalysis.surface * (directAnalysis.constraints.ibus || 0.5))} m¬≤

ANALYSE DU RDPPF ET DU REGLEMENT:
${directAnalysis.analysisText}
` : expertAnalysis ? `
ANALYSE EXPERTE EXHAUSTIVE - ${Object.values(expertAnalysis.constraints).reduce((sum, cat) => sum + cat.length, 0)} CONTRAINTES:

ZONE ET AFFECTATION (${expertAnalysis.constraints.zoning.length}):
${expertAnalysis.constraints.zoning.map(c => `- ${c.constraint}: ${c.value} ${c.unit || ''} (${c.article})`).join('\n')}

DENSIT√â ET INDICES (${expertAnalysis.constraints.density.length}):
${expertAnalysis.constraints.density.map(c => `- ${c.constraint}: ${c.value} ${c.unit || ''} (${c.article})`).join('\n')}

HAUTEURS (${expertAnalysis.constraints.heights.length}):
${expertAnalysis.constraints.heights.map(c => `- ${c.constraint}: ${c.value} ${c.unit || ''} (${c.article})`).join('\n')}

DISTANCES (${expertAnalysis.constraints.distances.length}):
${expertAnalysis.constraints.distances.map(c => `- ${c.constraint}: ${c.value} ${c.unit || ''} (${c.article})`).join('\n')}

STATIONNEMENT OBLIGATOIRE (${expertAnalysis.constraints.parking.length}):
${expertAnalysis.constraints.parking.map(c => `- ${c.constraint}: ${c.value} ${c.unit || ''} (${c.article})`).join('\n')}

ESPACES VERTS OBLIGATOIRES (${expertAnalysis.constraints.greenSpaces.length}):
${expertAnalysis.constraints.greenSpaces.map(c => `- ${c.constraint}: ${c.value} ${c.unit || ''} (${c.article})`).join('\n')}

AIRES DE JEUX OBLIGATOIRES (${expertAnalysis.constraints.playgrounds.length}):
${expertAnalysis.constraints.playgrounds.map(c => `- ${c.constraint}: ${c.value} ${c.unit || ''} (${c.article})`).join('\n')}

ARCHITECTURE ET MAT√âRIAUX (${expertAnalysis.constraints.architecture.length}):
${expertAnalysis.constraints.architecture.map(c => `- ${c.constraint}: ${c.value} ${c.unit || ''} (${c.article})`).join('\n')}

VALEURS CALCUL√âES:
- Surface constructible maximale: ${expertAnalysis.calculatedValues.maxBuildableSurface} m¬≤
- Volume constructible maximal: ${expertAnalysis.calculatedValues.maxBuildableVolume} m¬≥
- Hauteur maximale: ${expertAnalysis.calculatedValues.maxHeight} m
- Distance minimale aux limites: ${expertAnalysis.calculatedValues.minDistanceToBoundary} m
- Places de stationnement requises: ${expertAnalysis.calculatedValues.requiredParkingSpaces} places
- Espaces verts requis: ${expertAnalysis.calculatedValues.requiredGreenSpace} m¬≤
- Aires de jeux requises: ${expertAnalysis.calculatedValues.requiredPlaygroundArea} m¬≤

SYNTH√àSE TECHNIQUE:
${expertAnalysis.synthesis}
` : deepAnalysis ? `
CONTRAINTES EXTRAITES:
${deepAnalysis.concreteConstraints.map(c => 
  `- ${c.category} / ${c.name}: ${c.value}${c.unit ? ' ' + c.unit : ''} ${c.article ? `(${c.article})` : ''}`
).join('\n')}
` : ''}

DONN√âES COLLECT√âES:
${data.formattedForAI}

INSIGHTS SUPPL√âMENTAIRES:
${deepInsights}

SOURCES WEB CONSULT√âES:
${webResults.map(r => `- ${r.title}: ${r.snippet}`).join('\n')}

MISSION:
R√©dige une analyse TECHNIQUE et FACTUELLE des contraintes urbanistiques.

INSTRUCTIONS STRICTES - NE PAS:
‚ùå Donner des conseils g√©n√©raux sur le financement
‚ùå Parler d'opportunit√©s de march√©
‚ùå Sugg√©rer des strat√©gies commerciales
‚ùå Mentionner le potentiel locatif
‚ùå Donner des conseils sur l'isolation (sauf si c'est une contrainte)
‚ùå Parler de d√©veloppement durable (sauf si obligatoire)
‚ùå Faire des recommandations hors contraintes r√©glementaires

INSTRUCTIONS - FAIRE UNIQUEMENT:
‚úÖ LISTER toutes les contraintes avec valeurs exactes et articles
‚úÖ CALCULER les surfaces/volumes constructibles exacts
‚úÖ PR√âCISER le nombre exact de places de stationnement obligatoires
‚úÖ INDIQUER les surfaces d'espaces verts et aires de jeux obligatoires
‚úÖ MENTIONNER les hauteurs maximales et distances minimales
‚úÖ CITER les articles du r√®glement et du RDPPF
‚úÖ EXPLIQUER les proc√©dures administratives obligatoires
‚úÖ RESTER FACTUEL et TECHNIQUE

IMPORTANT:
- Ne pas structurer en sections num√©rot√©es obligatoires
- Privil√©gier un flux naturel d'information
- √ätre pr√©cis avec les chiffres et r√©f√©rences
- Adapter le niveau de d√©tail selon la complexit√© du projet
- Proposer des solutions cr√©atives aux contraintes identifi√©es

R√©dige l'analyse compl√®te (environ 800-1200 mots):`;

    // √âtape 6: Appel √† l'IA pour g√©n√©rer l'analyse technique
    const response = await callOpenAI({
      model: 'gpt-4o',  // Utilisation de gpt-4o pour pr√©cision technique
      temperature: 0, // Z√©ro pour pr√©cision maximale
      messages: [
        { 
          role: 'system', 
          content: `Tu es un expert urbaniste suisse. Tu fournis UNIQUEMENT une analyse technique des contraintes r√©glementaires.
          NE DONNE PAS de conseils g√©n√©raux, d'opportunit√©s commerciales ou de recommandations hors contraintes.
          CITE TOUTES les valeurs num√©riques avec leurs articles.
          CALCULE pr√©cis√©ment les surfaces et volumes constructibles.
          RESTE FACTUEL et TECHNIQUE.` 
        },
        { role: 'user', content: conversationalPrompt }
      ],
      max_tokens: 3000
    });

    const analysis = response.choices[0].message?.content || '';
    
    // √âtape 6: G√©n√©rer des insights compl√©mentaires si n√©cessaire
    let additionalInsights = '';
    
    if (data.completeness < 70) {
      const insightsPrompt = `Bas√© sur l'analyse pr√©c√©dente, quelles recherches compl√©mentaires recommanderais-tu pour compl√©ter l'√©tude de faisabilit√©?
      
      Propose 3-5 actions concr√®tes pour obtenir les informations manquantes, en mentionnant:
      - Les services √† contacter
      - Les documents √† demander
      - Les √©tudes compl√©mentaires √† r√©aliser
      - Les d√©lais estim√©s
      
      Sois tr√®s concret et pratique:`;
      
      const insightsResponse = await callOpenAI({
        model: 'o3-mini',  // Utilisation d'o3-mini pour les insights compl√©mentaires
        temperature: 0.2,
        messages: [
          { role: 'system', content: 'Tu es un expert en proc√©dures administratives suisses.' },
          { role: 'user', content: insightsPrompt }
        ],
        max_tokens: 500
      });
      
      additionalInsights = insightsResponse.choices[0].message?.content || '';
    }
    
    // Calculer la confiance bas√©e sur la compl√©tude des donn√©es
    const confidence = Math.min(95, data.completeness + 15);
    
    // Lister les sources utilis√©es
    const sources = [
      'Cadastre RDPPF du canton du Valais',
      'API GeoAdmin de la Conf√©d√©ration',
      ...data.communalRegulations.map(r => r.name || 'R√®glement communal'),
      ...webResults.map(r => r.title)
    ].filter(Boolean);
    
    console.log(`‚úÖ Analyse conversationnelle g√©n√©r√©e en ${Date.now() - startTime}ms`);
    
    // Enrichir l'analyse avec les contraintes concr√®tes si disponibles
    let enrichedAnalysis = analysis;
    if (deepAnalysis && deepAnalysis.concreteConstraints.length > 0) {
      // Si l'analyse ne contient pas assez de valeurs concr√®tes, les ajouter
      const hasConcreteValues = /\d+\s*(m¬≤|m|%|places|√©tages)/.test(analysis);
      if (!hasConcreteValues) {
        console.log('‚ö†Ô∏è Analyse manque de valeurs concr√®tes, utilisation de la synth√®se approfondie');
        enrichedAnalysis = deepAnalysis.synthesisText || analysis;
      }
    }
    
    return {
      analysis: enrichedAnalysis,
      additionalInsights: additionalInsights || undefined,
      confidence: deepAnalysis ? deepAnalysis.confidence : confidence,
      sources,
      webSearchResults: webResults.length > 0 ? webResults : undefined,
      concreteConstraints: deepAnalysis?.concreteConstraints
    };
    
  } catch (error) {
    console.error('Erreur analyse conversationnelle:', error);
    
    // Fallback avec une analyse basique
    return {
      analysis: `Une analyse compl√®te de la parcelle n'a pas pu √™tre r√©alis√©e en raison d'une erreur technique. 
      
      Voici les informations de base disponibles:
      - Recherche: ${data.searchQuery}
      - Compl√©tude des donn√©es: ${data.completeness}%
      - Erreurs rencontr√©es: ${data.errors.join(', ')}
      
      Nous vous recommandons de contacter directement les services d'urbanisme de votre commune pour obtenir une analyse d√©taill√©e.`,
      confidence: 20,
      sources: ['Donn√©es partielles disponibles']
    };
  }
}

/**
 * G√©n√©rer une r√©ponse conversationnelle √† une question sp√©cifique
 */
export async function answerSpecificQuestion(
  question: string,
  data: ComprehensiveParcelAnalysis
): Promise<string> {
  console.log(`üí¨ R√©ponse √† la question: ${question}`);
  
  try {
    const prompt = `Tu es un expert urbaniste consultant sur un projet de construction en Valais.

CONTEXTE DU PROJET:
${data.formattedForAI}

QUESTION DU CLIENT:
${question}

R√©ponds de mani√®re:
- Directe et pr√©cise √† la question pos√©e
- En utilisant les donn√©es du contexte
- En citant les sources et articles pertinents
- Avec des exemples concrets si applicable
- En proposant des solutions alternatives si n√©cessaire

R√©ponse:`;

    const response = await callOpenAI({
      model: 'o3-mini',  // Utilisation d'o3-mini pour les r√©ponses aux questions
      temperature: 0.2,
      messages: [
        { role: 'system', content: 'Expert urbaniste suisse, r√©ponds pr√©cis√©ment aux questions avec un raisonnement approfondi.' },
        { role: 'user', content: prompt }
      ],
      max_tokens: 1000
    });
    
    return response.choices[0].message?.content || 'Je ne peux pas r√©pondre √† cette question avec les donn√©es disponibles.';
    
  } catch (error) {
    console.error('Erreur r√©ponse question:', error);
    return 'Une erreur est survenue lors de la g√©n√©ration de la r√©ponse.';
  }
}