import { callOpenAI } from '../utils/openai';

export interface RdppfData {
  zoneAffectation: {
    designation: string;
    indice?: number;
    surface: number;
    pourcentage: number;
  };
  degreSensibiliteBruit?: {
    degre: string;
    surface: number;
    pourcentage: number;
  };
  autresRestrictions: Array<{
    type: string;
    description: string;
    reference?: string;
  }>;
}

const RDPPF_EXTRACTION_PROMPT = `Tu es un expert en urbanisme suisse sp√©cialis√© dans l'analyse des documents RDPPF.

√Ä partir du texte RDPPF fourni, extrais TR√àS PR√âCIS√âMENT les informations suivantes:

1. ZONE D'AFFECTATION PRINCIPALE
   - Nom exact de la zone (ex: "Zone r√©sidentielle 0.5 (3)", "Zone √† b√¢tir d'habitation de tr√®s faible densit√©", etc.)
   - Indice d'utilisation si mentionn√© (ex: 0.5, 0.3, etc.)
   - Surface en m¬≤
   - Pourcentage de la parcelle

2. DEGR√â DE SENSIBILIT√â AU BRUIT
   - Degr√© (I, II, III, IV)
   - Surface en m¬≤
   - Pourcentage

3. AUTRES RESTRICTIONS IMPORTANTES
   - Zones de dangers naturels (si pr√©sentes)
   - P√©rim√®tres de protection
   - Servitudes particuli√®res
   - R√©f√©rences aux dispositions juridiques

IMPORTANT:
- Extrais EXACTEMENT les d√©nominations telles qu'elles apparaissent dans le document
- Les surfaces et pourcentages doivent √™tre des nombres
- Ne pas inventer d'informations non pr√©sentes dans le document

R√©ponds UNIQUEMENT avec un JSON valide au format suivant:
{
  "zoneAffectation": {
    "designation": "Zone r√©sidentielle 0.5 (3)",
    "indice": 0.5,
    "surface": 2257,
    "pourcentage": 100.0
  },
  "degreSensibiliteBruit": {
    "degre": "II",
    "surface": 2257,
    "pourcentage": 100.0
  },
  "autresRestrictions": [
    {
      "type": "Disposition juridique",
      "description": "Modification partielle du r√®glement communal MRCCZ 0",
      "reference": "10.08.2016"
    }
  ]
}`;

/**
 * Extrait les donn√©es structur√©es du RDPPF avec une approche plus pr√©cise
 */
export async function extractRdppfData(rawText: string): Promise<RdppfData | null> {
  if (!rawText || rawText.length < 50) {
    console.log('‚ùå Texte RDPPF trop court ou vide');
    return null;
  }

  console.log(`üîç Extraction avanc√©e RDPPF: ${rawText.length} caract√®res`);

  try {
    // Extraire les sections pertinentes du texte
    const relevantText = extractRelevantSections(rawText);
    
    const response = await callOpenAI({
      model: 'gpt-4o',
      temperature: 0,
      messages: [
        { role: 'system', content: RDPPF_EXTRACTION_PROMPT },
        { role: 'user', content: relevantText }
      ],
      max_tokens: 1500
    });

    const content = response.choices[0].message?.content;
    if (!content) {
      console.error('‚ùå Pas de r√©ponse OpenAI');
      return null;
    }

    const data = JSON.parse(content) as RdppfData;
    console.log('‚úÖ Donn√©es RDPPF extraites:', data);
    return data;

  } catch (error) {
    console.error('‚ùå Erreur extraction RDPPF avanc√©e:', error);
    return null;
  }
}

/**
 * Extrait les sections pertinentes du texte RDPPF
 */
function extractRelevantSections(fullText: string): string {
  const lines = fullText.split('\n');
  const relevantLines: string[] = [];
  let inRelevantSection = false;
  
  for (const line of lines) {
    // D√©tecter les sections importantes
    if (line.includes('Plans d\'affectation') || 
        line.includes('Zone r√©sidentielle') ||
        line.includes('Zone √† b√¢tir') ||
        line.includes('Degr√© de sensibilit√©') ||
        line.includes('Surface') ||
        line.includes('%') ||
        line.includes('Dispositions juridiques') ||
        line.includes('L√©gende des objets touch√©s')) {
      inRelevantSection = true;
    }
    
    // Collecter les lignes pertinentes
    if (inRelevantSection && line.trim().length > 0) {
      relevantLines.push(line);
    }
    
    // Arr√™ter apr√®s les dispositions juridiques
    if (line.includes('Page') && relevantLines.length > 20) {
      break;
    }
  }
  
  return relevantLines.join('\n');
}

/**
 * Recherche des contraintes sp√©cifiques dans le r√®glement communal bas√©es sur la zone
 */
export async function findZoneConstraints(
  zoneDesignation: string, 
  reglementText: string
): Promise<Array<{title: string, description: string, source: string}>> {
  
  const CONSTRAINT_SEARCH_PROMPT = `Tu es un expert en urbanisme suisse. 
  
√Ä partir du r√®glement communal fourni, trouve TOUTES les contraintes qui s'appliquent sp√©cifiquement √† la zone: "${zoneDesignation}"

Recherche notamment:
1. L'indice d'utilisation du sol (IBUS) pour cette zone
2. La hauteur maximale autoris√©e
3. Les distances aux limites
4. Le nombre d'√©tages maximum
5. Les prescriptions architecturales sp√©cifiques
6. Les exigences de stationnement
7. Les espaces verts requis
8. Toute autre contrainte mentionn√©e pour cette zone

IMPORTANT:
- Cite les articles exacts du r√®glement
- Donne les valeurs num√©riques pr√©cises (IBUS, hauteurs, distances, etc.)
- Ne pas inventer de contraintes non mentionn√©es

R√©ponds avec un JSON au format:
{
  "constraints": [
    {
      "title": "Indice d'utilisation du sol (IBUS)",
      "description": "IBUS maximum de 0.5 selon art. 23 RCC",
      "source": "Art. 23 RCC"
    }
  ]
}`;

  try {
    const response = await callOpenAI({
      model: 'gpt-4o',
      temperature: 0,
      messages: [
        { role: 'system', content: CONSTRAINT_SEARCH_PROMPT },
        { role: 'user', content: `Zone recherch√©e: ${zoneDesignation}\n\nR√®glement:\n${reglementText.substring(0, 50000)}` }
      ],
      max_tokens: 2000
    });

    const content = response.choices[0].message?.content;
    if (!content) return [];

    const result = JSON.parse(content);
    return result.constraints || [];

  } catch (error) {
    console.error('‚ùå Erreur recherche contraintes zone:', error);
    return [];
  }
}

/**
 * G√©n√®re des contraintes bas√©es sur le degr√© de sensibilit√© au bruit
 */
export function generateNoiseConstraints(degre: string): Array<{title: string, description: string, severity: string}> {
  const constraints = [];
  
  switch (degre) {
    case 'I':
      constraints.push({
        title: 'Zone de d√©tente - Degr√© de sensibilit√© I',
        description: 'Zone n√©cessitant une protection accrue contre le bruit. Aucune activit√© bruyante autoris√©e. Valeurs limites tr√®s strictes.',
        severity: 'high'
      });
      break;
    case 'II':
      constraints.push({
        title: 'Zone d\'habitation - Degr√© de sensibilit√© II',
        description: 'Zone o√π aucune entreprise g√™nante n\'est autoris√©e. Protection standard contre le bruit pour l\'habitat.',
        severity: 'medium'
      });
      break;
    case 'III':
      constraints.push({
        title: 'Zone mixte - Degr√© de sensibilit√© III',
        description: 'Zone o√π des entreprises moyennement g√™nantes sont admises. Niveau de bruit mod√©r√© tol√©r√©.',
        severity: 'low'
      });
      break;
    case 'IV':
      constraints.push({
        title: 'Zone industrielle - Degr√© de sensibilit√© IV',
        description: 'Zone o√π des entreprises fortement g√™nantes sont admises. Niveau de bruit √©lev√© tol√©r√©.',
        severity: 'low'
      });
      break;
  }
  
  return constraints;
}