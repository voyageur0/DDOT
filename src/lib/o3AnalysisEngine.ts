/**
 * Moteur d'analyse IA optimis√© pour OpenAI o3 avec double analyse (texte + PDF)
 * Con√ßu pour maximiser les capacit√©s de raisonnement d'o3
 */

import { callOpenAI } from '../utils/openai';
import { ComprehensiveParcelAnalysis } from './parcelAnalysisOrchestrator';
// import { filterAndPrioritizeConstraints, generateConstraintSummary } from './constraintFilter';
import * as fs from 'fs/promises';
import * as path from 'path';
const pdf = require('pdf-parse');

export interface O3Constraint {
  id: string;
  category: string;
  zone: string;
  title: string;
  description: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  source: string;
  article?: string;
  values?: {
    numeric?: number;
    unit?: string;
    text?: string;
    range?: { min: number; max: number; unit: string };
    formula?: string; // Pour les calculs complexes
  };
  requirements?: string[];
  impact: 'positive' | 'neutral' | 'restrictive' | 'blocking';
  confidence: number; // 0-100
  analysisLevel: 'text' | 'pdf' | 'combined' | 'enhanced';
  reasoning?: string; // Cha√Æne de raisonnement o3
  crossReferences?: string[]; // R√©f√©rences crois√©es vers d'autres articles
}

export interface O3AnalysisResult {
  constraints: O3Constraint[];
  summary: {
    executive: string;
    technical: string;
    practical: string;
  };
  zoneAnalysis: {
    mainZone: string;
    subZones: string[];
    compatibility: 'excellent' | 'good' | 'moderate' | 'difficult' | 'incompatible';
    potentialUsages: string[];
    prohibitedUsages: string[];
  };
  calculations: {
    maxBuildableArea?: number;
    maxHeight?: number;
    requiredGreenSpace?: number;
    parkingSpaces?: number;
    constructionDensity?: number;
  };
  recommendations: {
    priority: 'high' | 'medium' | 'low';
    action: string;
    reason: string;
    timeline?: string;
  }[];
  risks: {
    level: 'critical' | 'high' | 'medium' | 'low';
    description: string;
    mitigation: string;
    probability: number; // 0-100
  }[];
  opportunities: {
    type: string;
    description: string;
    potential: 'high' | 'medium' | 'low';
    requirements?: string[];
  }[];
  nextSteps: {
    phase: string;
    tasks: string[];
    duration: string;
    dependencies?: string[];
  }[];
  confidence: number;
  processingMetrics: {
    textAnalysisTime: number;
    pdfAnalysisTime: number;
    reasoningDepth: number;
    totalConstraints: number;
    highConfidenceConstraints: number;
    crossReferencesFound: number;
  };
}

/**
 * Analyse avanc√©e avec o3 - Double niveau optimis√©
 */
export async function performO3Analysis(data: ComprehensiveParcelAnalysis): Promise<O3AnalysisResult> {
  console.log('üß† D√©marrage analyse o3 avanc√©e avec raisonnement profond...');
  
  const startTime = Date.now();
  
  // √âtape 1: Extraction et analyse de zone enrichie
  const zoneContext = await extractEnhancedZoneContext(data);
  console.log(`üéØ Contexte de zone enrichi: ${zoneContext.mainZone} avec ${zoneContext.relatedZones.length} zones li√©es`);
  
  // √âtape 2: Analyse sp√©cifique du PDF RDPPF
  console.log('üìã √âtape 1/4: Analyse du texte extrait du PDF RDPPF...');
  const rdppfAnalysis = await analyzeRDPPFPDF(data, zoneContext);
  
  // √âtape 3: Analyse sp√©cifique du PDF du r√®glement communal
  console.log('üìò √âtape 2/4: Analyse du texte extrait du PDF du r√®glement communal...');
  const reglementAnalysis = await analyzeReglementPDF(data, zoneContext);
  
  // √âtape 4: Analyse combin√©e des deux PDFs
  console.log('üîÑ √âtape 3/4: Analyse combin√©e des deux PDFs dans leur ensemble...');
  const combinedPDFAnalysis = await analyzeCombinedPDFs(rdppfAnalysis, reglementAnalysis, data, zoneContext);
  
  // √âtape 5: Synth√®se intelligente avec o3
  console.log('üìù √âtape 4/4: Synth√®se intelligente avec le mod√®le o3...');
  const textAnalysis = await performO3TextAnalysis(data, zoneContext);
  const textTime = Date.now() - startTime;
  
  // Fusionner toutes les analyses
  const allConstraints = [
    ...rdppfAnalysis,
    ...reglementAnalysis,
    ...combinedPDFAnalysis,
    ...textAnalysis
  ];
  const pdfTime = Date.now() - startTime - textTime;
  
  // √âtape 6: Fusion et enrichissement avec raisonnement crois√©
  console.log('üîÑ Fusion et enrichissement des analyses...');
  const enrichedConstraints = await mergeAndEnrichAnalyses(textAnalysis, allConstraints, zoneContext);
  
  // √âtape 5: Calculs avanc√©s et mod√©lisation
  console.log('üìä Calculs et mod√©lisation...');
  const calculations = await performAdvancedCalculations(enrichedConstraints, data);
  
  // √âtape 6: Synth√®se strat√©gique avec o3
  console.log('üìã G√©n√©ration synth√®se strat√©gique o3...');
  const synthesis = await generateO3StrategicSynthesis(data, enrichedConstraints, calculations, zoneContext);
  
  // TODO: R√©activer le filtrage des contraintes
  // const filteredConstraints = filterAndPrioritizeConstraints(
  //   enrichedConstraints,
  //   data.rdppfData,
  //   false
  // );
  
  const result: O3AnalysisResult = {
    constraints: enrichedConstraints,
    summary: synthesis.summary,
    zoneAnalysis: {
      mainZone: zoneContext.mainZone,
      subZones: zoneContext.relatedZones,
      compatibility: calculateEnhancedCompatibility(enrichedConstraints),
      potentialUsages: zoneContext.potentialUsages,
      prohibitedUsages: zoneContext.prohibitedUsages
    },
    calculations,
    recommendations: synthesis.recommendations,
    risks: synthesis.risks,
    opportunities: synthesis.opportunities,
    nextSteps: synthesis.nextSteps,
    confidence: calculateO3Confidence(enrichedConstraints, synthesis),
    processingMetrics: {
      textAnalysisTime: textTime,
      pdfAnalysisTime: pdfTime,
      reasoningDepth: enrichedConstraints.filter(c => c.reasoning).length,
      totalConstraints: enrichedConstraints.length,
      highConfidenceConstraints: enrichedConstraints.filter(c => c.confidence >= 85).length,
      crossReferencesFound: enrichedConstraints.reduce((sum, c) => sum + (c.crossReferences?.length || 0), 0)
    }
  };
  
  console.log(`‚úÖ Analyse o3 termin√©e en ${Date.now() - startTime}ms avec ${result.constraints.length} contraintes`);
  return result;
}

/**
 * Extraction enrichie du contexte de zone
 */
async function extractEnhancedZoneContext(data: ComprehensiveParcelAnalysis): Promise<{
  mainZone: string;
  relatedZones: string[];
  potentialUsages: string[];
  prohibitedUsages: string[];
  zoneCharacteristics: Record<string, any>;
}> {
  // Extraction intelligente depuis toutes les sources
  const zones = new Set<string>();
  let mainZone = '';
  
  // Priorit√© 1: Donn√©es RDPPF structur√©es (plus fiables)
  if (data.rdppfData?.zoneAffectation) {
    mainZone = data.rdppfData.zoneAffectation.designation;
    zones.add(mainZone);
    console.log(`üéØ Zone principale extraite du RDPPF: ${mainZone}`);
  }
  // Priorit√© 2: buildingZone
  else if (data.buildingZone?.typ_kt) {
    mainZone = data.buildingZone.typ_kt;
    zones.add(mainZone);
  }
  
  // Analyser PLR
  if (data.plrData?.restrictions) {
    for (const restriction of data.plrData.restrictions) {
      const restrictionText = `${restriction.theme || ''} ${restriction.typeTxt || ''} ${restriction.description || ''}`.toLowerCase();
      
      if (restrictionText.includes('zone') || 
          restrictionText.includes('affectation') ||
          restrictionText.includes('nutzung') ||
          restriction.typeCode === 'NutzungsplanungUeberlagernd' ||
          restriction.typeCode === 'NutzungsplanungGrundnutzung') {
        
        if (restriction.typeTxt) {
          zones.add(restriction.typeTxt);
        }
        if (restriction.theme && restriction.theme.includes('Zone')) {
          zones.add(restriction.theme);
        }
      }
    }
  }
  
  // Analyser contraintes RDPPF
  if (data.rdppfConstraints) {
    for (const constraint of data.rdppfConstraints) {
      const constraintText = `${constraint.theme} ${constraint.rule}`.toLowerCase();
      
      // Chercher sp√©cifiquement la destination de zone dans le RDPPF
      if (constraint.theme === 'Destination de zone' || 
          (constraintText.includes('zone') && constraintText.includes('r√©sidentiel'))) {
        
        // Extraire la zone principale avec surface si disponible
        // Ex: "Zone r√©sidentielle 0.5 (3), Surface: 862 m¬≤, 100.0%"
        if (constraint.rule) {
          // Extraire uniquement la partie zone (avant la virgule si pr√©sente)
          const zoneMatch = constraint.rule.match(/^([^,]+)/);  
          if (zoneMatch) {
            const extractedZone = zoneMatch[1].trim();
            if (!mainZone && extractedZone.toLowerCase().includes('zone')) {
              mainZone = extractedZone;
              zones.add(extractedZone);
              console.log(`üéØ Zone extraite des contraintes RDPPF: ${mainZone}`);
            }
          }
        }
      }
    }
  }
  
  // Analyser les donn√©es de parcelle
  if (data.parcelDetails?.zone) {
    zones.add(data.parcelDetails.zone);
  }
  
  // Analyser les r√®glements communaux pour les zones
  if (data.communalRegulations) {
    for (const reg of data.communalRegulations) {
      if (reg.title?.toLowerCase().includes('zone') || reg.content?.includes('Zone')) {
        // Extraire les zones mentionn√©es
        const zoneMatches = reg.content?.match(/Zone\s+[A-Z0-9]+/gi) || [];
        zoneMatches.forEach(z => zones.add(z));
      }
    }
  }
  
  // D√©terminer la zone principale si pas encore trouv√©e
  if (!mainZone && zones.size > 0) {
    mainZone = Array.from(zones)[0];
  }
  
  if (!mainZone) {
    mainZone = 'Zone √† d√©terminer';
  }
  
  // Analyser les usages potentiels avec o3
  const usageAnalysis = await analyzeZoneUsages(mainZone, data);
  
  return {
    mainZone,
    relatedZones: Array.from(zones).filter(z => z !== mainZone),
    potentialUsages: usageAnalysis.potential,
    prohibitedUsages: usageAnalysis.prohibited,
    zoneCharacteristics: usageAnalysis.characteristics
  };
}

/**
 * Analyse des usages de zone avec o3
 */
async function analyzeZoneUsages(zone: string, data: ComprehensiveParcelAnalysis): Promise<{
  potential: string[];
  prohibited: string[];
  characteristics: Record<string, any>;
}> {
  const prompt = `En tant qu'expert en urbanisme suisse, analyse la zone "${zone}" et d√©termine:

1. USAGES POTENTIELS: Liste tous les usages possibles dans cette zone
2. USAGES INTERDITS: Liste tous les usages explicitement interdits
3. CARACT√âRISTIQUES: Extrais les caract√©ristiques cl√©s de la zone

Base ton analyse sur:
${data.formattedForAI}

R√©ponds en JSON:
{
  "potential": ["usage1", "usage2", ...],
  "prohibited": ["interdit1", "interdit2", ...],
  "characteristics": {
    "type": "r√©sidentiel/mixte/industriel/etc",
    "density": "faible/moyenne/forte",
    "height_category": "bas/moyen/√©lev√©",
    "special_features": ["feature1", "feature2"]
  }
}`;

  try {
    const response = await callOpenAI({
      model: 'gpt-4o', // Utiliser gpt-4o en attendant o3
      temperature: 0,
      messages: [
        { role: 'system', content: 'Expert en zonage suisse. R√©ponds uniquement en JSON valide.' },
        { role: 'user', content: prompt }
      ],
      max_tokens: 1000
    });
    
    const content = response.choices[0].message?.content || '{}';
    // Nettoyer le contenu pour extraire le JSON
    const cleanedContent = content
      .replace(/^```json\s*\n?/, '') // Retirer ```json au d√©but
      .replace(/\n?```\s*$/, '') // Retirer ``` √† la fin
      .trim();
    
    return JSON.parse(cleanedContent);
  } catch (error) {
    console.error('Erreur analyse usages zone:', error);
    return {
      potential: ['Habitat individuel', 'Habitat collectif'],
      prohibited: ['Industrie lourde'],
      characteristics: { type: 'r√©sidentiel' }
    };
  }
}

/**
 * Analyse textuelle o3 avec raisonnement profond
 */
async function performO3TextAnalysis(
  data: ComprehensiveParcelAnalysis, 
  zoneContext: any
): Promise<O3Constraint[]> {
  
  const categories = [
    'zone_affectation',
    'gabarits_hauteurs',
    'reculs_distances', 
    'densit√©_ibus',
    'stationnement',
    'toiture_architecture',
    'espaces_verts',
    'prescriptions_architecturales',
    'proc√©dures_administratives'
  ];
  
  const constraints: O3Constraint[] = [];
  
  // Analyse par cat√©gorie avec prompts optimis√©s pour o3
  for (const category of categories) {
    const categoryConstraints = await analyzeO3Category(data, category, zoneContext);
    constraints.push(...categoryConstraints);
  }
  
  // Analyse des r√©f√©rences crois√©es
  await analyzeO3CrossReferences(constraints, data);
  
  return constraints;
}

/**
 * Analyse d'une cat√©gorie avec o3
 */
async function analyzeO3Category(
  data: ComprehensiveParcelAnalysis,
  category: string,
  zoneContext: any
): Promise<O3Constraint[]> {
  
  const categoryConfig = getCategoryConfig(category);
  
  const prompt = `Tu es un expert l√©gal en urbanisme suisse avec 30 ans d'exp√©rience.

MISSION: Analyse exhaustive de "${categoryConfig.title}" pour la zone "${zoneContext.mainZone}"

CONTEXTE DE ZONE:
- Zone principale: ${zoneContext.mainZone}
- Zones li√©es: ${zoneContext.relatedZones.join(', ')}
- Usages potentiels: ${zoneContext.potentialUsages.join(', ')}

DONN√âES COMPL√àTES:
${data.formattedForAI}

INSTRUCTIONS POUR ANALYSE o3:
1. Identifier TOUTES les contraintes sp√©cifiques √† la zone "${zoneContext.mainZone}"
2. Identifier TOUTES les contraintes qui s'appliquent √† TOUTES les zones de la commune
3. VALEURS EXACTES: Extrais TOUTES les valeurs num√©riques avec unit√©s pr√©cises
4. NE PAS inclure les zones de dangers (avalanches, inondations, etc.) SAUF si elles sont explicitement mentionn√©es dans le RDPPF
5. EXCEPTIONS: Note toutes les exceptions et cas particuliers
6. IMPLICATIONS: Analyse les implications pratiques de chaque contrainte

FOCUS SP√âCIFIQUE: ${categoryConfig.focus}

FORMAT JSON D√âTAILL√â:
[
  {
    "title": "Titre exact de la contrainte",
    "description": "Description compl√®te avec toutes les nuances",
    "severity": "low|medium|high|critical",
    "source": "Source exacte avec r√©f√©rence compl√®te",
    "article": "Article(s) pr√©cis",
    "zone": "${zoneContext.mainZone}",
    "values": {
      "numeric": valeur_exacte,
      "unit": "unit√©_pr√©cise",
      "range": {"min": X, "max": Y, "unit": "unit√©"},
      "formula": "formule_si_applicable"
    },
    "requirements": ["req1_d√©taill√©e", "req2_avec_conditions"],
    "impact": "positive|neutral|restrictive|blocking",
    "confidence": 0-100,
    "reasoning": "Cha√Æne de raisonnement compl√®te expliquant l'interpr√©tation",
    "crossReferences": ["Art. X", "Art. Y"],
    "exceptions": ["exception1", "exception2"]
  }
]`;

  try {
    const response = await callOpenAI({
      model: 'gpt-4o', // Utiliser gpt-4o en attendant o3
      temperature: 0,
      messages: [
        { 
          role: 'system', 
          content: 'Expert l√©gal en urbanisme. Fournis une analyse exhaustive avec raisonnement complet. JSON uniquement.' 
        },
        { role: 'user', content: prompt }
      ],
      max_tokens: 3000
    });
    
    const content = response.choices[0].message?.content || '';
    const jsonMatch = content.match(/\[[\s\S]*\]/);
    
    if (!jsonMatch) return [];
    
    const constraintsData = JSON.parse(jsonMatch[0]);
    
    return constraintsData.map((c: any, idx: number) => ({
      id: `o3_text_${category}_${idx}`,
      category,
      zone: zoneContext.mainZone,
      title: c.title,
      description: c.description,
      severity: c.severity || 'medium',
      source: c.source,
      article: c.article,
      values: c.values,
      requirements: c.requirements || [],
      impact: c.impact || 'neutral',
      confidence: c.confidence || 85,
      analysisLevel: 'text' as const,
      reasoning: c.reasoning,
      crossReferences: c.crossReferences || []
    }));
    
  } catch (error) {
    console.error(`Erreur analyse o3 ${category}:`, error);
    return [];
  }
}

/**
 * Configuration des cat√©gories
 */
function getCategoryConfig(category: string): { title: string; focus: string } {
  const configs: Record<string, { title: string; focus: string }> = {
    zone_affectation: {
      title: "Zone d'affectation et destination",
      focus: "type exact de zone, affectations autoris√©es/interdites, mixit√© fonctionnelle, restrictions sp√©cifiques"
    },
    gabarits_hauteurs: {
      title: "Gabarits et hauteurs",
      focus: "hauteur maximale au fa√Æte, √† la corniche, nombre d'√©tages, hauteur par √©tage, exceptions"
    },
    reculs_distances: {
      title: "Reculs et distances",
      focus: "distances aux limites (grandes/petites), entre b√¢timents, reculs sur rue, cas particuliers"
    },
    densit√©_ibus: {
      title: "Densit√© et indices",
      focus: "IBUS, IUS, COS, CUS, surface de plancher d√©terminante, bonus densit√©, calculs"
    },
    stationnement: {
      title: "Stationnement et mobilit√©",
      focus: "nombre places par logement/m¬≤, visiteurs, v√©los, handicap√©s, localisation, dimensions"
    },
    toiture_architecture: {
      title: "Toiture et architecture",
      focus: "type toiture, pente min/max, mat√©riaux, couleurs, superstructures, panneaux solaires"
    },
    espaces_verts: {
      title: "Espaces verts et am√©nagements",
      focus: "% espaces verts, plantations, perm√©abilit√©, espaces jeux, biodiversit√©"
    },
    contraintes_environnementales: {
      title: "Environnement et nuisances",
      focus: "protection paysage, bruit, pollution, eaux, nature, √©nergie"
    },
    prescriptions_architecturales: {
      title: "Prescriptions architecturales",
      focus: "style, mat√©riaux fa√ßade, couleurs, mod√©nature, int√©gration, patrimoine"
    },
    proc√©dures_administratives: {
      title: "Proc√©dures et autorisations",
      focus: "permis requis, proc√©dures sp√©ciales, consultations, d√©lais, taxes"
    }
  };
  
  return configs[category] || { title: category, focus: 'analyse g√©n√©rale' };
}

/**
 * Analyse des r√©f√©rences crois√©es avec o3
 */
async function analyzeO3CrossReferences(constraints: O3Constraint[], data: ComprehensiveParcelAnalysis): Promise<void> {
  const prompt = `Analyse les r√©f√©rences crois√©es entre ces contraintes d'urbanisme:

${constraints.map(c => `- ${c.title} (${c.article}): ${c.description}`).join('\n')}

Identifie:
1. Les contraintes qui se r√©f√®rent mutuellement
2. Les contradictions potentielles
3. Les cumuls d'effets
4. Les hi√©rarchies entre r√®gles

R√©ponds en JSON:
{
  "crossReferences": [
    {
      "from": "id_contrainte1",
      "to": "id_contrainte2",
      "type": "reference|contradiction|cumul|hierarchie",
      "description": "explication"
    }
  ]
}`;

  try {
    const response = await callOpenAI({
      model: 'gpt-4o',
      temperature: 0.1,
      messages: [
        { role: 'system', content: 'Expert en analyse juridique urbanistique.' },
        { role: 'user', content: prompt }
      ],
      max_tokens: 1500
    });
    
    const refContent = response.choices[0].message?.content || '{}';
    const cleanedRefContent = refContent
      .replace(/^```json\s*\n?/, '')
      .replace(/\n?```\s*$/, '')
      .trim();
    const refs = JSON.parse(cleanedRefContent);
    
    // Enrichir les contraintes avec les r√©f√©rences crois√©es
    for (const ref of refs.crossReferences || []) {
      const constraint = constraints.find(c => c.id === ref.from);
      if (constraint) {
        constraint.crossReferences = constraint.crossReferences || [];
        constraint.crossReferences.push(`${ref.type}: ${ref.to} - ${ref.description}`);
      }
    }
  } catch (error) {
    console.error('Erreur analyse r√©f√©rences crois√©es:', error);
  }
}

/**
 * Analyse PDF approfondie avec o3
 */
async function performO3PDFAnalysis(
  data: ComprehensiveParcelAnalysis,
  zoneContext: any,
  textAnalysis: O3Constraint[]
): Promise<O3Constraint[]> {
  
  const pdfPaths = await findRelevantPDFs(data);
  if (pdfPaths.length === 0) return [];
  
  const pdfConstraints: O3Constraint[] = [];
  
  for (const pdfPath of pdfPaths) {
    try {
      const pdfContent = await extractPDFContent(pdfPath);
      const constraints = await analyzePDFWithO3(pdfContent, zoneContext, textAnalysis);
      pdfConstraints.push(...constraints);
    } catch (error) {
      console.error(`Erreur analyse PDF ${pdfPath}:`, error);
    }
  }
  
  return pdfConstraints;
}

/**
 * Trouver les PDFs pertinents
 */
async function findRelevantPDFs(data: ComprehensiveParcelAnalysis): Promise<string[]> {
  const pdfPaths: string[] = [];
  
  // Chercher le r√®glement communal local
  const municipality = data.parcelDetails?.municipality || data.searchResult?.municipality || '';
  if (municipality) {
    const localPath = path.join(process.cwd(), 'reglements', `VS_${municipality}_R√®glement des constructions.pdf`);
    try {
      await fs.access(localPath);
      pdfPaths.push(localPath);
    } catch {
      // Pas de r√®glement local
    }
  }
  
  // Ajouter d'autres PDFs pertinents si disponibles
  if (data.communalRegulations) {
    for (const reg of data.communalRegulations) {
      if (reg.url && reg.url.endsWith('.pdf')) {
        pdfPaths.push(reg.url);
      }
    }
  }
  
  return pdfPaths.slice(0, 2); // Limiter pour performance
}

/**
 * Extraire le contenu d'un PDF
 */
async function extractPDFContent(pdfPath: string): Promise<string> {
  try {
    const dataBuffer = await fs.readFile(pdfPath);
    const data = await pdf(dataBuffer);
    return data.text;
  } catch (error) {
    console.error('Erreur extraction PDF:', error);
    return '';
  }
}

/**
 * Analyser un PDF avec o3
 */
async function analyzePDFWithO3(
  pdfContent: string,
  zoneContext: any,
  textAnalysis: O3Constraint[]
): Promise<O3Constraint[]> {
  
  const prompt = `Expert en urbanisme, analyse ce r√®glement communal complet pour la zone "${zoneContext.mainZone}".

R√àGLEMENT COMPLET:
${pdfContent.substring(0, 15000)} // Limiter pour les tokens

ZONE CIBLE: ${zoneContext.mainZone}
CONTRAINTES D√âJ√Ä IDENTIFI√âES: ${textAnalysis.length}

MISSION o3 - ANALYSE EXHAUSTIVE:
1. Identifier TOUTES les contraintes sp√©cifiques √† cette zone
2. Identifier TOUTES les contraintes qui s'appliquent √† TOUTES les zones de la commune
3. Extraire les TABLEAUX de valeurs (hauteurs, distances, indices)
4. Identifier les FORMULES de calcul
5. Trouver les EXCEPTIONS et cas particuliers
6. NE PAS inclure les zones de dangers (avalanches, inondations) SAUF si mentionn√©es dans le RDPPF

FORMAT JSON ENRICHI:
[
  {
    "title": "Contrainte sp√©cifique du PDF",
    "description": "Description avec valeurs des tableaux",
    "severity": "critical|high|medium|low",
    "source": "R√®glement communal - Page X",
    "article": "Article + alin√©a",
    "zone": "${zoneContext.mainZone}",
    "values": {
      "numeric": valeur,
      "unit": "unit√©",
      "range": {"min": X, "max": Y, "unit": "unit√©"},
      "formula": "formule compl√®te si pr√©sente"
    },
    "requirements": ["d√©tail1", "d√©tail2"],
    "impact": "positive|neutral|restrictive|blocking",
    "confidence": 90-100,
    "reasoning": "Explication du raisonnement et interpr√©tation",
    "crossReferences": ["r√©f√©rence1", "r√©f√©rence2"],
    "visualReference": "Figure X / Tableau Y si applicable"
  }
]`;

  try {
    const response = await callOpenAI({
      model: 'gpt-4o',
      temperature: 0,
      messages: [
        { 
          role: 'system', 
          content: 'Expert en analyse de r√®glements d\'urbanisme. Extraction exhaustive. JSON uniquement.' 
        },
        { role: 'user', content: prompt }
      ],
      max_tokens: 4000
    });
    
    const content = response.choices[0].message?.content || '';
    const jsonMatch = content.match(/\[[\s\S]*\]/);
    
    if (!jsonMatch) return [];
    
    const constraintsData = JSON.parse(jsonMatch[0]);
    
    return constraintsData.map((c: any, idx: number) => ({
      id: `o3_pdf_${idx}`,
      category: categorizeConstraint(c.title),
      zone: zoneContext.mainZone,
      title: c.title,
      description: c.description,
      severity: c.severity || 'high',
      source: c.source,
      article: c.article,
      values: c.values,
      requirements: c.requirements || [],
      impact: c.impact || 'restrictive',
      confidence: c.confidence || 95,
      analysisLevel: 'pdf' as const,
      reasoning: c.reasoning,
      crossReferences: c.crossReferences || []
    }));
    
  } catch (error) {
    console.error('Erreur analyse PDF o3:', error);
    return [];
  }
}

/**
 * Cat√©goriser automatiquement une contrainte
 */
function categorizeConstraint(title: string): string {
  const titleLower = title.toLowerCase();
  
  if (titleLower.includes('zone') || titleLower.includes('affectation')) return 'zone_affectation';
  if (titleLower.includes('hauteur') || titleLower.includes('gabarit')) return 'gabarits_hauteurs';
  if (titleLower.includes('recul') || titleLower.includes('distance')) return 'reculs_distances';
  if (titleLower.includes('ibus') || titleLower.includes('densit√©')) return 'densit√©_ibus';
  if (titleLower.includes('parking') || titleLower.includes('stationnement')) return 'stationnement';
  if (titleLower.includes('toiture') || titleLower.includes('toit')) return 'toiture_architecture';
  if (titleLower.includes('vert') || titleLower.includes('jardin')) return 'espaces_verts';
  if (titleLower.includes('environnement') || titleLower.includes('protection')) return 'contraintes_environnementales';
  if (titleLower.includes('architectural') || titleLower.includes('fa√ßade')) return 'prescriptions_architecturales';
  
  return 'autres';
}

/**
 * Analyser sp√©cifiquement le PDF RDPPF
 */
async function analyzeRDPPFPDF(
  data: ComprehensiveParcelAnalysis,
  zoneContext: any
): Promise<O3Constraint[]> {
  
  if (!data.rdppfConstraints || data.rdppfConstraints.length === 0) {
    console.log('‚ö†Ô∏è Aucune contrainte RDPPF trouv√©e');
    return [];
  }
  
  const prompt = `Expert en urbanisme suisse, analyse le texte extrait du PDF RDPPF pour cette parcelle.

ZONE CIBLE: ${zoneContext.mainZone}

CONTRAINTES RDPPF EXTRAITES:
${JSON.stringify(data.rdppfConstraints, null, 2)}

MISSION:
1. Analyser chaque contrainte RDPPF en d√©tail
2. Extraire les implications concr√®tes pour la construction
3. Identifier les restrictions l√©gales sp√©cifiques
4. √âvaluer l'impact sur le projet de construction
5. Croiser avec les donn√©es de zone

Pour chaque contrainte RDPPF, fournis une analyse d√©taill√©e au format JSON:
[
  {
    "title": "Titre de la contrainte RDPPF",
    "description": "Description d√©taill√©e avec implications",
    "severity": "critical|high|medium|low",
    "source": "RDPPF - [Th√®me sp√©cifique]",
    "zone": "${zoneContext.mainZone}",
    "impact": "blocking|restrictive|neutral|positive",
    "confidence": 90,
    "reasoning": "Explication du raisonnement",
    "requirements": ["Exigence 1", "Exigence 2"],
    "legalReference": "R√©f√©rence l√©gale exacte"
  }
]`;

  try {
    const response = await callOpenAI({
      model: 'gpt-4o',
      temperature: 0,
      messages: [
        { 
          role: 'system', 
          content: 'Expert RDPPF. Analyse exhaustive des restrictions de droit public. JSON uniquement.' 
        },
        { role: 'user', content: prompt }
      ],
      max_tokens: 2000
    });
    
    const content = response.choices[0].message?.content || '';
    const jsonMatch = content.match(/\[[\s\S]*\]/);
    
    if (!jsonMatch) return [];
    
    const constraintsData = JSON.parse(jsonMatch[0]);
    
    return constraintsData.map((c: any, idx: number) => ({
      id: `rdppf_${idx}`,
      category: 'rdppf_restrictions',
      zone: zoneContext.mainZone,
      title: c.title,
      description: c.description,
      severity: c.severity || 'medium',
      source: c.source || 'RDPPF',
      values: c.values,
      requirements: c.requirements || [],
      impact: c.impact || 'neutral',
      confidence: c.confidence || 90,
      analysisLevel: 'pdf' as const,
      reasoning: c.reasoning,
      crossReferences: c.legalReference ? [c.legalReference] : []
    }));
    
  } catch (error) {
    console.error('Erreur analyse RDPPF:', error);
    return [];
  }
}

/**
 * Analyser sp√©cifiquement le PDF du r√®glement communal
 */
async function analyzeReglementPDF(
  data: ComprehensiveParcelAnalysis,
  zoneContext: any
): Promise<O3Constraint[]> {
  
  if (!data.communalRegulations || data.communalRegulations.length === 0) {
    console.log('‚ö†Ô∏è Aucun r√®glement communal trouv√©');
    return [];
  }
  
  // Extraire le texte des r√®glements
  const reglementText = data.communalRegulations
    .map(r => r.content || r.summary || '')
    .join('\n\n');
  
  const prompt = `Expert en r√®glements communaux suisses, analyse le texte extrait du r√®glement communal.

ZONE CIBLE: ${zoneContext.mainZone}
COMMUNE: ${data.parcelDetails?.municipality || 'Non sp√©cifi√©e'}

TEXTE DU R√àGLEMENT COMMUNAL:
${reglementText.substring(0, 10000)}

MISSION:
1. Identifier TOUTES les contraintes applicables √† la zone ${zoneContext.mainZone}
2. Extraire les valeurs num√©riques exactes (IBUS, hauteurs, distances, etc.)
3. Noter les articles sp√©cifiques du r√®glement
4. Identifier les proc√©dures administratives requises
5. D√©tecter les exceptions et cas particuliers

Pour chaque contrainte du r√®glement, fournis une analyse au format JSON:
[
  {
    "title": "Titre de la contrainte",
    "description": "Description compl√®te avec valeurs",
    "severity": "critical|high|medium|low",
    "source": "R√®glement communal - Art. X",
    "article": "Article exact",
    "zone": "${zoneContext.mainZone}",
    "values": {
      "numeric": valeur,
      "unit": "unit√©",
      "formula": "formule si applicable"
    },
    "impact": "blocking|restrictive|neutral|positive",
    "confidence": 95,
    "reasoning": "Interpr√©tation et application",
    "requirements": ["Condition 1", "Condition 2"],
    "exceptions": ["Exception 1", "Exception 2"]
  }
]`;

  try {
    const response = await callOpenAI({
      model: 'gpt-4o',
      temperature: 0,
      messages: [
        { 
          role: 'system', 
          content: 'Expert r√®glements communaux. Extraction exhaustive des contraintes. JSON uniquement.' 
        },
        { role: 'user', content: prompt }
      ],
      max_tokens: 3000
    });
    
    const content = response.choices[0].message?.content || '';
    const jsonMatch = content.match(/\[[\s\S]*\]/);
    
    if (!jsonMatch) return [];
    
    const constraintsData = JSON.parse(jsonMatch[0]);
    
    return constraintsData.map((c: any, idx: number) => ({
      id: `reglement_${idx}`,
      category: 'reglement_communal',
      zone: zoneContext.mainZone,
      title: c.title,
      description: c.description,
      severity: c.severity || 'medium',
      source: c.source,
      article: c.article,
      values: c.values,
      requirements: c.requirements || [],
      impact: c.impact || 'neutral',
      confidence: c.confidence || 95,
      analysisLevel: 'pdf' as const,
      reasoning: c.reasoning,
      crossReferences: c.exceptions || []
    }));
    
  } catch (error) {
    console.error('Erreur analyse r√®glement:', error);
    return [];
  }
}

/**
 * Analyser les deux PDFs ensemble pour une vue d'ensemble
 */
async function analyzeCombinedPDFs(
  rdppfConstraints: O3Constraint[],
  reglementConstraints: O3Constraint[],
  data: ComprehensiveParcelAnalysis,
  zoneContext: any
): Promise<O3Constraint[]> {
  
  const prompt = `Expert en urbanisme, analyse l'ensemble des contraintes des deux PDFs pour identifier les synergies et conflits.

ZONE: ${zoneContext.mainZone}

CONTRAINTES RDPPF (${rdppfConstraints.length}):
${JSON.stringify(rdppfConstraints.map(c => ({ title: c.title, severity: c.severity })), null, 2)}

CONTRAINTES R√àGLEMENT COMMUNAL (${reglementConstraints.length}):
${JSON.stringify(reglementConstraints.map(c => ({ title: c.title, severity: c.severity })), null, 2)}

MISSION:
1. Identifier les conflits entre RDPPF et r√®glement communal
2. D√©tecter les contraintes cumulatives (qui s'ajoutent)
3. Trouver les synergies positives
4. √âvaluer l'impact global sur la constructibilit√©
5. Proposer une strat√©gie d'optimisation

Fournis une analyse globale au format JSON:
[
  {
    "title": "Synth√®se ou conflit identifi√©",
    "description": "Description de l'interaction entre contraintes",
    "severity": "critical|high|medium|low",
    "source": "Analyse crois√©e RDPPF/R√®glement",
    "type": "conflict|cumulative|synergy|optimization",
    "impact": "blocking|restrictive|neutral|positive",
    "confidence": 85,
    "reasoning": "Explication du raisonnement",
    "recommendations": ["Action 1", "Action 2"]
  }
]`;

  try {
    const response = await callOpenAI({
      model: 'gpt-4o',
      temperature: 0,
      messages: [
        { 
          role: 'system', 
          content: 'Expert analyse crois√©e urbanisme. Synth√®se strat√©gique. JSON uniquement.' 
        },
        { role: 'user', content: prompt }
      ],
      max_tokens: 2000
    });
    
    const content = response.choices[0].message?.content || '';
    const jsonMatch = content.match(/\[[\s\S]*\]/);
    
    if (!jsonMatch) return [];
    
    const analysisData = JSON.parse(jsonMatch[0]);
    
    return analysisData.map((a: any, idx: number) => ({
      id: `combined_${idx}`,
      category: 'analyse_globale',
      zone: zoneContext.mainZone,
      title: a.title,
      description: a.description,
      severity: a.severity || 'medium',
      source: a.source,
      values: {},
      requirements: a.recommendations || [],
      impact: a.impact || 'neutral',
      confidence: a.confidence || 85,
      analysisLevel: 'combined' as const,
      reasoning: a.reasoning,
      crossReferences: []
    }));
    
  } catch (error) {
    console.error('Erreur analyse combin√©e:', error);
    return [];
  }
}

/**
 * Fusion et enrichissement des analyses
 */
async function mergeAndEnrichAnalyses(
  textConstraints: O3Constraint[],
  pdfConstraints: O3Constraint[],
  zoneContext: any
): Promise<O3Constraint[]> {
  
  const merged: O3Constraint[] = [];
  const processed = new Set<string>();
  
  // Prioriser les contraintes PDF (plus compl√®tes)
  for (const pdfC of pdfConstraints) {
    const key = `${pdfC.category}_${pdfC.title}`;
    merged.push({ ...pdfC, analysisLevel: 'enhanced' });
    processed.add(key);
  }
  
  // Ajouter les contraintes texte uniques
  for (const textC of textConstraints) {
    const key = `${textC.category}_${textC.title}`;
    if (!processed.has(key)) {
      // V√©rifier si c'est une variante
      const similar = merged.find(m => 
        m.category === textC.category && 
        similarity(m.title, textC.title) > 0.7
      );
      
      if (!similar) {
        merged.push(textC);
      } else {
        // Enrichir la contrainte existante
        similar.analysisLevel = 'combined';
        similar.confidence = Math.max(similar.confidence, textC.confidence);
        if (textC.reasoning && !similar.reasoning) {
          similar.reasoning = textC.reasoning;
        }
      }
    }
  }
  
  // Enrichissement final avec analyse de coh√©rence
  await enrichWithCoherenceAnalysis(merged, zoneContext);
  
  return merged.sort((a, b) => {
    // Trier par cat√©gorie puis par confiance
    if (a.category !== b.category) {
      return a.category.localeCompare(b.category);
    }
    return b.confidence - a.confidence;
  });
}

/**
 * Enrichissement avec analyse de coh√©rence
 */
async function enrichWithCoherenceAnalysis(constraints: O3Constraint[], zoneContext: any): Promise<void> {
  const prompt = `Analyse la coh√©rence de ces ${constraints.length} contraintes pour la zone "${zoneContext.mainZone}":

${constraints.map(c => `${c.id}: ${c.title} - ${c.values?.numeric || ''} ${c.values?.unit || ''}`).join('\n')}

Identifie:
1. Incoh√©rences ou contradictions
2. Contraintes manquantes √©videntes
3. Validit√© des valeurs num√©riques
4. Suggestions d'am√©lioration

JSON uniquement.`;

  try {
    const response = await callOpenAI({
      model: 'gpt-4o',
      temperature: 0.1,
      messages: [
        { role: 'system', content: 'Expert en coh√©rence r√©glementaire.' },
        { role: 'user', content: prompt }
      ],
      max_tokens: 1000
    });
    
    // Traiter les r√©sultats de coh√©rence
    const coherenceContent = response.choices[0].message?.content || '{}';
    const cleanedCoherenceContent = coherenceContent
      .replace(/^```json\s*\n?/, '')
      .replace(/\n?```\s*$/, '')
      .trim();
    const coherence = JSON.parse(cleanedCoherenceContent);
    
    // Enrichir les contraintes avec les insights
    if (coherence.issues) {
      for (const issue of coherence.issues) {
        const constraint = constraints.find(c => c.id === issue.constraintId);
        if (constraint) {
          constraint.reasoning = `${constraint.reasoning || ''}\n‚ö†Ô∏è ${issue.description}`;
        }
      }
    }
  } catch (error) {
    console.error('Erreur analyse coh√©rence:', error);
  }
}

/**
 * Calculs avanc√©s
 */
async function performAdvancedCalculations(
  constraints: O3Constraint[],
  data: ComprehensiveParcelAnalysis
): Promise<O3AnalysisResult['calculations']> {
  
  const surface = data.parcelDetails?.surface || 0;
  const calculations: O3AnalysisResult['calculations'] = {};
  
  // Extraire les valeurs des contraintes
  for (const constraint of constraints) {
    if (constraint.category === 'densit√©_ibus' && constraint.values?.numeric) {
      const ibus = constraint.values.numeric;
      calculations.maxBuildableArea = Math.round(surface * ibus);
      calculations.constructionDensity = ibus;
    }
    
    if (constraint.category === 'gabarits_hauteurs' && constraint.values?.numeric) {
      calculations.maxHeight = constraint.values.numeric;
    }
    
    if (constraint.category === 'espaces_verts' && constraint.values?.numeric) {
      const greenPercent = constraint.values.numeric;
      calculations.requiredGreenSpace = Math.round(surface * greenPercent / 100);
    }
    
    if (constraint.category === 'stationnement' && constraint.values?.numeric) {
      // Calcul basique pour exemple
      calculations.parkingSpaces = constraint.values.numeric;
    }
  }
  
  return calculations;
}

/**
 * Synth√®se strat√©gique o3
 */
async function generateO3StrategicSynthesis(
  data: ComprehensiveParcelAnalysis,
  constraints: O3Constraint[],
  calculations: O3AnalysisResult['calculations'],
  zoneContext: any
): Promise<Pick<O3AnalysisResult, 'summary' | 'recommendations' | 'risks' | 'opportunities' | 'nextSteps'>> {
  
  const prompt = `Expert conseil senior en d√©veloppement immobilier suisse, g√©n√®re une synth√®se strat√©gique.

PARCELLE: ${data.searchQuery}
ZONE: ${zoneContext.mainZone}
SURFACE: ${data.parcelDetails?.surface || 'N/A'} m¬≤
CONTRAINTES: ${constraints.length} identifi√©es

CONTRAINTES CRITIQUES:
${constraints.filter(c => c.severity === 'critical' || c.severity === 'high')
  .map(c => `- ${c.title}: ${c.description} [${c.values?.numeric || ''} ${c.values?.unit || ''}]`)
  .join('\n')}

CALCULS:
- Surface constructible max: ${calculations.maxBuildableArea || 'N/A'} m¬≤
- Hauteur max: ${calculations.maxHeight || 'N/A'} m
- Espaces verts requis: ${calculations.requiredGreenSpace || 'N/A'} m¬≤

G√âN√àRE UNE SYNTH√àSE STRAT√âGIQUE COMPL√àTE:

1. R√âSUM√â EX√âCUTIF (200 mots): Vue strat√©gique pour d√©cideur
2. R√âSUM√â TECHNIQUE (200 mots): Aspects techniques pour architecte
3. R√âSUM√â PRATIQUE (200 mots): Actions concr√®tes pour ma√Ætre d'ouvrage

4. RECOMMANDATIONS PRIORITAIRES (10-15): Actions strat√©giques class√©es par importance
5. RISQUES (5-10): Risques majeurs avec probabilit√© et mitigation
6. OPPORTUNIT√âS (5-10): Opportunit√©s uniques de cette parcelle
7. FEUILLE DE ROUTE (phases): Plan d'action d√©taill√© par phases

FORMAT JSON STRUCTUR√â:
{
  "summary": {
    "executive": "r√©sum√© ex√©cutif...",
    "technical": "r√©sum√© technique...",
    "practical": "r√©sum√© pratique..."
  },
  "recommendations": [
    {
      "priority": "high|medium|low",
      "action": "action concr√®te",
      "reason": "justification",
      "timeline": "d√©lai"
    }
  ],
  "risks": [
    {
      "level": "critical|high|medium|low",
      "description": "description du risque",
      "mitigation": "strat√©gie de mitigation",
      "probability": 0-100
    }
  ],
  "opportunities": [
    {
      "type": "type d'opportunit√©",
      "description": "description d√©taill√©e",
      "potential": "high|medium|low",
      "requirements": ["req1", "req2"]
    }
  ],
  "nextSteps": [
    {
      "phase": "Phase 1: Titre",
      "tasks": ["t√¢che1", "t√¢che2"],
      "duration": "dur√©e estim√©e",
      "dependencies": ["dep1", "dep2"]
    }
  ]
}`;

  try {
    const response = await callOpenAI({
      model: 'gpt-4o',
      temperature: 0.1,
      messages: [
        { 
          role: 'system', 
          content: 'Conseil strat√©gique senior en immobilier suisse. 30 ans d\'exp√©rience. Synth√®ses ex√©cutives percutantes.' 
        },
        { role: 'user', content: prompt }
      ],
      max_tokens: 4000
    });
    
    const content = response.choices[0].message?.content || '';
    const jsonMatch = content.match(/\{[\s\S]*\}/);
    
    if (!jsonMatch) {
      throw new Error('Pas de JSON valide');
    }
    
    return JSON.parse(jsonMatch[0]);
    
  } catch (error) {
    console.error('Erreur synth√®se o3:', error);
    return {
      summary: {
        executive: 'Analyse en cours...',
        technical: 'Analyse en cours...',
        practical: 'Analyse en cours...'
      },
      recommendations: [],
      risks: [],
      opportunities: [],
      nextSteps: []
    };
  }
}

/**
 * Calcul de compatibilit√© am√©lior√©
 */
function calculateEnhancedCompatibility(constraints: O3Constraint[]): O3AnalysisResult['zoneAnalysis']['compatibility'] {
  const criticalCount = constraints.filter(c => c.severity === 'critical').length;
  const highCount = constraints.filter(c => c.severity === 'high').length;
  const blockingCount = constraints.filter(c => c.impact === 'blocking').length;
  
  if (blockingCount > 0) return 'incompatible';
  if (criticalCount > 2) return 'difficult';
  if (criticalCount > 0 || highCount > 3) return 'moderate';
  if (highCount > 1) return 'good';
  return 'excellent';
}

/**
 * Calcul de confiance o3
 */
function calculateO3Confidence(constraints: O3Constraint[], synthesis: any): number {
  const avgConstraintConfidence = constraints.length > 0
    ? constraints.reduce((sum, c) => sum + c.confidence, 0) / constraints.length
    : 0;
  
  const hasHighConfidenceConstraints = constraints.filter(c => c.confidence >= 90).length / constraints.length;
  const hasReasoning = constraints.filter(c => c.reasoning).length / constraints.length;
  const hasCrossRefs = constraints.filter(c => c.crossReferences && c.crossReferences.length > 0).length / constraints.length;
  
  const confidence = (
    avgConstraintConfidence * 0.4 +
    hasHighConfidenceConstraints * 100 * 0.3 +
    hasReasoning * 100 * 0.2 +
    hasCrossRefs * 100 * 0.1
  );
  
  return Math.round(Math.min(confidence, 100));
}

/**
 * Calculer la similarit√© entre deux cha√Ænes
 */
function similarity(str1: string, str2: string): number {
  const longer = str1.length > str2.length ? str1 : str2;
  const shorter = str1.length > str2.length ? str2 : str1;
  
  if (longer.length === 0) return 1.0;
  
  const editDistance = levenshteinDistance(longer, shorter);
  return (longer.length - editDistance) / longer.length;
}

function levenshteinDistance(str1: string, str2: string): number {
  const matrix = [];
  
  for (let i = 0; i <= str2.length; i++) {
    matrix[i] = [i];
  }
  
  for (let j = 0; j <= str1.length; j++) {
    matrix[0][j] = j;
  }
  
  for (let i = 1; i <= str2.length; i++) {
    for (let j = 1; j <= str1.length; j++) {
      if (str2.charAt(i - 1) === str1.charAt(j - 1)) {
        matrix[i][j] = matrix[i - 1][j - 1];
      } else {
        matrix[i][j] = Math.min(
          matrix[i - 1][j - 1] + 1,
          matrix[i][j - 1] + 1,
          matrix[i - 1][j] + 1
        );
      }
    }
  }
  
  return matrix[str2.length][str1.length];
}