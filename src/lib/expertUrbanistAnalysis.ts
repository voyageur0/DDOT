/**
 * Analyse experte urbanistique - Extraction exhaustive des contraintes
 * Se concentre UNIQUEMENT sur les contraintes r√©glementaires sans conseils g√©n√©raux
 */

import * as fs from 'fs/promises';
import * as path from 'path';
import { callOpenAI } from '../utils/openai';
import { extractTextFromPdf } from './rdppfExtractor';
import { ComprehensiveParcelAnalysis } from './parcelAnalysisOrchestrator';

export interface UrbanConstraint {
  category: string;
  subcategory?: string;
  constraint: string;
  value: string | number;
  unit?: string;
  article: string;
  source: 'RDPPF' | 'R√®glement communal' | 'RDPPF et R√®glement';
  pageReference?: number;
  applicableToZone: boolean;
  mandatory: boolean;
}

export interface ExpertUrbanAnalysis {
  parcelIdentification: {
    egrid: string;
    number: string;
    municipality: string;
    surface: number;
    zone: string;
    zoneCode?: string;
  };
  
  // Contraintes exhaustives organis√©es par cat√©gorie
  constraints: {
    zoning: UrbanConstraint[];           // Zone et affectation
    density: UrbanConstraint[];           // IBUS, indice U, taux occupation
    heights: UrbanConstraint[];           // Hauteurs, √©tages, gabarits
    distances: UrbanConstraint[];         // Distances aux limites, entre b√¢timents
    parking: UrbanConstraint[];           // Places de stationnement obligatoires
    greenSpaces: UrbanConstraint[];       // Espaces verts, arborisation
    playgrounds: UrbanConstraint[];       // Places de jeux, espaces d√©tente
    architecture: UrbanConstraint[];      // Toitures, fa√ßades, mat√©riaux
    environment: UrbanConstraint[];       // Bruit, √©nergie, environnement
    procedures: UrbanConstraint[];        // Proc√©dures, d√©lais, autorisations
    specialRestrictions: UrbanConstraint[]; // Servitudes, restrictions sp√©ciales
  };
  
  calculatedValues: {
    maxBuildableSurface: number;
    maxBuildableVolume?: number;
    requiredParkingSpaces: number;
    requiredGreenSpace: number;
    requiredPlaygroundArea?: number;
    maxHeight: number;
    minDistanceToBoundary: number;
  };
  
  synthesis: string;
  completeness: number;
  confidence: number;
}

/**
 * Analyse experte compl√®te focalis√©e sur l'extraction exhaustive
 */
export async function performExpertUrbanAnalysis(
  data: ComprehensiveParcelAnalysis
): Promise<ExpertUrbanAnalysis> {
  console.log('üèõÔ∏è D√©marrage analyse urbanistique experte exhaustive...');
  console.log('üìã Donn√©es re√ßues:', {
    egrid: data.searchResult?.egrid,
    number: data.searchResult?.number,
    municipality: data.parcelDetails?.municipality || extractMunicipality(data),
    surface: data.parcelDetails?.surface || data.rdppfData?.zoneAffectation?.surface
  });
  
  // Identification de la parcelle
  const parcelId = {
    egrid: data.searchResult?.egrid || '',
    number: data.parcelDetails?.number || data.searchResult?.number || '',
    municipality: data.parcelDetails?.municipality || extractMunicipality(data),
    surface: data.parcelDetails?.surface || extractSurface(data) || 1000, // Surface par d√©faut si inconnue
    zone: '',
    zoneCode: ''
  };
  
  // Si pas d'EGRID, essayer de le r√©cup√©rer depuis le searchResult
  if (!parcelId.egrid && data.searchResult) {
    console.log('‚ö†Ô∏è EGRID manquant, tentative d\'extraction depuis searchResult');
    // L'EGRID devrait d√©j√† √™tre dans searchResult gr√¢ce √† nos corrections
  }
  
  // √âtape 1: Analyser le RDPPF en profondeur
  const rdppfConstraints = await analyzeRDPPFExhaustive(parcelId.egrid);
  
  // Extraire la zone depuis RDPPF
  const zoneConstraint = rdppfConstraints.find(c => c.category === 'zoning');
  if (zoneConstraint) {
    parcelId.zone = String(zoneConstraint.value);
    parcelId.zoneCode = zoneConstraint.constraint;
  }
  
  // √âtape 2: Analyser le r√®glement communal article par article
  const regulationConstraints = await analyzeRegulationExhaustive(
    parcelId.municipality,
    parcelId.zone
  );
  
  // √âtape 3: Fusionner et organiser les contraintes
  const allConstraints = [...rdppfConstraints, ...regulationConstraints];
  const organizedConstraints = organizeConstraintsByCategory(allConstraints, parcelId.zone);
  
  // √âtape 4: Calculer les valeurs d√©riv√©es
  const calculated = calculateDerivedValues(organizedConstraints, parcelId.surface);
  
  // √âtape 5: G√©n√©rer la synth√®se experte
  const synthesis = await generateExpertSynthesis(parcelId, organizedConstraints, calculated);
  
  // Calculer la compl√©tude
  const completeness = calculateCompleteness(organizedConstraints);
  
  return {
    parcelIdentification: parcelId,
    constraints: organizedConstraints,
    calculatedValues: calculated,
    synthesis,
    completeness,
    confidence: Math.min(95, completeness + 10)
  };
}

/**
 * Analyser le RDPPF de mani√®re exhaustive
 */
async function analyzeRDPPFExhaustive(egrid: string): Promise<UrbanConstraint[]> {
  if (!egrid) {
    console.log('‚ö†Ô∏è Pas d\'EGRID pour t√©l√©charger le RDPPF');
    return [];
  }
  
  console.log(`üìÑ Analyse exhaustive RDPPF pour ${egrid}`);
  
  try {
    const rdppfUrl = `https://rdppfvs.geopol.ch/extract/pdf?EGRID=${egrid}&LANG=fr`;
    console.log(`üîó URL RDPPF: ${rdppfUrl}`);
    
    const { downloadRdppf } = await import('./rdppfExtractor');
    const pdfPath = await downloadRdppf(rdppfUrl);
    const rdppfText = await extractTextFromPdf(pdfPath);
    
    console.log(`üìñ Texte RDPPF extrait: ${rdppfText.length} caract√®res`);
    
    // Analyser chaque section du RDPPF
    const prompt = `Tu es un expert en analyse de documents RDPPF suisses. Analyse ce document et extrais TOUTES les contraintes.

DOCUMENT RDPPF (premiers 20000 caract√®res):
${rdppfText.substring(0, 20000)}

MISSION: Extraire EXHAUSTIVEMENT toutes les contraintes et valeurs du document.

FOCUS OBLIGATOIRE - EXTRAIRE:
1. ZONE D'AFFECTATION EXACTE (ex: "Zone r√©sidentielle 0.5", "Zone mixte", etc.)
2. SURFACE DE LA PARCELLE en m¬≤
3. IBUS (Indice de b√¢tisse d'utilisation du sol) - valeur num√©rique
4. Indice U (indice d'utilisation) - valeur num√©rique
5. Hauteur maximale en m√®tres
6. Nombre d'√©tages maximum
7. Distance minimale aux limites en m√®tres
8. Degr√© de sensibilit√© au bruit (DS I, II, III ou IV)
9. Places de stationnement requises (ratio)
10. Pourcentage d'espaces verts obligatoire
11. Aires de jeux obligatoires en m¬≤
12. Toutes servitudes et restrictions

Format JSON STRICT - Liste TOUTES les contraintes trouv√©es:
[
  {
    "category": "zoning|density|heights|distances|parking|greenSpaces|playgrounds|environment|specialRestrictions",
    "subcategory": "d√©tail sp√©cifique",
    "constraint": "nom exact de la contrainte",
    "value": "valeur EXACTE trouv√©e dans le document",
    "unit": "m¬≤|m|%|√©tages|places|coefficient",
    "article": "r√©f√©rence article/page du document",
    "pageReference": num√©ro_page_si_visible,
    "mandatory": true/false
  }
]

R√àGLES STRICTES:
- Si tu vois "Zone r√©sidentielle 0.5 (3)", extrais: category:"zoning", value:"Zone r√©sidentielle 0.5 (3)"
- Si tu vois "Surface: 862 m¬≤", extrais: category:"zoning", constraint:"Surface parcelle", value:862, unit:"m¬≤"
- Si tu vois "IBUS 0.6", extrais: category:"density", constraint:"IBUS", value:0.6, unit:"coefficient"
- EXTRAIRE TOUTES LES VALEURS NUM√âRIQUES
- NE JAMAIS inventer de valeurs`;

    const response = await callOpenAI({
      model: 'gpt-4o',
      temperature: 0,
      messages: [
        { role: 'system', content: 'Expert en extraction RDPPF. Sois exhaustif. R√©ponds uniquement en JSON.' },
        { role: 'user', content: prompt }
      ],
      max_tokens: 4000
    });
    
    const content = response.choices[0].message?.content || '[]';
    const constraints = JSON.parse(content.match(/\[[\s\S]*\]/)?.[0] || '[]');
    
    return constraints.map((c: any) => ({
      ...c,
      source: 'RDPPF',
      applicableToZone: true
    }));
    
  } catch (error) {
    console.error('Erreur analyse RDPPF:', error);
    return [];
  }
}

/**
 * Analyser le r√®glement communal de mani√®re exhaustive
 */
async function analyzeRegulationExhaustive(
  municipality: string,
  zone: string
): Promise<UrbanConstraint[]> {
  if (!municipality) return [];
  
  console.log(`üìã Analyse exhaustive r√®glement ${municipality} pour zone ${zone}`);
  
  try {
    const regulationPath = path.join(
      process.cwd(),
      'reglements',
      `VS_${municipality}_R√®glement des constructions.pdf`
    );
    
    await fs.access(regulationPath);
    const regulationText = await extractTextFromPdf(regulationPath);
    
    // Analyser article par article
    const articles = extractArticles(regulationText);
    const constraints: UrbanConstraint[] = [];
    
    // Analyser chaque article pour la zone sp√©cifique
    for (const article of articles) {
      const articleConstraints = await analyzeArticle(article, zone, municipality);
      constraints.push(...articleConstraints);
    }
    
    // Analyse globale pour capturer les contraintes manqu√©es
    const globalConstraints = await analyzeGlobalRegulation(regulationText, zone, municipality);
    constraints.push(...globalConstraints);
    
    return constraints;
    
  } catch (error) {
    console.error('Erreur analyse r√®glement:', error);
    return [];
  }
}

/**
 * Extraire les articles du r√®glement
 */
function extractArticles(text: string): Array<{number: string, content: string}> {
  const articles: Array<{number: string, content: string}> = [];
  const lines = text.split('\n');
  
  let currentArticle: {number: string, content: string} | null = null;
  
  for (const line of lines) {
    // D√©tecter le d√©but d'un article
    const articleMatch = line.match(/^(?:Art(?:icle)?\.?\s*)?(\d+(?:\.\d+)?)/);
    if (articleMatch) {
      if (currentArticle) {
        articles.push(currentArticle);
      }
      currentArticle = {
        number: articleMatch[1],
        content: line
      };
    } else if (currentArticle) {
      currentArticle.content += '\n' + line;
    }
  }
  
  if (currentArticle) {
    articles.push(currentArticle);
  }
  
  return articles;
}

/**
 * Analyser un article sp√©cifique
 */
async function analyzeArticle(
  article: {number: string, content: string},
  zone: string,
  municipality: string
): Promise<UrbanConstraint[]> {
  
  // Analyse directe par patterns pour extraction rapide
  const constraints: UrbanConstraint[] = [];
  const content = article.content.toLowerCase();
  
  // Patterns pour diff√©rentes contraintes
  const patterns = {
    heights: /hauteur\s*(?:max(?:imale)?|minimum)?\s*:?\s*(\d+(?:\.\d+)?)\s*(m|m√®tres?|√©tages?)/gi,
    distances: /distance\s*(?:min(?:imale)?|aux?\s+limites?)?\s*:?\s*(\d+(?:\.\d+)?)\s*(m|m√®tres?)/gi,
    density: /(?:ibus|indice\s*(?:u|d'utilisation))\s*:?\s*(\d+(?:\.\d+)?)/gi,
    parking: /(\d+(?:\.\d+)?)\s*places?\s*(?:de\s*)?(?:parc|stationnement)\s*(?:par|pour)\s*(\d+\s*m¬≤|logement|appartement)/gi,
    greenSpaces: /(\d+)\s*%\s*(?:d')?espaces?\s*verts?/gi,
    playgrounds: /(\d+)\s*m¬≤\s*(?:de\s*)?(?:place|aire|espace)s?\s*de\s*jeux?/gi
  };
  
  // Extraire les contraintes par pattern
  for (const [category, pattern] of Object.entries(patterns)) {
    const matches = [...content.matchAll(pattern)];
    for (const match of matches) {
      constraints.push({
        category: mapCategory(category),
        constraint: match[0],
        value: parseFloat(match[1]),
        unit: match[2] || '',
        article: `Art. ${article.number}`,
        source: 'R√®glement communal',
        applicableToZone: isApplicableToZone(article.content, zone),
        mandatory: true
      });
    }
  }
  
  return constraints;
}

/**
 * Analyse globale du r√®glement avec IA
 */
async function analyzeGlobalRegulation(
  text: string,
  zone: string,
  municipality: string
): Promise<UrbanConstraint[]> {
  
  // Si pas de zone sp√©cifi√©e, essayer de la d√©tecter dans le texte
  const actualZone = zone || 'Zone √† d√©terminer';
  console.log(`üìã Analyse globale du r√®glement pour zone: ${actualZone}`);
  
  const prompt = `Tu es un expert en r√®glements d'urbanisme suisses. Analyse ce r√®glement communal et extrais TOUTES les contraintes pour la zone "${actualZone}".

R√àGLEMENT: ${municipality}
ZONE CIBLE: ${actualZone}

TEXTE (premiers 25000 caract√®res):
${text.substring(0, 25000)}

MISSION: Extraire EXHAUSTIVEMENT toutes les contraintes qui s'appliquent √† cette zone.

FOCUS OBLIGATOIRE:
1. Places de stationnement (nombre par logement, par m¬≤, visiteurs)
2. Places de jeux (surface minimale, pourcentage, localisation)
3. Espaces verts (pourcentage minimum, arborisation obligatoire)
4. Hauteurs (au fa√Æte, √† la corniche, totale, nombre d'√©tages)
5. Distances (aux limites, entre b√¢timents, aux routes)
6. Indices (IBUS, indice U, taux d'occupation)
7. Toitures (type, pente, mat√©riaux)
8. Fa√ßades (mat√©riaux, couleurs)
9. Proc√©dures (d√©lais, autorisations sp√©ciales)

Format JSON - Liste TOUTES les contraintes:
[
  {
    "category": "parking|playgrounds|greenSpaces|heights|distances|density|architecture|procedures",
    "subcategory": "d√©tail sp√©cifique",
    "constraint": "description exacte",
    "value": valeur_ou_texte,
    "unit": "unit√©",
    "article": "Art. X",
    "mandatory": true/false
  }
]`;

  const response = await callOpenAI({
    model: 'gpt-4o',
    temperature: 0,
    messages: [
      { role: 'system', content: 'Expert r√®glements communaux suisses. Extraction exhaustive. JSON uniquement.' },
      { role: 'user', content: prompt }
    ],
    max_tokens: 4000
  });
  
  const content = response.choices[0].message?.content || '[]';
  const constraints = JSON.parse(content.match(/\[[\s\S]*\]/)?.[0] || '[]');
  
  return constraints.map((c: any) => ({
    ...c,
    source: 'R√®glement communal',
    applicableToZone: true
  }));
}

/**
 * Organiser les contraintes par cat√©gorie
 */
function organizeConstraintsByCategory(
  constraints: UrbanConstraint[],
  zone: string
): ExpertUrbanAnalysis['constraints'] {
  
  const organized: ExpertUrbanAnalysis['constraints'] = {
    zoning: [],
    density: [],
    heights: [],
    distances: [],
    parking: [],
    greenSpaces: [],
    playgrounds: [],
    architecture: [],
    environment: [],
    procedures: [],
    specialRestrictions: []
  };
  
  for (const constraint of constraints) {
    // Filtrer par zone si applicable
    if (!constraint.applicableToZone && zone && !isApplicableToZone(String(constraint.value), zone)) {
      continue;
    }
    
    // Cat√©goriser
    const category = constraint.category.toLowerCase();
    
    if (category.includes('zon')) {
      organized.zoning.push(constraint);
    } else if (category.includes('dens') || category.includes('ibus') || category.includes('indice')) {
      organized.density.push(constraint);
    } else if (category.includes('haut') || category.includes('height')) {
      organized.heights.push(constraint);
    } else if (category.includes('dist')) {
      organized.distances.push(constraint);
    } else if (category.includes('park') || category.includes('station')) {
      organized.parking.push(constraint);
    } else if (category.includes('green') || category.includes('vert')) {
      organized.greenSpaces.push(constraint);
    } else if (category.includes('play') || category.includes('jeu')) {
      organized.playgrounds.push(constraint);
    } else if (category.includes('arch') || category.includes('toit') || category.includes('fa√ßade')) {
      organized.architecture.push(constraint);
    } else if (category.includes('env') || category.includes('bruit') || category.includes('√©nergie')) {
      organized.environment.push(constraint);
    } else if (category.includes('proc') || category.includes('d√©lai')) {
      organized.procedures.push(constraint);
    } else {
      organized.specialRestrictions.push(constraint);
    }
  }
  
  return organized;
}

/**
 * Calculer les valeurs d√©riv√©es
 */
function calculateDerivedValues(
  constraints: ExpertUrbanAnalysis['constraints'],
  parcelSurface: number
): ExpertUrbanAnalysis['calculatedValues'] {
  
  // Extraire les valeurs des contraintes
  let ibus = 0;
  let maxHeight = 0;
  let minDistance = 999;
  let parkingRatio = 0;
  let greenSpacePercent = 0;
  let playgroundArea = 0;
  
  // IBUS/Densit√©
  for (const c of constraints.density) {
    if (c.constraint.toLowerCase().includes('ibus') && typeof c.value === 'number') {
      ibus = Math.max(ibus, c.value);
    }
  }
  
  // Hauteur max
  for (const c of constraints.heights) {
    if (typeof c.value === 'number' && c.unit?.includes('m')) {
      maxHeight = Math.max(maxHeight, c.value);
    }
  }
  
  // Distance min
  for (const c of constraints.distances) {
    if (typeof c.value === 'number') {
      minDistance = Math.min(minDistance, c.value);
    }
  }
  
  // Stationnement
  for (const c of constraints.parking) {
    if (typeof c.value === 'number') {
      if (c.constraint.includes('logement')) {
        parkingRatio = c.value;
      }
    }
  }
  
  // Espaces verts
  for (const c of constraints.greenSpaces) {
    if (typeof c.value === 'number' && c.unit === '%') {
      greenSpacePercent = Math.max(greenSpacePercent, c.value);
    }
  }
  
  // Aires de jeux
  for (const c of constraints.playgrounds) {
    if (typeof c.value === 'number' && c.unit?.includes('m¬≤')) {
      playgroundArea = Math.max(playgroundArea, c.value);
    }
  }
  
  // Calculs
  const maxBuildableSurface = parcelSurface * ibus;
  const requiredGreenSpace = parcelSurface * (greenSpacePercent / 100);
  const requiredParkingSpaces = Math.ceil(maxBuildableSurface / 100 * parkingRatio); // Estimation
  
  return {
    maxBuildableSurface: Math.round(maxBuildableSurface),
    maxBuildableVolume: maxBuildableSurface * maxHeight,
    requiredParkingSpaces,
    requiredGreenSpace: Math.round(requiredGreenSpace),
    requiredPlaygroundArea: playgroundArea,
    maxHeight,
    minDistanceToBoundary: minDistance === 999 ? 3 : minDistance // D√©faut 3m
  };
}

/**
 * G√©n√©rer la synth√®se experte
 */
async function generateExpertSynthesis(
  parcel: ExpertUrbanAnalysis['parcelIdentification'],
  constraints: ExpertUrbanAnalysis['constraints'],
  calculated: ExpertUrbanAnalysis['calculatedValues']
): Promise<string> {
  
  // Compter les contraintes
  const totalConstraints = Object.values(constraints).reduce((sum, cat) => sum + cat.length, 0);
  
  const prompt = `Tu es un expert urbaniste suisse. R√©dige une synth√®se TECHNIQUE et FACTUELLE des contraintes.

PARCELLE:
- EGRID: ${parcel.egrid}
- Surface: ${parcel.surface} m¬≤
- Zone: ${parcel.zone}
- Commune: ${parcel.municipality}

CONTRAINTES IDENTIFI√âES: ${totalConstraints}

VALEURS CALCUL√âES:
- Surface constructible max: ${calculated.maxBuildableSurface} m¬≤
- Hauteur max: ${calculated.maxHeight} m
- Distance min aux limites: ${calculated.minDistanceToBoundary} m
- Places de parc requises: ${calculated.requiredParkingSpaces}
- Espaces verts requis: ${calculated.requiredGreenSpace} m¬≤
- Aires de jeux requises: ${calculated.requiredPlaygroundArea} m¬≤

PRINCIPALES CONTRAINTES PAR CAT√âGORIE:
${Object.entries(constraints).map(([cat, items]) => 
  items.length > 0 ? `${cat}: ${items.slice(0, 3).map(i => `${i.constraint} (${i.article})`).join(', ')}` : ''
).filter(Boolean).join('\n')}

MISSION: R√©dige une synth√®se TECHNIQUE de 200-300 mots qui:
1. √ânonce les contraintes principales avec leurs valeurs exactes
2. Cite les articles de r√©f√©rence
3. Mentionne les obligations (stationnement, espaces verts, jeux)
4. NE DONNE PAS de conseils g√©n√©raux
5. NE PARLE PAS d'opportunit√©s ou de potentiel
6. RESTE FACTUEL et TECHNIQUE

Synth√®se technique:`;

  const response = await callOpenAI({
    model: 'gpt-4o',
    temperature: 0,
    messages: [
      { role: 'system', content: 'Expert urbaniste suisse. Synth√®se technique factuelle uniquement.' },
      { role: 'user', content: prompt }
    ],
    max_tokens: 800
  });
  
  return response.choices[0].message?.content || '';
}

// Fonctions utilitaires
function extractMunicipality(data: ComprehensiveParcelAnalysis): string {
  const label = data.searchResult?.number || '';
  const match = label.match(/<b>([^<]+)<\/b>/);
  if (match) {
    const municipality = match[1];
    // Si c'est un code postal (4 chiffres), chercher le vrai nom apr√®s
    if (/^\d{4}$/.test(municipality)) {
      const realMatch = label.match(/\d{4}\s+([^<]+)/);
      return realMatch ? realMatch[1].trim() : '';
    }
    return municipality;
  }
  return '';
}

function extractSurface(data: ComprehensiveParcelAnalysis): number {
  if (data.parcelDetails?.surface) return data.parcelDetails.surface;
  if (data.rdppfData?.zoneAffectation?.surface) return data.rdppfData.zoneAffectation.surface;
  return 0;
}

function isApplicableToZone(text: string, targetZone: string): boolean {
  if (!targetZone) return true;
  const textLower = text.toLowerCase();
  const zoneLower = targetZone.toLowerCase();
  
  // V√©rifier si le texte mentionne la zone
  const zoneKeywords = zoneLower.split(/\s+/);
  return zoneKeywords.some(kw => textLower.includes(kw));
}

function mapCategory(category: string): string {
  const mapping: Record<string, string> = {
    'heights': 'heights',
    'distances': 'distances',
    'density': 'density',
    'parking': 'parking',
    'greenSpaces': 'greenSpaces',
    'playgrounds': 'playgrounds'
  };
  return mapping[category] || 'specialRestrictions';
}

function calculateCompleteness(constraints: ExpertUrbanAnalysis['constraints']): number {
  let score = 0;
  const weights = {
    zoning: 15,
    density: 15,
    heights: 10,
    distances: 10,
    parking: 15,
    greenSpaces: 10,
    playgrounds: 10,
    architecture: 5,
    environment: 5,
    procedures: 3,
    specialRestrictions: 2
  };
  
  for (const [category, weight] of Object.entries(weights)) {
    const categoryConstraints = constraints[category as keyof typeof constraints];
    if (categoryConstraints && categoryConstraints.length > 0) {
      score += weight;
    }
  }
  
  return Math.min(95, score);
}