/**
 * Analyse approfondie des documents RDPPF et r√®glements communaux
 * Utilise une lecture compl√®te des PDFs et extraction de donn√©es concr√®tes
 */

import * as fs from 'fs/promises';
import * as path from 'path';
import { callOpenAI } from '../utils/openai';
import { extractTextFromPdf } from './rdppfExtractor';
import { ComprehensiveParcelAnalysis } from './parcelAnalysisOrchestrator';

export interface ConcreteConstraint {
  category: string;
  name: string;
  value: string | number;
  unit?: string;
  source: string;
  article?: string;
  confidence: number;
}

export interface DeepAnalysisResult {
  parcelInfo: {
    egrid: string;
    number: string;
    municipality: string;
    surface: number;
    zone: string;
    zoneDetails?: string;
  };
  concreteConstraints: ConcreteConstraint[];
  synthesisText: string;
  rdppfExtract?: string;
  regulationExtract?: string;
  confidence: number;
}

/**
 * Analyse approfondie avec lecture compl√®te des documents
 */
export async function performDeepDocumentAnalysis(
  data: ComprehensiveParcelAnalysis
): Promise<DeepAnalysisResult> {
  console.log('üî¨ D√©marrage analyse approfondie des documents...');
  
  const result: DeepAnalysisResult = {
    parcelInfo: {
      egrid: data.searchResult?.egrid || '',
      number: data.parcelDetails?.number || data.searchResult?.number || '',
      municipality: data.parcelDetails?.municipality || '',
      surface: data.parcelDetails?.surface || 0,
      zone: '√Ä d√©terminer',
      zoneDetails: ''
    },
    concreteConstraints: [],
    synthesisText: '',
    confidence: 0
  };
  
  // √âtape 1: Lire et analyser le RDPPF
  if (data.searchResult?.egrid) {
    const rdppfConstraints = await analyzeRDPPFDocument(data.searchResult.egrid);
    result.concreteConstraints.push(...rdppfConstraints.constraints);
    result.rdppfExtract = rdppfConstraints.extract;
    
    // Extraire la zone depuis le RDPPF
    const zoneConstraint = rdppfConstraints.constraints.find(c => 
      c.category === 'Zone' || c.name.toLowerCase().includes('zone')
    );
    if (zoneConstraint) {
      result.parcelInfo.zone = String(zoneConstraint.value);
      result.parcelInfo.zoneDetails = zoneConstraint.source;
    }
  }
  
  // √âtape 2: Lire et analyser le r√®glement communal
  const municipality = data.parcelDetails?.municipality || 
    data.searchResult?.number?.match(/<b>([^<]+)<\/b>/)?.[1] || '';
  
  if (municipality) {
    const regulationConstraints = await analyzeCommunalRegulation(municipality, result.parcelInfo.zone);
    result.concreteConstraints.push(...regulationConstraints.constraints);
    result.regulationExtract = regulationConstraints.extract;
  }
  
  // √âtape 3: Synth√®se avec o3/gpt-4o
  result.synthesisText = await generateDeepSynthesis(result, data);
  
  // Calculer la confiance
  result.confidence = calculateConfidence(result);
  
  console.log(`‚úÖ Analyse approfondie termin√©e: ${result.concreteConstraints.length} contraintes concr√®tes extraites`);
  
  return result;
}

/**
 * Analyser le document RDPPF
 */
async function analyzeRDPPFDocument(egrid: string): Promise<{
  constraints: ConcreteConstraint[];
  extract: string;
}> {
  console.log(`üìÑ Analyse RDPPF pour EGRID: ${egrid}`);
  
  try {
    const rdppfUrl = `https://rdppfvs.geopol.ch/extract/pdf?EGRID=${egrid}&LANG=fr`;
    
    // T√©l√©charger et extraire le texte
    const { downloadRdppf } = await import('./rdppfExtractor');
    const pdfPath = await downloadRdppf(rdppfUrl);
    const rdppfText = await extractTextFromPdf(pdfPath);
    
    console.log(`üìñ Texte RDPPF extrait: ${rdppfText.length} caract√®res`);
    
    // Utiliser GPT-4o pour extraire les contraintes concr√®tes
    const prompt = `Tu es un expert en urbanisme suisse. Analyse ce document RDPPF et extrais UNIQUEMENT les valeurs num√©riques concr√®tes et contraintes sp√©cifiques.

DOCUMENT RDPPF:
${rdppfText.substring(0, 15000)}

MISSION: Extraire TOUTES les contraintes avec leurs valeurs EXACTES.

Format JSON STRICT:
{
  "constraints": [
    {
      "category": "Zone",
      "name": "Type de zone",
      "value": "Zone r√©sidentielle R2" // ou autre d√©signation exacte
    },
    {
      "category": "Densit√©",
      "name": "IBUS",
      "value": 0.5,
      "unit": "coefficient"
    },
    {
      "category": "Hauteur",
      "name": "Hauteur maximale",
      "value": 12,
      "unit": "m"
    },
    {
      "category": "Distance",
      "name": "Distance √† la limite",
      "value": 3,
      "unit": "m"
    }
  ],
  "zoneDetails": "Description d√©taill√©e de la zone et ses caract√©ristiques"
}

IMPORTANT:
- Extraire UNIQUEMENT les valeurs pr√©sentes dans le document
- NE JAMAIS inventer ou supposer des valeurs
- Inclure l'article/page source si visible
- √ätre exhaustif dans l'extraction`;

    const response = await callOpenAI({
      model: 'o3-mini',  // Utilisation du mod√®le o3-mini pour extraction pr√©cise
      temperature: 0,
      messages: [
        { role: 'system', content: 'Expert en extraction de donn√©es RDPPF. R√©ponds uniquement en JSON valide.' },
        { role: 'user', content: prompt }
      ],
      max_tokens: 2000
    });
    
    const content = response.choices[0].message?.content || '{}';
    const jsonMatch = content.match(/\{[\s\S]*\}/);
    
    if (!jsonMatch) {
      return { constraints: [], extract: rdppfText.substring(0, 500) };
    }
    
    const parsed = JSON.parse(jsonMatch[0]);
    
    const constraints: ConcreteConstraint[] = (parsed.constraints || []).map((c: any) => ({
      category: c.category || 'Autre',
      name: c.name || 'Non sp√©cifi√©',
      value: c.value,
      unit: c.unit,
      source: 'RDPPF',
      article: c.article,
      confidence: 90
    }));
    
    console.log(`‚úÖ ${constraints.length} contraintes extraites du RDPPF`);
    
    return {
      constraints,
      extract: parsed.zoneDetails || rdppfText.substring(0, 1000)
    };
    
  } catch (error) {
    console.error('Erreur analyse RDPPF:', error);
    return { constraints: [], extract: '' };
  }
}

/**
 * Analyser le r√®glement communal
 */
async function analyzeCommunalRegulation(
  municipality: string, 
  zone: string
): Promise<{
  constraints: ConcreteConstraint[];
  extract: string;
}> {
  console.log(`üìã Analyse r√®glement communal de ${municipality} pour zone ${zone}`);
  
  try {
    const regulationPath = path.join(
      process.cwd(), 
      'reglements', 
      `VS_${municipality}_R√®glement des constructions.pdf`
    );
    
    // V√©rifier si le fichier existe
    await fs.access(regulationPath);
    
    // Extraire le texte
    const regulationText = await extractTextFromPdf(regulationPath);
    console.log(`üìñ Texte r√®glement extrait: ${regulationText.length} caract√®res`);
    
    // Rechercher les sections pertinentes pour la zone
    const zoneSection = extractZoneSection(regulationText, zone);
    
    // Utiliser GPT-4o pour extraire les contraintes sp√©cifiques √† la zone
    const prompt = `Tu es un expert en r√®glements d'urbanisme suisses. Analyse ce r√®glement communal et extrais les contraintes SP√âCIFIQUES pour la zone "${zone}".

R√àGLEMENT COMMUNAL DE ${municipality.toUpperCase()}:
${zoneSection || regulationText.substring(0, 15000)}

ZONE CIBLE: ${zone}

MISSION: Extraire TOUTES les contraintes avec leurs valeurs EXACTES pour cette zone sp√©cifique.

Format JSON STRICT:
{
  "constraints": [
    {
      "category": "Densit√©",
      "name": "Indice d'utilisation U",
      "value": 0.4,
      "unit": "coefficient",
      "article": "Art. 23"
    },
    {
      "category": "Densit√©", 
      "name": "IBUS",
      "value": 0.6,
      "unit": "coefficient",
      "article": "Art. 24"
    },
    {
      "category": "Hauteur",
      "name": "Hauteur maximale au fa√Æte",
      "value": 10,
      "unit": "m",
      "article": "Art. 25"
    },
    {
      "category": "Hauteur",
      "name": "Nombre d'√©tages maximum",
      "value": 3,
      "unit": "√©tages",
      "article": "Art. 25"
    },
    {
      "category": "Distance",
      "name": "Distance minimale √† la limite",
      "value": 4,
      "unit": "m",
      "article": "Art. 26"
    },
    {
      "category": "Stationnement",
      "name": "Places par logement",
      "value": 1.5,
      "unit": "places/logement",
      "article": "Art. 45"
    },
    {
      "category": "Espaces verts",
      "name": "Surface verte minimale",
      "value": 30,
      "unit": "%",
      "article": "Art. 50"
    }
  ],
  "zoneSpecificRules": "R√®gles sp√©cifiques suppl√©mentaires pour cette zone..."
}

CRIT√àRES:
- Extraire UNIQUEMENT les valeurs pour la zone ${zone}
- Inclure TOUS les articles pertinents
- NE JAMAIS inventer de valeurs
- Si une valeur n'est pas sp√©cifi√©e, ne pas l'inclure`;

    const response = await callOpenAI({
      model: 'o3',  // Utilisation du mod√®le o3 complet pour analyse approfondie du r√®glement
      temperature: 0,
      messages: [
        { role: 'system', content: 'Expert en extraction de r√®glements communaux suisses. R√©ponds uniquement en JSON valide.' },
        { role: 'user', content: prompt }
      ],
      max_tokens: 2000
    });
    
    const content = response.choices[0].message?.content || '{}';
    const jsonMatch = content.match(/\{[\s\S]*\}/);
    
    if (!jsonMatch) {
      return { constraints: [], extract: '' };
    }
    
    const parsed = JSON.parse(jsonMatch[0]);
    
    const constraints: ConcreteConstraint[] = (parsed.constraints || []).map((c: any) => ({
      category: c.category || 'Autre',
      name: c.name || 'Non sp√©cifi√©',
      value: c.value,
      unit: c.unit,
      source: `R√®glement ${municipality}`,
      article: c.article,
      confidence: 85
    }));
    
    console.log(`‚úÖ ${constraints.length} contraintes extraites du r√®glement communal`);
    
    return {
      constraints,
      extract: parsed.zoneSpecificRules || zoneSection?.substring(0, 1000) || ''
    };
    
  } catch (error) {
    console.error('Erreur analyse r√®glement communal:', error);
    return { constraints: [], extract: '' };
  }
}

/**
 * Extraire la section pertinente pour une zone
 */
function extractZoneSection(text: string, zone: string): string | null {
  const lines = text.split('\n');
  const zoneKeywords = zone.toLowerCase().split(' ');
  
  let inZoneSection = false;
  let sectionText = '';
  let linesSinceMatch = 0;
  
  for (const line of lines) {
    const lineLower = line.toLowerCase();
    
    // Chercher le d√©but de la section
    if (!inZoneSection) {
      const hasAllKeywords = zoneKeywords.every(kw => 
        lineLower.includes(kw) || lineLower.includes(kw.replace(/[√©√®√™]/g, 'e'))
      );
      
      if (hasAllKeywords) {
        inZoneSection = true;
        sectionText = line + '\n';
        linesSinceMatch = 0;
      }
    } else {
      // Continuer √† collecter la section
      sectionText += line + '\n';
      linesSinceMatch++;
      
      // Arr√™ter apr√®s 200 lignes ou si on trouve une nouvelle zone
      if (linesSinceMatch > 200 || 
          (lineLower.includes('zone') && !zoneKeywords.some(kw => lineLower.includes(kw)))) {
        break;
      }
    }
  }
  
  return sectionText || null;
}

/**
 * G√©n√©rer une synth√®se approfondie
 */
async function generateDeepSynthesis(
  result: DeepAnalysisResult,
  originalData: ComprehensiveParcelAnalysis
): Promise<string> {
  console.log('üß† G√©n√©ration synth√®se approfondie avec o3/gpt-4o...');
  
  const constraintsSummary = result.concreteConstraints.map(c => 
    `- ${c.category} / ${c.name}: ${c.value}${c.unit ? ' ' + c.unit : ''} ${c.article ? `(${c.article})` : ''}`
  ).join('\n');
  
  const prompt = `Tu es un expert urbaniste consultant pour un projet √† ${result.parcelInfo.municipality}.

PARCELLE ANALYS√âE:
- Num√©ro: ${result.parcelInfo.number}
- EGRID: ${result.parcelInfo.egrid}
- Surface: ${result.parcelInfo.surface} m¬≤
- Zone: ${result.parcelInfo.zone}
- Commune: ${result.parcelInfo.municipality}

CONTRAINTES CONCR√àTES EXTRAITES:
${constraintsSummary}

EXTRAIT RDPPF:
${result.rdppfExtract?.substring(0, 1000)}

EXTRAIT R√àGLEMENT COMMUNAL:
${result.regulationExtract?.substring(0, 1000)}

MISSION:
R√©dige une analyse CONVERSATIONNELLE et CONCR√àTE pour le ma√Ætre d'ouvrage.

INSTRUCTIONS STRICTES:
1. Utiliser TOUTES les valeurs num√©riques extraites
2. √ätre ULTRA-SP√âCIFIQUE avec les contraintes de la parcelle
3. Calculer les surfaces constructibles possibles
4. Mentionner les articles de r√©f√©rence
5. Proposer des sc√©narios de construction concrets
6. Identifier les points d'attention critiques
7. Sugg√©rer les optimisations possibles

Le texte doit √™tre fluide, professionnel et inclure TOUTES les valeurs concr√®tes.
Environ 600-800 mots.`;

  const response = await callOpenAI({
    model: 'o3',  // Utilisation du mod√®le o3 pour synth√®se avec raisonnement avanc√©
    temperature: 0.1,
    messages: [
      { 
        role: 'system', 
        content: 'Expert urbaniste suisse. Fournis une analyse d√©taill√©e et concr√®te avec toutes les valeurs num√©riques. Utilise un raisonnement approfondi pour calculer les surfaces constructibles et proposer des sc√©narios.' 
      },
      { role: 'user', content: prompt }
    ],
    max_tokens: 2500
  });
  
  return response.choices[0].message?.content || 'Analyse non disponible';
}

/**
 * Calculer la confiance de l'analyse
 */
function calculateConfidence(result: DeepAnalysisResult): number {
  let score = 0;
  
  // Points pour les donn√©es de base
  if (result.parcelInfo.egrid) score += 10;
  if (result.parcelInfo.surface > 0) score += 10;
  if (result.parcelInfo.zone !== '√Ä d√©terminer') score += 20;
  
  // Points pour les contraintes extraites
  const hasIBUS = result.concreteConstraints.some(c => c.name.toLowerCase().includes('ibus'));
  const hasHeight = result.concreteConstraints.some(c => c.category === 'Hauteur');
  const hasDistance = result.concreteConstraints.some(c => c.category === 'Distance');
  
  if (hasIBUS) score += 20;
  if (hasHeight) score += 15;
  if (hasDistance) score += 15;
  
  // Points pour le nombre de contraintes
  score += Math.min(result.concreteConstraints.length * 2, 20);
  
  return Math.min(score, 95);
}