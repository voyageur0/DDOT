import OpenAI from 'openai';
import { exponentialRetry } from './retry';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function chatCompletion(
  zone: string,
  reglement: string,
  parcelLabel: string,
): Promise<string> {
  // Fonction helper pour choisir le mod√®le avec fallback
  const getModel = async (): Promise<string> => {
    try {
      // Test rapide avec o3
      await openai.chat.completions.create({
        model: 'o3',
        messages: [{ role: 'user', content: 'test' }],
        max_tokens: 1
      });
      return 'o3';
    } catch (error: any) {
      if (error.status === 404 || error.message?.includes('o3')) {
        return 'o3-mini';
      }
      throw error;
    }
  };

  const selectedModel = await getModel();
  console.log(`ü§ñ Mod√®le s√©lectionn√© pour analyse simple: ${selectedModel}`);
  
  const response = await exponentialRetry(async () => {
    const completion = await openai.chat.completions.create({
      model: selectedModel,
      messages: [
        {
          role: 'system',
          content:
            'Tu es un juriste sp√©cialis√© en droit de la construction valaisan. R√©ponds de fa√ßon concise et exhaustive, en fran√ßais.',
        },
        {
          role: 'user',
          content: `ZONE: ${zone}\n\nR√àGLEMENT:\n${reglement}\n\nQUESTION: Quelles contraintes s'appliquent √† la parcelle ${parcelLabel} ?`,
        },
      ],
    });
    return completion.choices[0].message.content ?? '';
  });
  return response;
}

/**
 * Analyse approfondie avec recherche multi-√©tapes (simulation de la recherche approfondie ChatGPT)
 * Utilise plusieurs appels pour une analyse compl√®te et d√©taill√©e
 * Essaie d'abord o3, puis bascule sur o3-mini si non disponible
 */
export async function deepSearchAnalysis(
  zone: string,
  reglement: string,
  parcelLabel: string,
  additionalContext?: string
): Promise<string> {
  console.log('üîç D√©marrage de l\'analyse approfondie pour', parcelLabel);
  
  // Fonction helper pour choisir le mod√®le avec fallback
  const getModel = async (): Promise<string> => {
    try {
      // Test rapide avec o3
      await openai.chat.completions.create({
        model: 'o3',
        messages: [{ role: 'user', content: 'test' }],
        max_tokens: 1
      });
      console.log('‚úÖ Mod√®le o3 disponible');
      return 'o3';
    } catch (error: any) {
      if (error.status === 404 || error.message?.includes('o3')) {
        console.log('‚ö†Ô∏è Mod√®le o3 non disponible, utilisation de o3-mini');
        return 'o3-mini';
      }
      throw error;
    }
  };
  
  try {
    const selectedModel = await getModel();
    console.log(`ü§ñ Mod√®le s√©lectionn√©: ${selectedModel}`);
    
    // √âtape 1: Analyse pr√©liminaire du zonage
    const zoningAnalysis = await exponentialRetry(async () => {
      const completion = await openai.chat.completions.create({
        model: selectedModel,
        messages: [
          {
            role: 'system',
            content: 'Tu es un expert en urbanisme valaisan. Analyse en d√©tail les implications du zonage.',
          },
          {
            role: 'user',
            content: `Analyse approfondie du zonage "${zone}" en Valais. Explique toutes les contraintes, possibilit√©s et restrictions de ce type de zone.`,
          },
        ],
      });
      return completion.choices[0].message.content ?? '';
    });

    // √âtape 2: Analyse d√©taill√©e du r√®glement
    const regulationAnalysis = await exponentialRetry(async () => {
      const completion = await openai.chat.completions.create({
        model: selectedModel,
        messages: [
          {
            role: 'system',
            content: 'Tu es un juriste sp√©cialis√© en droit de la construction. Analyse chaque article du r√®glement.',
          },
          {
            role: 'user',
            content: `Analyse article par article ce r√®glement communal:\n\n${reglement}\n\nIdentifie tous les points critiques, exceptions, et contraintes sp√©cifiques.`,
          },
        ],
      });
      return completion.choices[0].message.content ?? '';
    });

    // √âtape 3: Synth√®se crois√©e et recommandations
    const contextSection = additionalContext ? `CONTEXTE ADDITIONNEL: ${additionalContext}\n\n` : '';
    const prompt = `PARCELLE: ${parcelLabel}
ZONE: ${zone}
${contextSection}ANALYSE DU ZONAGE:
${zoningAnalysis}

ANALYSE DU R√àGLEMENT:
${regulationAnalysis}

Mission: Synth√©tise ces analyses pour fournir:
1. Un r√©sum√© ex√©cutif des contraintes principales
2. Les opportunit√©s de d√©veloppement
3. Les risques juridiques identifi√©s
4. Des recommandations concr√®tes pour le propri√©taire
5. Les d√©marches administratives n√©cessaires

Sois pr√©cis, actionnable et structure ta r√©ponse clairement.`;

    const finalSynthesis = await exponentialRetry(async () => {
      const completion = await openai.chat.completions.create({
        model: selectedModel,
        messages: [
          {
            role: 'system',
            content: 'Tu es un consultant expert en d√©veloppement immobilier valaisan. Fournis une synth√®se actionnable et des recommandations pr√©cises.',
          },
          {
            role: 'user',
            content: prompt,
          },
        ],
      });
      return completion.choices[0].message.content ?? '';
    });

    console.log('‚úÖ Analyse approfondie termin√©e pour', parcelLabel, 'avec mod√®le', selectedModel);
    return finalSynthesis;

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'analyse approfondie:', error);
    // Fallback vers l'analyse simple
    return await chatCompletion(zone, reglement, parcelLabel);
  }
} 