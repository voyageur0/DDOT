import { Router, Request, Response, NextFunction } from 'express';
import { performance } from 'perf_hooks';
import axios from 'axios';
import { performComprehensiveAnalysis, performQuickAnalysis } from '../lib/parcelAnalysisOrchestrator';
import { callOpenAI } from '../utils/openai';
import { performStructuredAnalysis, type AnalysisResult } from '../lib/aiAnalysisEngine';
import { performAdvancedAnalysis, type AdvancedAnalysisResult } from '../lib/advancedAIAnalysisEngine';
import { performConversationalAnalysis, answerSpecificQuestion } from '../lib/conversationalAIAnalysis';
import { formatContext } from '../engine/contextFormatterWithLabels';
import { calculateFeasibility } from '../services/feasibilityCalculatorWithLabels';
// import { normalizeConstraints } from '../i18n/constraintNormalizer'; // TODO: Fix apr√®s compilation

const router = Router();

// Cl√© OpenAI depuis variable d'environnement uniquement
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

if (!OPENAI_API_KEY) {
  console.error('‚ùå ERREUR CRITIQUE: OPENAI_API_KEY manquante dans les variables d\'environnement');
  console.error('üìù Cr√©ez un fichier .env avec OPENAI_API_KEY=sk-votre-cle-api');
}

// Test de la cl√© API au d√©marrage
async function testOpenAIConnection() {
  if (!OPENAI_API_KEY) {
    console.log('‚ö†Ô∏è OpenAI d√©sactiv√© - cl√© API manquante');
    return false;
  }

  try {
    const response = await axios.get('https://api.openai.com/v1/models', {
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      timeout: 10000
    });
    
    console.log('‚úÖ OpenAI connect√© avec succ√®s');
    return true;
  } catch (error: any) {
    console.error('‚ùå Erreur de connexion OpenAI:', error.response?.status, error.response?.statusText);
    if (error.response?.status === 401) {
      console.error('üîë Cl√© API OpenAI invalide ou expir√©e');
    }
    return false;
  }
}

// Test au d√©marrage du module
testOpenAIConnection();

// Nouvelle fonction d'appel OpenAI avec analyse approfondie
async function callOpenAIWithDeepSearch(comprehensiveData: any): Promise<string> {
  console.log('üöÄ üß† D√©marrage analyse approfondie avec mod√®le gpt-4.1');
  
  try {
    const parcelLabel = comprehensiveData.parcelDetails?.number ? `Parcelle ${comprehensiveData.parcelDetails.number}` : comprehensiveData.searchQuery;

    // Le message syst√®me inclut directement notre tableau structur√©
    const enrichedPrompt = `${comprehensiveData.formattedForAI}

---

INSTRUCTION STRICTE : Utilise UNIQUEMENT les donn√©es ci-dessus pour remplir les 8 th√®mes obligatoires.
Si une donn√©e manque, √©cris "Non sp√©cifi√© dans les documents analys√©s" mais UTILISE TOUTES les contraintes extraites.

Exemples concrets trouv√©s dans les documents :
- STATIONNEMENT : Si tu vois "1 place par 65 m¬≤", utilise cette r√®gle exacte
- GABARITS : Si tu vois "hauteur max 12 m", utilise cette valeur exacte  
- ZONES : Si tu vois "zone d'habitation R2", utilise cette d√©signation exacte

STRUCTURE OBLIGATOIRE (9 th√®mes num√©rot√©s) :
1. **Identification** : Parcelle, commune, coordonn√©es
2. **Destination de zone** : Type exact depuis RDPPF/r√®glement
3. **Indice d'utilisation (IBUS)** : Valeur exacte si mentionn√©e
4. **Densit√© constructible** : Surfaces constructibles calcul√©es selon les r√®gles valaisannes (indices U et IBUS)
5. **Gabarits & reculs** : Hauteurs et distances exactes
6. **Toiture** : Contraintes exactes (pente, mat√©riaux)
7. **Stationnement** : R√®gles exactes (nombre places/m¬≤)
8. **Espaces de jeux/d√©tente** : Obligations exactes si mentionn√©es
9. **Prescriptions architecturales** : Contraintes exactes de style/mat√©riaux`;

    const analysisResponse = await callOpenAI({
      model: 'gpt-4.1',
      temperature: 0,
      messages: [
        { role: 'system', content: 'Tu es un expert urbaniste suisse. En te basant STRICTEMENT sur les donn√©es fournies, r√©dige une synth√®se vulgaris√©e √† destination d\'un ma√Ætre d\'ouvrage.' },
        { role: 'user', content: enrichedPrompt }
      ],
      max_tokens: 1500
    });

    const analysis = analysisResponse.choices[0].message?.content || '';

    console.log(`‚úÖ Analyse approfondie termin√©e: ${analysis.length} caract√®res`);
    return analysis;

  } catch (error: any) {
    console.error('üí• ERREUR ANALYSE APPROFONDIE:', error.message);
    throw new Error(`Erreur analyse approfondie: ${error.message}`);
  }
}

// Fonction d'appel √† OpenAI SIMPLIFI√âE - pour compatibilit√© avec l'ancien syst√®me
async function callOpenAISimple(userQuery: string, communeData: any, parcelData: any): Promise<string> {
  console.log('ü§ñ Appel OpenAI avec connaissances de base');
  
  try {
    const response = await axios.post('https://api.openai.com/v1/chat/completions', {
      model: 'gpt-4.1',
      messages: [
        {
          role: 'system',
          content: `Tu es un expert urbaniste sp√©cialis√© dans les r√®glements du canton du Valais, Suisse. 

Utilise UNIQUEMENT tes vraies connaissances des r√®glements valaisans.
Baser l'analyse sur les vrais principes d'urbanisme du Valais.
Mentionner les vraies r√©f√©rences l√©gales (LAT, LCAT, r√®glements communaux).`
        },
        {
          role: 'user',
          content: userQuery
        }
      ],
      max_tokens: 3000,
      temperature: 0.1
    }, {
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      timeout: 30000
    });

    return response.data.choices[0].message.content;
    
  } catch (error: any) {
    console.error('üí• ERREUR OPENAI:', error.response?.data || error.message);
    throw new Error(`Erreur OpenAI: ${error.response?.data?.error?.message || error.message}`);
  }
}

router.post('/ia-constraints', async (req, res, next) => {
  try {
    console.log('üìû Requ√™te IA re√ßue:', req.body);
    
    const { coordinates, address, commune, parcelId, searchQuery, analysisType = 'complete', useConversational = true } = req.body;

    // NOUVEAU WORKFLOW: Recherche automatis√©e compl√®te
    if (searchQuery) {
      console.log(`üîç D√©marrage analyse automatis√©e pour: "${searchQuery}"`);
      
      const t0 = performance.now();
      
      try {
        // Choisir le type d'analyse
        const analysisFunction = analysisType === 'quick' ? performQuickAnalysis : performComprehensiveAnalysis;
        
        // Effectuer la recherche et collecte automatis√©e
        const comprehensiveData = await analysisFunction(searchQuery);
        
        if (comprehensiveData.completeness === 0 || !comprehensiveData.formattedForAI) {
          return res.status(404).json({ 
            error: 'Parcelle non trouv√©e ou donn√©es insuffisantes',
            details: comprehensiveData.errors.join('; '),
            searchQuery,
            completeness: comprehensiveData.completeness
          });
        }
        
        console.log(`üìä Donn√©es collect√©es (${comprehensiveData.completeness}% compl√©tude) - Lancement analyse IA...`);
        
        // Choisir le type d'analyse IA
        let analysisResult;
        let analysisMode;
        
        if (useConversational) {
          // Utiliser le nouveau syst√®me d'analyse avec o3
          if (comprehensiveData.searchResult?.egrid) {
            try {
              const { analyzeParcelWithO3 } = await import('../lib/o3ReasoningAnalysis');
              const municipality = comprehensiveData.parcelDetails?.municipality || 
                comprehensiveData.searchResult?.number?.match(/<b>([^<]+)<\/b>/)?.[1]?.replace(/^\d{4}\s+/, '') || 
                'V√©troz';
              
              // Extraire le num√©ro de parcelle sans l'adresse
              const parcelNumber = comprehensiveData.parcelDetails?.number || 
                comprehensiveData.searchResult?.number?.match(/(\d+)\s*\(/)?.[1] ||
                comprehensiveData.searchResult?.number?.match(/parcelle\s+(\d+)/i)?.[1];
              
              console.log(`üß† Analyse O3 pour EGRID ${comprehensiveData.searchResult.egrid}, parcelle n¬∞${parcelNumber}`);
              const o3Result = await analyzeParcelWithO3(comprehensiveData.searchResult.egrid, municipality, parcelNumber);
              
              if (o3Result.error) {
                throw new Error(o3Result.error);
              }
              
              analysisResult = {
                analysis: o3Result.analysis,
                confidence: o3Result.confidence,
                sources: o3Result.sources,
                model: o3Result.model,
                reasoningEffort: o3Result.reasoningEffort
              };
              analysisMode = 'o3-reasoning';
            } catch (error) {
              console.error('Erreur analyse O3, fallback sur conversationnel:', error);
              // Si l'analyse O3 √©choue, continuer avec l'analyse conversationnelle
              const conversationalResult = await performConversationalAnalysis(comprehensiveData);
              
              analysisResult = {
                analysis: conversationalResult.analysis,
                additionalInsights: conversationalResult.additionalInsights,
                confidence: conversationalResult.confidence,
                sources: conversationalResult.sources,
                webSearchResults: conversationalResult.webSearchResults
              };
              analysisMode = 'conversational';
            }
          } else {
            // Pas d'EGRID, utiliser l'analyse conversationnelle
            console.log('ü§ñ Mode conversationnel (pas d\'EGRID)...');
            const conversationalResult = await performConversationalAnalysis(comprehensiveData);
            
            analysisResult = {
              analysis: conversationalResult.analysis,
              additionalInsights: conversationalResult.additionalInsights,
              confidence: conversationalResult.confidence,
              sources: conversationalResult.sources,
              webSearchResults: conversationalResult.webSearchResults
            };
            analysisMode = 'conversational';
          }
        } else {
          // Ancienne analyse structur√©e (pour compatibilit√©)
          console.log('üìä Mode structur√© - Analyse avec contraintes format√©es...');
          const advancedAnalysis = await performAdvancedAnalysis(comprehensiveData);
          analysisResult = advancedAnalysis;
          analysisMode = 'structured';
        }
        
        // Pour le mode structur√© uniquement, normaliser les contraintes
        if (analysisMode === 'structured' && analysisResult.constraints && analysisResult.constraints.length > 0) {
          // Import dynamique pour √©viter les probl√®mes de compilation
          const { truncateSentence } = await import('../i18n/summarizer');
          
          // Normaliser chaque contrainte
          for (const constraint of analysisResult.constraints) {
            // Tronquer le titre et la description √† 12 mots
            constraint.title = await truncateSentence(constraint.title || '', 12);
            constraint.description = await truncateSentence(constraint.description || '', 12);
            
            // Normaliser la s√©v√©rit√©
            if (typeof constraint.severity === 'string') {
              const sev = constraint.severity.toLowerCase();
              if (sev === 'high' || sev === '√©lev√©' || sev === 'critique') {
                constraint.severity = 'high';
              } else if (sev === 'low' || sev === 'faible' || sev === 'info') {
                constraint.severity = 'low';
              } else {
                constraint.severity = 'medium';
              }
            }
            
            // Ajouter une cat√©gorie si elle manque
            if (!constraint.category) {
              const combined = `${constraint.title} ${constraint.description}`.toLowerCase();
              if (combined.includes('hauteur') || combined.includes('gabarit')) {
                constraint.category = 'Gabarits & reculs';
              } else if (combined.includes('stationnement') || combined.includes('parking')) {
                constraint.category = 'Stationnement';
              } else if (combined.includes('vert') || combined.includes('jardin')) {
                constraint.category = 'Espaces de jeux / d√©tente';
              } else if (combined.includes('densit√©') || combined.includes('ibus')) {
                constraint.category = 'Densit√© constructible';
              } else if (combined.includes('toiture') || combined.includes('architecture')) {
                constraint.category = 'Prescriptions architecturales';
              } else {
                constraint.category = 'Autres contraintes';
              }
            }
          }
          
          // Trier par s√©v√©rit√© (critique d'abord)
          analysisResult.constraints.sort((a: any, b: any) => {
            const severityOrder: any = { high: 3, medium: 2, low: 1 };
            return severityOrder[b.severity] - severityOrder[a.severity];
          });
        }
        
        // Note: La normalisation est maintenant faite par normalizeConstraints()
        
        // Si on a des donn√©es de faisabilit√©, les normaliser aussi (mode structur√© uniquement)
        if (analysisMode === 'structured' && comprehensiveData.parcelDetails) {
          const feasibilityData = await calculateFeasibility(comprehensiveData);
          if (feasibilityData && feasibilityData.zone_label) {
            analysisResult.zoneInfo = analysisResult.zoneInfo || {};
            analysisResult.zoneInfo.zone_label = feasibilityData.zone_label;
            analysisResult.zoneInfo.zone_label_long = feasibilityData.zone_label_long;
          }
        }
        
        const elapsedMs = performance.now() - t0;
        console.log(`‚úÖ Analyse automatis√©e compl√®te termin√©e en ${Math.round(elapsedMs)}ms`);

        // Pr√©parer la r√©ponse selon le mode
        if (analysisMode === 'o3-reasoning') {
          // Mode O3 avec raisonnement
          return res.json({
            data: {
              analysis: analysisResult.analysis,
              parcel: {
                address: comprehensiveData.searchResult?.number || comprehensiveData.searchQuery,
                zone: comprehensiveData.rdppfData?.zoneAffectation?.designation || 
                      comprehensiveData.buildingZone?.typ_kt || 
                      'Zone √† d√©terminer',
                surface: comprehensiveData.parcelDetails?.surface,
                egrid: comprehensiveData.searchResult?.egrid
              }
            },
            metadata: {
              confidence: analysisResult.confidence,
              completeness: comprehensiveData.completeness,
              processingTime: comprehensiveData.processingTime,
              elapsedMs: Math.round(elapsedMs),
              sources: analysisResult.sources,
              model: analysisResult.model,
              reasoningEffort: analysisResult.reasoningEffort
            },
            searchQuery,
            analysisType: 'o3-reasoning',
            source: `Analyse avec mod√®le de raisonnement ${analysisResult.model}`
          });
        } else if (analysisMode === 'conversational') {
          // Mode conversationnel - R√©ponse naturelle
          return res.json({
            data: {
              analysis: analysisResult.analysis,
              additionalInsights: analysisResult.additionalInsights,
              parcel: {
                address: comprehensiveData.searchResult?.number || comprehensiveData.searchQuery,
                zone: comprehensiveData.rdppfData?.zoneAffectation?.designation || 
                      comprehensiveData.buildingZone?.typ_kt || 
                      'Zone √† d√©terminer',
                surface: comprehensiveData.parcelDetails?.surface
              }
            },
            metadata: {
              confidence: analysisResult.confidence,
              completeness: comprehensiveData.completeness,
              processingTime: comprehensiveData.processingTime,
              elapsedMs: Math.round(elapsedMs),
              sources: analysisResult.sources,
              webSearchResults: analysisResult.webSearchResults
            },
            searchQuery,
            analysisType: 'conversational',
            source: 'Analyse conversationnelle enrichie avec recherche web'
          });
        } else {
          // Mode structur√© - Compatibilit√© avec l'ancien syst√®me
          let mainZone = 'Zone √† d√©terminer';
          let zoneSurface = '';
          
          console.log('üîç Extraction de la zone...');
          console.log('  - rdppfData:', comprehensiveData.rdppfData);
          console.log('  - rdppfConstraints:', comprehensiveData.rdppfConstraints?.length || 0, 'contraintes');
          console.log('  - analysisResult.zoneInfo:', analysisResult.zoneInfo);
          
          // V√©rifier dans rdppfData
          if (comprehensiveData.rdppfData?.zoneAffectation?.designation) {
            mainZone = comprehensiveData.rdppfData.zoneAffectation.designation;
            if (comprehensiveData.rdppfData.zoneAffectation.surface) {
              zoneSurface = `${comprehensiveData.rdppfData.zoneAffectation.surface} m¬≤`;
            }
            console.log('‚úÖ Zone trouv√©e dans rdppfData:', mainZone, zoneSurface);
          }
          // Sinon chercher dans les contraintes RDPPF
          else if (comprehensiveData.rdppfConstraints?.length > 0) {
            const zoneConstraint = comprehensiveData.rdppfConstraints.find(c => 
              c.theme === 'Destination de zone' || c.rule?.includes('Zone r√©sidentielle')
            );
            if (zoneConstraint) {
              mainZone = zoneConstraint.rule;
              // Extraire la surface si pr√©sente dans la r√®gle
              const surfaceMatch = zoneConstraint.rule.match(/(\d+)\s*m¬≤/);
              if (surfaceMatch) {
                zoneSurface = surfaceMatch[0];
              }
              console.log('‚úÖ Zone trouv√©e dans contraintes RDPPF:', mainZone, zoneSurface);
            }
          }
          // Sinon utiliser l'analyse avanc√©e
          else if (analysisResult.zoneInfo?.mainZone) {
            mainZone = analysisResult.zoneInfo.mainZone;
            console.log('‚úÖ Zone trouv√©e dans analyse avanc√©e:', mainZone);
          }
          
          console.log('üìç Zone finale:', mainZone, zoneSurface);
          
          return res.json({ 
            data: {
              constraints: analysisResult.constraints,
              analysis: analysisResult,
              parcel: {
                address: comprehensiveData.searchResult?.number || comprehensiveData.searchQuery,
                zone: mainZone,
                zone_surface: zoneSurface
              },
              summary: analysisResult.summary
            },
            metadata: {
              confidence: analysisResult.confidence,
              completeness: comprehensiveData.completeness,
              processingTime: comprehensiveData.processingTime,
              elapsedMs: Math.round(elapsedMs)
            },
            searchQuery,
            analysisType: 'structured',
            source: 'Analyse structur√©e avec contraintes cat√©goris√©es'
          });
        }
        
      } catch (error: any) {
        console.error('‚ùå Erreur analyse automatis√©e:', error.message);
        return res.status(500).json({ 
          error: 'Erreur lors de l\'analyse automatis√©e',
          details: error.message,
          searchQuery
        });
      }
    }
    
    // ANCIEN WORKFLOW: Analyse basique pour compatibilit√©
    if (!coordinates && !address) {
      return res.status(400).json({ 
        error: 'Param√®tres manquants', 
        message: 'Fournissez soit "searchQuery" pour l\'analyse automatis√©e, soit "coordinates" ou "address" pour l\'analyse basique'
      });
    }

    try {
      console.log(`ü§ñ Lancement analyse basique pour ${commune || 'la commune'}...`);
      
      const t0 = performance.now();
      
      const communeData = {
        commune: commune || 'Commune √† identifier',
        coordinates: coordinates,
        address: address
      };
      
      const parcelData = {
        address: address || coordinates,
        parcelId: parcelId || 'Non sp√©cifi√©',
        coordinates: coordinates
      };
      
      const userQuery = `Analyse cette parcelle cadastrale au Valais, Suisse. Utilise tes vraies connaissances sur l'urbanisme valaisan.
      
      Commune: ${commune || '√Ä identifier'}
      Adresse: ${address || '√Ä d√©terminer'}
      Coordonn√©es: ${coordinates || 'Non fourni'}
      Parcelle: ${parcelId || '√Ä identifier'}`;
      
      const openaiAnalysis = await callOpenAISimple(userQuery, communeData, parcelData);
      const elapsedMs = performance.now() - t0;

      console.log(`‚úÖ Analyse basique termin√©e en ${Math.round(elapsedMs)}ms`);

      res.json({ 
        constraints: openaiAnalysis, 
        elapsedMs: Math.round(elapsedMs),
        commune: commune || '√Ä identifier',
        analysisType: 'basic',
        source: 'OpenAI GPT-4.1 avec connaissances de base'
      });
      
    } catch (openaiError: any) {
      console.error('‚ùå Erreur OpenAI:', openaiError.message);
      
      res.status(500).json({ 
        error: 'Service d\'analyse temporairement indisponible',
        message: 'OpenAI est requis pour l\'analyse. V√©rifiez votre cl√© API.',
        technical_error: openaiError.message
      });
    }
    
  } catch (err) {
    console.error('‚ùå Erreur dans l\'API IA:', err);
    next(err);
  }
});

export default router; 