import express, { Router } from 'express';
import { performance } from 'perf_hooks';
import axios from 'axios';
import { performComprehensiveAnalysis, performQuickAnalysis } from '../lib/parcelAnalysisOrchestrator';
import { callOpenAI } from '../utils/openai';

const router = Router();

// Cl√© OpenAI depuis variable d'environnement uniquement
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

if (!OPENAI_API_KEY) {
  console.error('‚ùå ERREUR CRITIQUE: OPENAI_API_KEY manquante dans les variables d\'environnement');
  console.error('üìù Cr√©ez un fichier .env avec OPENAI_API_KEY=sk-votre-cle-api');
}

// Test de la cl√© API au d√©marrage
async function testOpenAIConnection() {
  if (!OPENAI_API_KEY) {
    console.log('‚ö†Ô∏è OpenAI d√©sactiv√© - cl√© API manquante');
    return false;
  }

  try {
    const response = await axios.get('https://api.openai.com/v1/models', {
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      timeout: 10000
    });
    
    console.log('‚úÖ OpenAI connect√© avec succ√®s');
    return true;
  } catch (error: any) {
    console.error('‚ùå Erreur de connexion OpenAI:', error.response?.status, error.response?.statusText);
    if (error.response?.status === 401) {
      console.error('üîë Cl√© API OpenAI invalide ou expir√©e');
    }
    return false;
  }
}

// Test au d√©marrage du module
testOpenAIConnection();

// Nouvelle fonction d'appel OpenAI avec analyse approfondie
async function callOpenAIWithDeepSearch(comprehensiveData: any): Promise<string> {
  console.log('üöÄ üß† D√©marrage analyse approfondie avec mod√®le gpt-4o-mini');
  
  try {
    const parcelLabel = comprehensiveData.parcelDetails?.number ? `Parcelle ${comprehensiveData.parcelDetails.number}` : comprehensiveData.searchQuery;

    // Le message syst√®me inclut directement notre tableau structur√©
    const enrichedPrompt = `${comprehensiveData.formattedForAI}

---

INSTRUCTION STRICTE : Utilise UNIQUEMENT les donn√©es ci-dessus pour remplir les 8 th√®mes obligatoires.
Si une donn√©e manque, √©cris "Non sp√©cifi√© dans les documents analys√©s" mais UTILISE TOUTES les contraintes extraites.

Exemples concrets trouv√©s dans les documents :
- STATIONNEMENT : Si tu vois "1 place par 65 m¬≤", utilise cette r√®gle exacte
- GABARITS : Si tu vois "hauteur max 12 m", utilise cette valeur exacte  
- ZONES : Si tu vois "zone d'habitation R2", utilise cette d√©signation exacte

STRUCTURE OBLIGATOIRE (8 th√®mes num√©rot√©s) :
1. **Identification** : Parcelle, commune, coordonn√©es
2. **Destination de zone** : Type exact depuis RDPPF/r√®glement
3. **Indice d'utilisation (IBUS)** : Valeur exacte si mentionn√©e
4. **Gabarits & reculs** : Hauteurs et distances exactes
5. **Toiture** : Contraintes exactes (pente, mat√©riaux)
6. **Stationnement** : R√®gles exactes (nombre places/m¬≤)
7. **Espaces de jeux/d√©tente** : Obligations exactes si mentionn√©es
8. **Prescriptions architecturales** : Contraintes exactes de style/mat√©riaux`;

    const analysisResponse = await callOpenAI({
      model: 'gpt-4o-mini',
      temperature: 0,
      messages: [
        { role: 'system', content: 'Tu es un expert urbaniste suisse. En te basant STRICTEMENT sur les donn√©es fournies, r√©dige une synth√®se vulgaris√©e √† destination d\'un ma√Ætre d\'ouvrage.' },
        { role: 'user', content: enrichedPrompt }
      ],
      max_tokens: 1500
    });

    const analysis = analysisResponse.choices[0].message?.content || '';

    console.log(`‚úÖ Analyse approfondie termin√©e: ${analysis.length} caract√®res`);
    return analysis;

  } catch (error: any) {
    console.error('üí• ERREUR ANALYSE APPROFONDIE:', error.message);
    throw new Error(`Erreur analyse approfondie: ${error.message}`);
  }
}

// Fonction d'appel √† OpenAI SIMPLIFI√âE - pour compatibilit√© avec l'ancien syst√®me
async function callOpenAISimple(userQuery: string, communeData: any, parcelData: any): Promise<string> {
  console.log('ü§ñ Appel OpenAI avec connaissances de base');
  
  try {
    const response = await axios.post('https://api.openai.com/v1/chat/completions', {
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: `Tu es un expert urbaniste sp√©cialis√© dans les r√®glements du canton du Valais, Suisse. 

Utilise UNIQUEMENT tes vraies connaissances des r√®glements valaisans.
Baser l'analyse sur les vrais principes d'urbanisme du Valais.
Mentionner les vraies r√©f√©rences l√©gales (LAT, LCAT, r√®glements communaux).`
        },
        {
          role: 'user',
          content: userQuery
        }
      ],
      max_tokens: 3000,
      temperature: 0.1
    }, {
      headers: {
        'Authorization': `Bearer ${OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      },
      timeout: 30000
    });

    return response.data.choices[0].message.content;
    
  } catch (error: any) {
    console.error('üí• ERREUR OPENAI:', error.response?.data || error.message);
    throw new Error(`Erreur OpenAI: ${error.response?.data?.error?.message || error.message}`);
  }
}

router.post('/ia-constraints', async (req: express.Request, res: express.Response, next: express.NextFunction) => {
  try {
    console.log('üìû Requ√™te IA re√ßue:', req.body);
    
    const { coordinates, address, commune, parcelId, searchQuery, analysisType = 'complete' } = req.body;

    // NOUVEAU WORKFLOW: Recherche automatis√©e compl√®te
    if (searchQuery) {
      console.log(`üîç D√©marrage analyse automatis√©e pour: "${searchQuery}"`);
      
      const t0 = performance.now();
      
      try {
        // Choisir le type d'analyse
        const analysisFunction = analysisType === 'quick' ? performQuickAnalysis : performComprehensiveAnalysis;
        
        // Effectuer la recherche et collecte automatis√©e
        const comprehensiveData = await analysisFunction(searchQuery);
        
        if (comprehensiveData.completeness === 0 || !comprehensiveData.formattedForAI) {
          return res.status(404).json({ 
            error: 'Parcelle non trouv√©e ou donn√©es insuffisantes',
            details: comprehensiveData.errors.join('; '),
            searchQuery,
            completeness: comprehensiveData.completeness
          });
        }
        
        console.log(`üìä Donn√©es collect√©es (${comprehensiveData.completeness}% compl√©tude) - Envoi √† OpenAI...`);
        
        // Envoyer les donn√©es format√©es √† OpenAI
        const openaiAnalysis = await callOpenAIWithDeepSearch(comprehensiveData);
        
        const elapsedMs = performance.now() - t0;
        console.log(`‚úÖ Analyse automatis√©e compl√®te termin√©e en ${Math.round(elapsedMs)}ms`);

        return res.json({ 
          constraints: openaiAnalysis,
          comprehensiveData,
          searchQuery,
          analysisType,
          completeness: comprehensiveData.completeness,
          processingTime: comprehensiveData.processingTime,
          elapsedMs: Math.round(elapsedMs),
          source: 'Analyse approfondie multi-√©tapes avec APIs officielles + OpenAI gpt-4o-mini (recherche approfondie)'
        });
        
      } catch (error: any) {
        console.error('‚ùå Erreur analyse automatis√©e:', error.message);
        return res.status(500).json({ 
          error: 'Erreur lors de l\'analyse automatis√©e',
          details: error.message,
          searchQuery
        });
      }
    }
    
    // ANCIEN WORKFLOW: Analyse basique pour compatibilit√©
    if (!coordinates && !address) {
      return res.status(400).json({ 
        error: 'Param√®tres manquants', 
        message: 'Fournissez soit "searchQuery" pour l\'analyse automatis√©e, soit "coordinates" ou "address" pour l\'analyse basique'
      });
    }

    try {
      console.log(`ü§ñ Lancement analyse basique pour ${commune || 'la commune'}...`);
      
      const t0 = performance.now();
      
      const communeData = {
        commune: commune || 'Commune √† identifier',
        coordinates: coordinates,
        address: address
      };
      
      const parcelData = {
        address: address || coordinates,
        parcelId: parcelId || 'Non sp√©cifi√©',
        coordinates: coordinates
      };
      
      const userQuery = `Analyse cette parcelle cadastrale au Valais, Suisse. Utilise tes vraies connaissances sur l'urbanisme valaisan.
      
      Commune: ${commune || '√Ä identifier'}
      Adresse: ${address || '√Ä d√©terminer'}
      Coordonn√©es: ${coordinates || 'Non fourni'}
      Parcelle: ${parcelId || '√Ä identifier'}`;
      
      const openaiAnalysis = await callOpenAISimple(userQuery, communeData, parcelData);
      const elapsedMs = performance.now() - t0;

      console.log(`‚úÖ Analyse basique termin√©e en ${Math.round(elapsedMs)}ms`);

      res.json({ 
        constraints: openaiAnalysis, 
        elapsedMs: Math.round(elapsedMs),
        commune: commune || '√Ä identifier',
        analysisType: 'basic',
        source: 'OpenAI GPT-4o-mini avec connaissances de base'
      });
      
    } catch (openaiError: any) {
      console.error('‚ùå Erreur OpenAI:', openaiError.message);
      
      res.status(500).json({ 
        error: 'Service d\'analyse temporairement indisponible',
        message: 'OpenAI est requis pour l\'analyse. V√©rifiez votre cl√© API.',
        technical_error: openaiError.message
      });
    }
    
  } catch (err) {
    console.error('‚ùå Erreur dans l\'API IA:', err);
    next(err);
  }
});

module.exports = router; 