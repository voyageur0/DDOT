#!/usr/bin/env python3
"""
Test complet de l'API am√©lior√©e Urban-AI Valais
Teste le syst√®me hybride Zone RDPPF + R√®glement communal
"""

import requests
import json
import time

# Configuration
BASE_URL = "http://localhost:8000"
TEST_CASES = [
    {
        "name": "Lens - Parcelle 5217 (vraie parcelle)",
        "commune": "Lens",
        "parcelle": "5217",
        "expected_zone": "ZONE 18/3",
        "expected_indice": "0.30"
    }
]

def test_health():
    """Test la sant√© de l'API"""
    print("üè• Test de sant√© de l'API...")
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=10)
        if response.status_code == 200:
            print("‚úÖ API op√©rationnelle")
            return True
        else:
            print(f"‚ùå API r√©pond avec statut {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur de connexion √† l'API: {e}")
        return False

def test_ia_constraints():
    """Test l'endpoint principal avec notre syst√®me am√©lior√©"""
    print("\nü§ñ Test du syst√®me IA am√©lior√©...")
    
    for test_case in TEST_CASES:
        print(f"\nüìã Test: {test_case['name']}")
        print(f"   Commune: {test_case['commune']}, Parcelle: {test_case['parcelle']}")
        
        start_time = time.time()
        
        try:
            response = requests.post(
                f"{BASE_URL}/ia-constraints",
                json={
                    "commune": test_case['commune'],
                    "parcelle": test_case['parcelle']
                },
                timeout=120  # 2 minutes pour les appels RDPPF
            )
            
            duration = time.time() - start_time
            print(f"   ‚è±Ô∏è  Dur√©e: {duration:.2f}s")
            
            if response.status_code == 200:
                data = response.json()
                
                # Affichage des r√©sultats
                print(f"   ‚úÖ Zone extraite: {data.get('zone_info', {}).get('zone_name', 'Non trouv√©e')}")
                
                if 'constraints' in data:
                    print(f"   üìä Contraintes trouv√©es: {len(data['constraints'])}")
                    
                    for constraint in data['constraints']:
                        indice = constraint.get('indice_utilisation_sol')
                        hauteur = constraint.get('hauteur_max_batiment')
                        source = constraint.get('source_info', 'Non sp√©cifi√©e')
                        
                        print(f"      ‚Ä¢ Indice: {indice} (source: {source})")
                        print(f"      ‚Ä¢ Hauteur: {hauteur}")
                
                # V√©rification des attentes
                if test_case['expected_zone']:
                    zone_found = data.get('zone_info', {}).get('zone_name', '')
                    if test_case['expected_zone'] in zone_found:
                        print(f"   ‚úÖ Zone attendue trouv√©e")
                    else:
                        print(f"   ‚ö†Ô∏è  Zone attendue '{test_case['expected_zone']}' vs trouv√©e '{zone_found}'")
                
                if test_case['expected_indice']:
                    indices_found = [c.get('indice_utilisation_sol') for c in data.get('constraints', [])]
                    if test_case['expected_indice'] in str(indices_found):
                        print(f"   ‚úÖ Indice attendu trouv√©")
                    else:
                        print(f"   ‚ö†Ô∏è  Indice attendu '{test_case['expected_indice']}' vs trouv√©s {indices_found}")
                
                # Affichage des m√©tadonn√©es de performance
                if 'metadata' in data:
                    meta = data['metadata']
                    print(f"   üìà Performance:")
                    print(f"      - Docs RAG trouv√©s: {meta.get('rag_documents_found', 0)}")
                    print(f"      - Strat√©gies utilis√©es: {meta.get('search_strategies_used', 0)}")
                    print(f"      - Extraction hybride: {meta.get('hybrid_extraction_used', False)}")
                
            else:
                print(f"   ‚ùå Erreur HTTP {response.status_code}")
                print(f"   üìÑ R√©ponse: {response.text}")
                
        except requests.exceptions.Timeout:
            print(f"   ‚è∞ Timeout apr√®s 2 minutes")
        except Exception as e:
            print(f"   ‚ùå Erreur: {e}")

def test_rag_direct():
    """Test direct du syst√®me RAG am√©lior√©"""
    print("\nüîç Test direct du syst√®me RAG...")
    
    try:
        response = requests.post(
            f"{BASE_URL}/test-rag",
            json={
                "commune": "Lens",
                "query": "zone 18/3 villa indice utilisation"
            },
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            print(f"   ‚úÖ Documents trouv√©s: {len(data.get('documents', []))}")
            
            for i, doc in enumerate(data.get('documents', [])[:3]):  # Affiche les 3 premiers
                print(f"   üìÑ Doc {i+1}: {doc.get('content', '')[:100]}...")
                print(f"      M√©tadonn√©es: {doc.get('metadata', {})}")
        else:
            print(f"   ‚ùå Erreur RAG: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå Erreur test RAG: {e}")

def main():
    """Ex√©cute tous les tests"""
    print("üöÄ TESTS COMPLETS - URBAN-AI VALAIS AM√âLIOR√â")
    print("=" * 50)
    
    # Test de sant√©
    if not test_health():
        print("‚ùå L'API n'est pas accessible. V√©rifiez que le serveur est lanc√©.")
        return
    
    # Test du syst√®me principal
    test_ia_constraints()
    
    # Test RAG direct
    test_rag_direct()
    
    print("\n" + "=" * 50)
    print("ÔøΩÔøΩ Tests termin√©s!")
    print("\nüí° Pour tester d'autres communes, ajoutez leurs r√®glements √† ChromaDB d'abord !")

if __name__ == "__main__":
    main() 