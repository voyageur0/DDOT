// Test pour trouver la parcelle avec Zone r√©sidentielle 0.5 (3)
const axios = require('axios');

async function testFindResidentialZone() {
    console.log('üîç Recherche de la parcelle Zone r√©sidentielle 0.5 (3) √† Sion...\n');
    
    // D'apr√®s les screenshots, on cherche une parcelle avec:
    // - Zone r√©sidentielle 0.5 (3)
    // - Surface 2257 m¬≤ 
    // - 100% de la parcelle dans cette zone
    
    const testSearches = [
        'CH536633313461', // EGRID du screenshot
        'Sion 3461', // Num√©ro partiel possible
        'Sion parcelle 3461',
        'Sion 33313461',
        'Sion Zone r√©sidentielle 0.5'
    ];
    
    for (const search of testSearches) {
        console.log(`\n${'='.repeat(60)}`);
        console.log(`üìç Test: "${search}"`);
        console.log(`${'='.repeat(60)}\n`);
        
        try {
            const response = await axios.post('http://127.0.0.1:3001/api/ia-constraints', {
                searchQuery: search,
                analysisType: 'comprehensive' // Analyse compl√®te pour avoir toutes les infos
            }, {
                timeout: 120000 // 2 minutes
            });
            
            const data = response.data;
            
            console.log('üìä R√©sultat:');
            console.log(`   Compl√©tude: ${data.metadata?.completeness}%`);
            console.log(`   Zone: ${data.data?.parcel?.zone || 'Non d√©termin√©e'}`);
            console.log(`   Surface zone: ${data.data?.parcel?.zone_surface || 'Non sp√©cifi√©e'}`);
            
            // V√©rifier si c'est la bonne zone
            const zone = data.data?.parcel?.zone || '';
            if (zone.includes('r√©sidentielle') && zone.includes('0.5')) {
                console.log('\n‚úÖ TROUV√â ! C\'est la bonne parcelle !');
                console.log(`   Zone compl√®te: ${zone}`);
                
                // Afficher les contraintes principales
                const constraints = data.data?.constraints || [];
                const ibusConstraint = constraints.find(c => 
                    c.title?.includes('IBUS') || c.values?.unit === 'IBUS'
                );
                if (ibusConstraint) {
                    console.log(`   IBUS: ${ibusConstraint.values?.numeric || ibusConstraint.rule}`);
                }
                
                // Sauvegarder pour analyse
                const fs = require('fs');
                fs.writeFileSync(`residential-zone-found-${search.replace(/[^a-z0-9]/gi, '_')}.json`, 
                    JSON.stringify(data, null, 2));
                console.log(`\nüíæ Donn√©es compl√®tes sauvegard√©es`);
                
                break; // On a trouv√© !
            } else if (zone.includes('foresti√®re')) {
                console.log('‚ùå Zone foresti√®re trouv√©e (mauvaise parcelle)');
            }
            
        } catch (error) {
            console.error(`‚ùå Erreur: ${error.message}`);
        }
    }
    
    console.log('\n\nüìù R√©sum√©:');
    console.log('L\'utilisateur voit dans le RDPPF:');
    console.log('- Zone r√©sidentielle 0.5 (3)');
    console.log('- Surface: 2257 m¬≤');
    console.log('- 100.0% de la parcelle');
    console.log('\nMais l\'API trouve une zone foresti√®re ou "√† d√©terminer"');
    console.log('Il faut identifier pourquoi le bon EGRID ne donne pas la bonne zone.');
}

testFindResidentialZone();